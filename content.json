{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://fyupeng.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-06-24T18:09:11.552Z","updated":"2022-06-24T18:09:11.552Z","comments":false,"path":"/404.html","permalink":"http://fyupeng.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-06-24T18:09:11.558Z","updated":"2022-06-24T18:09:11.558Z","comments":false,"path":"about/index.html","permalink":"http://fyupeng.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2022-06-24T18:09:11.561Z","updated":"2022-06-24T18:09:11.561Z","comments":false,"path":"categories/index.html","permalink":"http://fyupeng.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-06-24T18:09:11.559Z","updated":"2022-06-24T18:09:11.559Z","comments":false,"path":"books/index.html","permalink":"http://fyupeng.github.io/books/index.html","excerpt":"","text":""},{"title":"","date":"2022-06-24T17:19:04.497Z","updated":"2022-06-24T17:19:04.497Z","comments":true,"path":"fonts/README.html","permalink":"http://fyupeng.github.io/fonts/README.html","excerpt":"","text":"Font AssetsIf you are providing web font files, this is the place to put them. The fonts task will copy them over to the destination specified in config.json, and file names will be reved in production builds (if enabled). If you don’t plan using web fonts, or are relying on an external service like Google Fonts, feel free to delete this folder and the tasks.fonts config in gulpfile.js/config.json. Tasks and Files1gulpfile.js/tasks/fonts All this task does is copy fonts from ./src/fonts to ./public/fonts. A sass +font-face mixin is included in ./src/stylesheets/base/mixins."},{"title":"","date":"2022-06-24T17:19:04.494Z","updated":"2022-06-24T17:19:04.494Z","comments":true,"path":"css/style.css","permalink":"http://fyupeng.github.io/css/style.css","excerpt":"","text":"@charset \"UTF-8\"; /** * global variables and mixins */ /** * font family */ /** * */ /* Mixins */ /** * bootstrap */ /*! * Bootstrap v3.3.7 (http://getbootstrap.com) * Copyright 2011-2016 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */ /*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */ html { font-family: sans-serif; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; } body { margin: 0; } article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary { display: block; } audio, canvas, progress, video { display: inline-block; vertical-align: baseline; } audio:not([controls]) { display: none; height: 0; } [hidden], template { display: none; } a { background-color: transparent; } a:active, a:hover { outline: 0; } abbr[title] { border-bottom: 1px dotted; } b, strong { font-weight: bold; } dfn { font-style: italic; } h1 { font-size: 2em; margin: 0.67em 0; } mark { background: #ff0; color: #000; } small { font-size: 80%; } sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } sup { top: -0.5em; } sub { bottom: -0.25em; } img { border: 0; } svg:not(:root) { overflow: hidden; } figure { margin: 1em 40px; } hr { -webkit-box-sizing: content-box; box-sizing: content-box; height: 0; } pre { overflow: auto; } code, kbd, pre, samp { font-family: monospace,monospace; font-size: 1em; } button, input, optgroup, select, textarea { color: inherit; font: inherit; margin: 0; } button { overflow: visible; } button, select { text-transform: none; } button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] { -webkit-appearance: button; cursor: pointer; } button[disabled], html input[disabled] { cursor: default; } button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; } input { line-height: normal; } input[type=\"checkbox\"], input[type=\"radio\"] { -webkit-box-sizing: border-box; box-sizing: border-box; padding: 0; } input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button { height: auto; } input[type=\"search\"] { -webkit-appearance: textfield; -webkit-box-sizing: content-box; box-sizing: content-box; } input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration { -webkit-appearance: none; } fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; } legend { border: 0; padding: 0; } textarea { overflow: auto; } optgroup { font-weight: bold; } table { border-collapse: collapse; border-spacing: 0; } td, th { padding: 0; } /*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */ * { -webkit-box-sizing: border-box; box-sizing: border-box; } *:before, *:after { -webkit-box-sizing: border-box; box-sizing: border-box; } html { font-size: 10px; -webkit-tap-highlight-color: transparent; } input, button, select, textarea { font-family: inherit; font-size: inherit; line-height: inherit; } a { color: #2196f3; text-decoration: none; } a:hover, a:focus { color: #0a6ebd; text-decoration: underline; } a:focus { outline: 5px auto -webkit-focus-ring-color; outline-offset: -2px; } figure { margin: 0; } img { vertical-align: middle; } .img-responsive { display: block; max-width: 100%; height: auto; } .img-rounded { border-radius: 6px; } .img-thumbnail { padding: 4px; line-height: 1.57143; background-color: #fff; border: 1px solid #ddd; border-radius: 4px; -webkit-transition: all 0.2s ease-in-out; transition: all 0.2s ease-in-out; display: inline-block; max-width: 100%; height: auto; } .img-circle { border-radius: 50%; } hr { margin-top: 21px; margin-bottom: 21px; border: 0; border-top: 1px solid #eeeeee; } .sr-only { position: absolute; width: 1px; height: 1px; margin: -1px; padding: 0; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0; } .sr-only-focusable:active, .sr-only-focusable:focus { position: static; width: auto; height: auto; margin: 0; overflow: visible; clip: auto; } [role=\"button\"] { cursor: pointer; } h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 { font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; } h1 small, h1 .small, h2 small, h2 .small, h3 small, h3 .small, h4 small, h4 .small, h5 small, h5 .small, h6 small, h6 .small, .h1 small, .h1 .small, .h2 small, .h2 .small, .h3 small, .h3 .small, .h4 small, .h4 .small, .h5 small, .h5 .small, .h6 small, .h6 .small { font-weight: normal; line-height: 1; color: #777777; } h1, .h1, h2, .h2, h3, .h3 { margin-top: 21px; margin-bottom: 10.5px; } h1 small, h1 .small, .h1 small, .h1 .small, h2 small, h2 .small, .h2 small, .h2 .small, h3 small, h3 .small, .h3 small, .h3 .small { font-size: 65%; } h4, .h4, h5, .h5, h6, .h6 { margin-top: 10.5px; margin-bottom: 10.5px; } h4 small, h4 .small, .h4 small, .h4 .small, h5 small, h5 .small, .h5 small, .h5 .small, h6 small, h6 .small, .h6 small, .h6 .small { font-size: 75%; } h1, .h1 { font-size: 30px; } h2, .h2 { font-size: 26px; } h3, .h3 { font-size: 22px; } h4, .h4 { font-size: 18px; } h5, .h5 { font-size: 14px; } h6, .h6 { font-size: 12px; } p { margin: 0 0 10.5px; } .lead { margin-bottom: 21px; font-size: 16px; font-weight: 300; line-height: 1.4; } small, .small { font-size: 85%; } mark, .mark { background-color: #fcf8e3; padding: .2em; } .text-left { text-align: left; } .text-right { text-align: right; } .text-center { text-align: center; } .text-justify { text-align: justify; } .text-nowrap { white-space: nowrap; } .text-lowercase { text-transform: lowercase; } .text-uppercase, .initialism { text-transform: uppercase; } .text-capitalize { text-transform: capitalize; } .text-muted { color: #777777 !important; } .text-primary { color: #2196f3; } a.text-primary:hover, a.text-primary:focus { color: #0c7cd5; } .text-success { color: #3c763d; } a.text-success:hover, a.text-success:focus { color: #2b542c; } .text-info { color: #31708f; } a.text-info:hover, a.text-info:focus { color: #245269; } .text-warning { color: #8a6d3b; } a.text-warning:hover, a.text-warning:focus { color: #66512c; } .text-danger { color: #a94442; } a.text-danger:hover, a.text-danger:focus { color: #843534; } .bg-primary { color: #fff; } .bg-primary { background-color: #2196f3; } a.bg-primary:hover, a.bg-primary:focus { background-color: #0c7cd5; } .bg-success { background-color: #dff0d8; } a.bg-success:hover, a.bg-success:focus { background-color: #c1e2b3; } .bg-info { background-color: #d9edf7; } a.bg-info:hover, a.bg-info:focus { background-color: #afd9ee; } .bg-warning { background-color: #fcf8e3; } a.bg-warning:hover, a.bg-warning:focus { background-color: #f7ecb5; } .bg-danger { background-color: #f2dede; } a.bg-danger:hover, a.bg-danger:focus { background-color: #e4b9b9; } .page-header { padding-bottom: 9.5px; margin: 42px 0 21px; border-bottom: 1px solid #eeeeee; } ul, ol { margin-top: 0; margin-bottom: 10.5px; } ul ul, ul ol, ol ul, ol ol { margin-bottom: 0; } .list-unstyled { padding-left: 0; list-style: none; } .list-inline { padding-left: 0; list-style: none; margin-left: -5px; } .list-inline > li { display: inline-block; padding-left: 5px; padding-right: 5px; } dl { margin-top: 0; margin-bottom: 21px; } dt, dd { line-height: 1.57143; } dt { font-weight: bold; } dd { margin-left: 0; } .dl-horizontal dd:before, .dl-horizontal dd:after { content: \" \"; display: table; } .dl-horizontal dd:after { clear: both; } abbr[title], abbr[data-original-title] { cursor: help; border-bottom: 1px dotted #777777; } .initialism { font-size: 90%; } blockquote { padding: 10.5px 16px; margin: 0 0 21px; border: 1px dotted #eeeeee; border-left: 3px solid #eeeeee; background-color: #fbfbfb; } blockquote p:last-child, blockquote ul:last-child, blockquote ol:last-child { margin-bottom: 0; } blockquote footer, blockquote small, blockquote .small { display: block; font-size: 80%; line-height: 1.57143; color: #777777; } blockquote footer:before, blockquote small:before, blockquote .small:before { content: '\\2014 \\00A0'; } .blockquote-reverse, blockquote.pull-right { padding-right: 15px; padding-left: 0; border-right: 5px solid #eeeeee; border-left: 0; text-align: right; } .blockquote-reverse footer:before, .blockquote-reverse small:before, .blockquote-reverse .small:before, blockquote.pull-right footer:before, blockquote.pull-right small:before, blockquote.pull-right .small:before { content: ''; } .blockquote-reverse footer:after, .blockquote-reverse small:after, .blockquote-reverse .small:after, blockquote.pull-right footer:after, blockquote.pull-right small:after, blockquote.pull-right .small:after { content: '\\00A0 \\2014'; } address { margin-bottom: 21px; font-style: normal; line-height: 1.57143; } .container { margin-right: auto; margin-left: auto; padding-left: 15px; padding-right: 15px; } .container:before, .container:after { content: \" \"; display: table; } .container:after { clear: both; } .container-fluid { margin-right: auto; margin-left: auto; padding-left: 15px; padding-right: 15px; } .container-fluid:before, .container-fluid:after { content: \" \"; display: table; } .container-fluid:after { clear: both; } .row { margin-left: -15px; margin-right: -15px; } .row:before, .row:after { content: \" \"; display: table; } .row:after { clear: both; } .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 { position: relative; min-height: 1px; padding-left: 15px; padding-right: 15px; } .col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 { float: left; } .col-xs-1 { width: 8.33333%; } .col-xs-2 { width: 16.66667%; } .col-xs-3 { width: 25%; } .col-xs-4 { width: 33.33333%; } .col-xs-5 { width: 41.66667%; } .col-xs-6 { width: 50%; } .col-xs-7 { width: 58.33333%; } .col-xs-8 { width: 66.66667%; } .col-xs-9 { width: 75%; } .col-xs-10 { width: 83.33333%; } .col-xs-11 { width: 91.66667%; } .col-xs-12 { width: 100%; } .col-xs-pull-0 { right: auto; } .col-xs-pull-1 { right: 8.33333%; } .col-xs-pull-2 { right: 16.66667%; } .col-xs-pull-3 { right: 25%; } .col-xs-pull-4 { right: 33.33333%; } .col-xs-pull-5 { right: 41.66667%; } .col-xs-pull-6 { right: 50%; } .col-xs-pull-7 { right: 58.33333%; } .col-xs-pull-8 { right: 66.66667%; } .col-xs-pull-9 { right: 75%; } .col-xs-pull-10 { right: 83.33333%; } .col-xs-pull-11 { right: 91.66667%; } .col-xs-pull-12 { right: 100%; } .col-xs-push-0 { left: auto; } .col-xs-push-1 { left: 8.33333%; } .col-xs-push-2 { left: 16.66667%; } .col-xs-push-3 { left: 25%; } .col-xs-push-4 { left: 33.33333%; } .col-xs-push-5 { left: 41.66667%; } .col-xs-push-6 { left: 50%; } .col-xs-push-7 { left: 58.33333%; } .col-xs-push-8 { left: 66.66667%; } .col-xs-push-9 { left: 75%; } .col-xs-push-10 { left: 83.33333%; } .col-xs-push-11 { left: 91.66667%; } .col-xs-push-12 { left: 100%; } .col-xs-offset-0 { margin-left: 0%; } .col-xs-offset-1 { margin-left: 8.33333%; } .col-xs-offset-2 { margin-left: 16.66667%; } .col-xs-offset-3 { margin-left: 25%; } .col-xs-offset-4 { margin-left: 33.33333%; } .col-xs-offset-5 { margin-left: 41.66667%; } .col-xs-offset-6 { margin-left: 50%; } .col-xs-offset-7 { margin-left: 58.33333%; } .col-xs-offset-8 { margin-left: 66.66667%; } .col-xs-offset-9 { margin-left: 75%; } .col-xs-offset-10 { margin-left: 83.33333%; } .col-xs-offset-11 { margin-left: 91.66667%; } .col-xs-offset-12 { margin-left: 100%; } .btn { display: inline-block; margin-bottom: 0; font-weight: normal; text-align: center; vertical-align: middle; -ms-touch-action: manipulation; touch-action: manipulation; cursor: pointer; background-image: none; border: 1px solid transparent; white-space: nowrap; padding: 6px 12px; font-size: 14px; line-height: 1.57143; border-radius: 4px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .btn:focus, .btn.focus, .btn:active:focus, .btn:active.focus, .btn.active:focus, .btn.active.focus { outline: 5px auto -webkit-focus-ring-color; outline-offset: -2px; } .btn:hover, .btn:focus, .btn.focus { color: #333; text-decoration: none; } .btn:active, .btn.active { outline: 0; background-image: none; -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125); box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125); } .btn.disabled, .btn[disabled], fieldset[disabled] .btn { cursor: not-allowed; opacity: 0.65; filter: alpha(opacity=65); -webkit-box-shadow: none; box-shadow: none; } a.btn.disabled, fieldset[disabled] a.btn { pointer-events: none; } .btn-default { color: #333; background-color: #fff; border-color: #ccc; } .btn-default:focus, .btn-default.focus { color: #333; background-color: #e6e6e6; border-color: #8c8c8c; } .btn-default:hover { color: #333; background-color: #e6e6e6; border-color: #adadad; } .btn-default:active, .btn-default.active, .open > .btn-default.dropdown-toggle { color: #333; background-color: #e6e6e6; border-color: #adadad; } .btn-default:active:hover, .btn-default:active:focus, .btn-default:active.focus, .btn-default.active:hover, .btn-default.active:focus, .btn-default.active.focus, .open > .btn-default.dropdown-toggle:hover, .open > .btn-default.dropdown-toggle:focus, .open > .btn-default.dropdown-toggle.focus { color: #333; background-color: #d4d4d4; border-color: #8c8c8c; } .btn-default:active, .btn-default.active, .open > .btn-default.dropdown-toggle { background-image: none; } .btn-default.disabled:hover, .btn-default.disabled:focus, .btn-default.disabled.focus, .btn-default[disabled]:hover, .btn-default[disabled]:focus, .btn-default[disabled].focus, fieldset[disabled] .btn-default:hover, fieldset[disabled] .btn-default:focus, fieldset[disabled] .btn-default.focus { background-color: #fff; border-color: #ccc; } .btn-default .badge { color: #fff; background-color: #333; } .btn-primary { color: #fff; background-color: #2196f3; border-color: #0d8aee; } .btn-primary:focus, .btn-primary.focus { color: #fff; background-color: #0c7cd5; border-color: #064475; } .btn-primary:hover { color: #fff; background-color: #0c7cd5; border-color: #0a68b4; } .btn-primary:active, .btn-primary.active, .open > .btn-primary.dropdown-toggle { color: #fff; background-color: #0c7cd5; border-color: #0a68b4; } .btn-primary:active:hover, .btn-primary:active:focus, .btn-primary:active.focus, .btn-primary.active:hover, .btn-primary.active:focus, .btn-primary.active.focus, .open > .btn-primary.dropdown-toggle:hover, .open > .btn-primary.dropdown-toggle:focus, .open > .btn-primary.dropdown-toggle.focus { color: #fff; background-color: #0a68b4; border-color: #064475; } .btn-primary:active, .btn-primary.active, .open > .btn-primary.dropdown-toggle { background-image: none; } .btn-primary.disabled:hover, .btn-primary.disabled:focus, .btn-primary.disabled.focus, .btn-primary[disabled]:hover, .btn-primary[disabled]:focus, .btn-primary[disabled].focus, fieldset[disabled] .btn-primary:hover, fieldset[disabled] .btn-primary:focus, fieldset[disabled] .btn-primary.focus { background-color: #2196f3; border-color: #0d8aee; } .btn-primary .badge { color: #2196f3; background-color: #fff; } .btn-success { color: #fff; background-color: #5cb85c; border-color: #4cae4c; } .btn-success:focus, .btn-success.focus { color: #fff; background-color: #449d44; border-color: #255625; } .btn-success:hover { color: #fff; background-color: #449d44; border-color: #398439; } .btn-success:active, .btn-success.active, .open > .btn-success.dropdown-toggle { color: #fff; background-color: #449d44; border-color: #398439; } .btn-success:active:hover, .btn-success:active:focus, .btn-success:active.focus, .btn-success.active:hover, .btn-success.active:focus, .btn-success.active.focus, .open > .btn-success.dropdown-toggle:hover, .open > .btn-success.dropdown-toggle:focus, .open > .btn-success.dropdown-toggle.focus { color: #fff; background-color: #398439; border-color: #255625; } .btn-success:active, .btn-success.active, .open > .btn-success.dropdown-toggle { background-image: none; } .btn-success.disabled:hover, .btn-success.disabled:focus, .btn-success.disabled.focus, .btn-success[disabled]:hover, .btn-success[disabled]:focus, .btn-success[disabled].focus, fieldset[disabled] .btn-success:hover, fieldset[disabled] .btn-success:focus, fieldset[disabled] .btn-success.focus { background-color: #5cb85c; border-color: #4cae4c; } .btn-success .badge { color: #5cb85c; background-color: #fff; } .btn-info { color: #fff; background-color: #56CCF2; border-color: #3ec5f0; } .btn-info:focus, .btn-info.focus { color: #fff; background-color: #27beee; border-color: #0d7ea3; } .btn-info:hover { color: #fff; background-color: #27beee; border-color: #11aee0; } .btn-info:active, .btn-info.active, .open > .btn-info.dropdown-toggle { color: #fff; background-color: #27beee; border-color: #11aee0; } .btn-info:active:hover, .btn-info:active:focus, .btn-info:active.focus, .btn-info.active:hover, .btn-info.active:focus, .btn-info.active.focus, .open > .btn-info.dropdown-toggle:hover, .open > .btn-info.dropdown-toggle:focus, .open > .btn-info.dropdown-toggle.focus { color: #fff; background-color: #11aee0; border-color: #0d7ea3; } .btn-info:active, .btn-info.active, .open > .btn-info.dropdown-toggle { background-image: none; } .btn-info.disabled:hover, .btn-info.disabled:focus, .btn-info.disabled.focus, .btn-info[disabled]:hover, .btn-info[disabled]:focus, .btn-info[disabled].focus, fieldset[disabled] .btn-info:hover, fieldset[disabled] .btn-info:focus, fieldset[disabled] .btn-info.focus { background-color: #56CCF2; border-color: #3ec5f0; } .btn-info .badge { color: #56CCF2; background-color: #fff; } .btn-warning { color: #fff; background-color: #F09819; border-color: #e18b0f; } .btn-warning:focus, .btn-warning.focus { color: #fff; background-color: #c97c0d; border-color: #694107; } .btn-warning:hover { color: #fff; background-color: #c97c0d; border-color: #a7670b; } .btn-warning:active, .btn-warning.active, .open > .btn-warning.dropdown-toggle { color: #fff; background-color: #c97c0d; border-color: #a7670b; } .btn-warning:active:hover, .btn-warning:active:focus, .btn-warning:active.focus, .btn-warning.active:hover, .btn-warning.active:focus, .btn-warning.active.focus, .open > .btn-warning.dropdown-toggle:hover, .open > .btn-warning.dropdown-toggle:focus, .open > .btn-warning.dropdown-toggle.focus { color: #fff; background-color: #a7670b; border-color: #694107; } .btn-warning:active, .btn-warning.active, .open > .btn-warning.dropdown-toggle { background-image: none; } .btn-warning.disabled:hover, .btn-warning.disabled:focus, .btn-warning.disabled.focus, .btn-warning[disabled]:hover, .btn-warning[disabled]:focus, .btn-warning[disabled].focus, fieldset[disabled] .btn-warning:hover, fieldset[disabled] .btn-warning:focus, fieldset[disabled] .btn-warning.focus { background-color: #F09819; border-color: #e18b0f; } .btn-warning .badge { color: #F09819; background-color: #fff; } .btn-danger { color: #fff; background-color: #FF512F; border-color: #ff3c16; } .btn-danger:focus, .btn-danger.focus { color: #fff; background-color: #fb2900; border-color: #951800; } .btn-danger:hover { color: #fff; background-color: #fb2900; border-color: #d72300; } .btn-danger:active, .btn-danger.active, .open > .btn-danger.dropdown-toggle { color: #fff; background-color: #fb2900; border-color: #d72300; } .btn-danger:active:hover, .btn-danger:active:focus, .btn-danger:active.focus, .btn-danger.active:hover, .btn-danger.active:focus, .btn-danger.active.focus, .open > .btn-danger.dropdown-toggle:hover, .open > .btn-danger.dropdown-toggle:focus, .open > .btn-danger.dropdown-toggle.focus { color: #fff; background-color: #d72300; border-color: #951800; } .btn-danger:active, .btn-danger.active, .open > .btn-danger.dropdown-toggle { background-image: none; } .btn-danger.disabled:hover, .btn-danger.disabled:focus, .btn-danger.disabled.focus, .btn-danger[disabled]:hover, .btn-danger[disabled]:focus, .btn-danger[disabled].focus, fieldset[disabled] .btn-danger:hover, fieldset[disabled] .btn-danger:focus, fieldset[disabled] .btn-danger.focus { background-color: #FF512F; border-color: #ff3c16; } .btn-danger .badge { color: #FF512F; background-color: #fff; } .btn-link { color: #2196f3; font-weight: normal; border-radius: 0; } .btn-link, .btn-link:active, .btn-link.active, .btn-link[disabled], fieldset[disabled] .btn-link { background-color: transparent; -webkit-box-shadow: none; box-shadow: none; } .btn-link, .btn-link:hover, .btn-link:focus, .btn-link:active { border-color: transparent; } .btn-link:hover, .btn-link:focus { color: #0a6ebd; text-decoration: underline; background-color: transparent; } .btn-link[disabled]:hover, .btn-link[disabled]:focus, fieldset[disabled] .btn-link:hover, fieldset[disabled] .btn-link:focus { color: #777777; text-decoration: none; } .btn-lg { padding: 10px 16px; font-size: 18px; line-height: 1.33333; border-radius: 6px; } .btn-sm { padding: 5px 10px; font-size: 12px; line-height: 1.5; border-radius: 3px; } .btn-xs { padding: 1px 5px; font-size: 12px; line-height: 1.5; border-radius: 3px; } .btn-block { display: block; width: 100%; } .btn-block + .btn-block { margin-top: 5px; } input[type=\"submit\"].btn-block, input[type=\"reset\"].btn-block, input[type=\"button\"].btn-block { width: 100%; } .fade { opacity: 0; -webkit-transition: opacity 0.15s linear; transition: opacity 0.15s linear; } .fade.in { opacity: 1; } .collapse { display: none; } .collapse.in { display: block; } tr.collapse.in { display: table-row; } tbody.collapse.in { display: table-row-group; } .collapsing { position: relative; height: 0; overflow: hidden; -webkit-transition-property: height,visibility; transition-property: height,visibility; -webkit-transition-duration: 0.35s; transition-duration: 0.35s; -webkit-transition-timing-function: ease; transition-timing-function: ease; } .caret { display: inline-block; width: 0; height: 0; margin-left: 2px; vertical-align: middle; border-top: 4px dashed; border-top: 4px solid \\9; border-right: 4px solid transparent; border-left: 4px solid transparent; } .dropup, .dropdown { position: relative; } .dropdown-toggle:focus { outline: 0; } .dropdown-menu { position: absolute; top: 100%; left: 0; z-index: 1000; display: none; float: left; min-width: 160px; padding: 5px 0; margin: 2px 0 0; list-style: none; font-size: 14px; text-align: left; background-color: #fff; border: 1px solid #ccc; border: 1px solid rgba(0, 0, 0, 0.15); border-radius: 4px; -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175); background-clip: padding-box; } .dropdown-menu.pull-right { right: 0; left: auto; } .dropdown-menu .divider { height: 1px; margin: 9.5px 0; overflow: hidden; background-color: #e5e5e5; } .dropdown-menu > li > a { display: block; padding: 3px 20px; clear: both; font-weight: normal; line-height: 1.57143; color: #333333; white-space: nowrap; } .dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus { text-decoration: none; color: #262626; background-color: #f5f5f5; } .dropdown-menu > .active > a, .dropdown-menu > .active > a:hover, .dropdown-menu > .active > a:focus { color: #fff; text-decoration: none; outline: 0; background-color: #2196f3; } .dropdown-menu > .disabled > a, .dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus { color: #777777; } .dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus { text-decoration: none; background-color: transparent; background-image: none; filter: progid:DXImageTransform.Microsoft.gradient(enabled = false); cursor: not-allowed; } .open > .dropdown-menu { display: block; } .open > a { outline: 0; } .dropdown-menu-right { left: auto; right: 0; } .dropdown-menu-left { left: 0; right: auto; } .dropdown-header { display: block; padding: 3px 20px; font-size: 12px; line-height: 1.57143; color: #777777; white-space: nowrap; } .dropdown-backdrop { position: fixed; left: 0; right: 0; bottom: 0; top: 0; z-index: 990; } .pull-right > .dropdown-menu { right: 0; left: auto; } .dropup .caret, .navbar-fixed-bottom .dropdown .caret { border-top: 0; border-bottom: 4px dashed; border-bottom: 4px solid \\9; content: \"\"; } .dropup .dropdown-menu, .navbar-fixed-bottom .dropdown .dropdown-menu { top: auto; bottom: 100%; margin-bottom: 2px; } .input-group { position: relative; display: table; border-collapse: separate; } .input-group[class*=\"col-\"] { float: none; padding-left: 0; padding-right: 0; } .input-group .form-control { position: relative; z-index: 2; float: left; width: 100%; margin-bottom: 0; } .input-group .form-control:focus { z-index: 3; } .input-group-addon, .input-group-btn, .input-group .form-control { display: table-cell; } .input-group-addon:not(:first-child):not(:last-child), .input-group-btn:not(:first-child):not(:last-child), .input-group .form-control:not(:first-child):not(:last-child) { border-radius: 0; } .input-group-addon, .input-group-btn { width: 1%; white-space: nowrap; vertical-align: middle; } .input-group-addon { padding: 6px 12px; font-size: 14px; font-weight: normal; line-height: 1; color: #555555; text-align: center; background-color: #eeeeee; border: 1px solid #ccc; border-radius: 4px; } .input-group-addon.input-sm, .input-group-sm > .input-group-addon, .input-group-sm > .input-group-btn > .input-group-addon.btn { padding: 5px 10px; font-size: 12px; border-radius: 3px; } .input-group-addon.input-lg, .input-group-lg > .input-group-addon, .input-group-lg > .input-group-btn > .input-group-addon.btn { padding: 10px 16px; font-size: 18px; border-radius: 6px; } .input-group-addon input[type=\"radio\"], .input-group-addon input[type=\"checkbox\"] { margin-top: 0; } .input-group .form-control:first-child, .input-group-addon:first-child, .input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group > .btn, .input-group-btn:first-child > .dropdown-toggle, .input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle), .input-group-btn:last-child > .btn-group:not(:last-child) > .btn { border-bottom-right-radius: 0; border-top-right-radius: 0; } .input-group-addon:first-child { border-right: 0; } .input-group .form-control:last-child, .input-group-addon:last-child, .input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group > .btn, .input-group-btn:last-child > .dropdown-toggle, .input-group-btn:first-child > .btn:not(:first-child), .input-group-btn:first-child > .btn-group:not(:first-child) > .btn { border-bottom-left-radius: 0; border-top-left-radius: 0; } .input-group-addon:last-child { border-left: 0; } .input-group-btn { position: relative; font-size: 0; white-space: nowrap; } .input-group-btn > .btn { position: relative; } .input-group-btn > .btn + .btn { margin-left: -1px; } .input-group-btn > .btn:hover, .input-group-btn > .btn:focus, .input-group-btn > .btn:active { z-index: 2; } .input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group { margin-right: -1px; } .input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group { z-index: 2; margin-left: -1px; } .nav { margin-bottom: 0; padding-left: 0; list-style: none; } .nav:before, .nav:after { content: \" \"; display: table; } .nav:after { clear: both; } .nav > li { position: relative; display: block; } .nav > li > a { position: relative; display: block; padding: 10px 15px; } .nav > li > a:hover, .nav > li > a:focus { text-decoration: none; background-color: #eeeeee; } .nav > li.disabled > a { color: #777777; } .nav > li.disabled > a:hover, .nav > li.disabled > a:focus { color: #777777; text-decoration: none; background-color: transparent; cursor: not-allowed; } .nav .open > a, .nav .open > a:hover, .nav .open > a:focus { background-color: #eeeeee; border-color: #2196f3; } .nav .nav-divider { height: 1px; margin: 9.5px 0; overflow: hidden; background-color: #e5e5e5; } .nav > li > a > img { max-width: none; } .nav-tabs { border-bottom: 1px solid #f2f2f2; } .nav-tabs > li { float: left; margin-bottom: -1px; } .nav-tabs > li > a { margin-right: 2px; line-height: 1.57143; border: 1px solid transparent; border-radius: 4px 4px 0 0; } .nav-tabs > li > a:hover { border-color: #eeeeee #eeeeee #f2f2f2; } .nav-tabs > li.active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.active > a:focus { color: #555555; background-color: #fff; border: 1px solid #f2f2f2; border-bottom-color: transparent; cursor: default; } .nav-pills > li { float: left; } .nav-pills > li > a { border-radius: 4px; } .nav-pills > li + li { margin-left: 2px; } .nav-pills > li.active > a, .nav-pills > li.active > a:hover, .nav-pills > li.active > a:focus { color: #fff; background-color: #2196f3; } .nav-stacked > li { float: none; } .nav-stacked > li + li { margin-top: 2px; margin-left: 0; } .nav-justified, .nav-tabs.nav-justified { width: 100%; } .nav-justified > li, .nav-tabs.nav-justified > li { float: none; } .nav-justified > li > a, .nav-tabs.nav-justified > li > a { text-align: center; margin-bottom: 5px; } .nav-justified > .dropdown .dropdown-menu { top: auto; left: auto; } .nav-tabs-justified, .nav-tabs.nav-justified { border-bottom: 0; } .nav-tabs-justified > li > a, .nav-tabs.nav-justified > li > a { margin-right: 0; border-radius: 4px; } .nav-tabs-justified > .active > a, .nav-tabs.nav-justified > .active > a, .nav-tabs-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:hover, .nav-tabs-justified > .active > a:focus, .nav-tabs.nav-justified > .active > a:focus { border: 1px solid #f2f2f2; } .tab-content > .tab-pane { display: none; } .tab-content > .active { display: block; } .nav-tabs .dropdown-menu { margin-top: -1px; border-top-right-radius: 0; border-top-left-radius: 0; } .navbar { position: relative; min-height: 50px; margin-bottom: 21px; border: 1px solid transparent; } .navbar:before, .navbar:after { content: \" \"; display: table; } .navbar:after { clear: both; } .navbar-header:before, .navbar-header:after { content: \" \"; display: table; } .navbar-header:after { clear: both; } .navbar-collapse { overflow-x: visible; padding-right: 15px; padding-left: 15px; border-top: 1px solid transparent; -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1); box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1); -webkit-overflow-scrolling: touch; } .navbar-collapse:before, .navbar-collapse:after { content: \" \"; display: table; } .navbar-collapse:after { clear: both; } .navbar-collapse.in { overflow-y: auto; } .navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse { max-height: 340px; } .container > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-header, .container-fluid > .navbar-collapse { margin-right: -15px; margin-left: -15px; } .navbar-static-top { z-index: 1000; border-width: 0 0 1px; } .navbar-fixed-top, .navbar-fixed-bottom { position: fixed; right: 0; left: 0; z-index: 1030; } .navbar-fixed-top { top: 0; border-width: 0 0 1px; } .navbar-fixed-bottom { bottom: 0; margin-bottom: 0; border-width: 1px 0 0; } .navbar-brand { float: left; padding: 14.5px 15px; font-size: 18px; line-height: 21px; height: 50px; } .navbar-brand:hover, .navbar-brand:focus { text-decoration: none; } .navbar-brand > img { display: block; } .navbar-toggle { position: relative; float: right; margin-right: 15px; padding: 10px 10px; margin-top: 8px; margin-bottom: 8px; background-color: transparent; background-image: none; border: 1px solid transparent; border-radius: 4px; } .navbar-toggle:focus { outline: 0; } .navbar-toggle .icon-bar { display: block; width: 22px; height: 2px; border-radius: 1px; } .navbar-toggle .icon-bar + .icon-bar { margin-top: 3px; } .navbar-nav { margin: 7.25px -15px; } .navbar-nav > li > a { padding-top: 10px; padding-bottom: 10px; line-height: 21px; } .navbar-form { margin-left: -15px; margin-right: -15px; padding: 10px 15px; border-top: 1px solid transparent; border-bottom: 1px solid transparent; -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1),0 1px 0 rgba(255, 255, 255, 0.1); box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1),0 1px 0 rgba(255, 255, 255, 0.1); margin-top: 7.5px; margin-bottom: 7.5px; } .navbar-nav > li > .dropdown-menu { margin-top: 0; border-top-right-radius: 0; border-top-left-radius: 0; } .navbar-fixed-bottom .navbar-nav > li > .dropdown-menu { margin-bottom: 0; border-top-right-radius: 4px; border-top-left-radius: 4px; border-bottom-right-radius: 0; border-bottom-left-radius: 0; } .navbar-btn { margin-top: 7.5px; margin-bottom: 7.5px; } .navbar-btn.btn-sm { margin-top: 10px; margin-bottom: 10px; } .navbar-btn.btn-xs { margin-top: 14px; margin-bottom: 14px; } .navbar-text { margin-top: 14.5px; margin-bottom: 14.5px; } .navbar-default { background-color: #f8f8f8; border-color: #e7e7e7; } .navbar-default .navbar-brand { color: #777; } .navbar-default .navbar-brand:hover, .navbar-default .navbar-brand:focus { color: #5e5e5e; background-color: transparent; } .navbar-default .navbar-text { color: #777; } .navbar-default .navbar-nav > li > a { color: #777; } .navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus { color: #333; background-color: transparent; } .navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus { color: #555; background-color: #e7e7e7; } .navbar-default .navbar-nav > .disabled > a, .navbar-default .navbar-nav > .disabled > a:hover, .navbar-default .navbar-nav > .disabled > a:focus { color: #ccc; background-color: transparent; } .navbar-default .navbar-toggle { border-color: #ddd; } .navbar-default .navbar-toggle:hover, .navbar-default .navbar-toggle:focus { background-color: #ddd; } .navbar-default .navbar-toggle .icon-bar { background-color: #888; } .navbar-default .navbar-collapse, .navbar-default .navbar-form { border-color: #e7e7e7; } .navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .open > a:hover, .navbar-default .navbar-nav > .open > a:focus { background-color: #e7e7e7; color: #555; } .navbar-default .navbar-link { color: #777; } .navbar-default .navbar-link:hover { color: #333; } .navbar-default .btn-link { color: #777; } .navbar-default .btn-link:hover, .navbar-default .btn-link:focus { color: #333; } .navbar-default .btn-link[disabled]:hover, .navbar-default .btn-link[disabled]:focus, fieldset[disabled] .navbar-default .btn-link:hover, fieldset[disabled] .navbar-default .btn-link:focus { color: #ccc; } .navbar-inverse { background-color: #222; border-color: #090909; } .navbar-inverse .navbar-brand { color: #9d9d9d; } .navbar-inverse .navbar-brand:hover, .navbar-inverse .navbar-brand:focus { color: #fff; background-color: transparent; } .navbar-inverse .navbar-text { color: #9d9d9d; } .navbar-inverse .navbar-nav > li > a { color: #9d9d9d; } .navbar-inverse .navbar-nav > li > a:hover, .navbar-inverse .navbar-nav > li > a:focus { color: #fff; background-color: transparent; } .navbar-inverse .navbar-nav > .active > a, .navbar-inverse .navbar-nav > .active > a:hover, .navbar-inverse .navbar-nav > .active > a:focus { color: #fff; background-color: #090909; } .navbar-inverse .navbar-nav > .disabled > a, .navbar-inverse .navbar-nav > .disabled > a:hover, .navbar-inverse .navbar-nav > .disabled > a:focus { color: #444; background-color: transparent; } .navbar-inverse .navbar-toggle { border-color: #333; } .navbar-inverse .navbar-toggle:hover, .navbar-inverse .navbar-toggle:focus { background-color: #333; } .navbar-inverse .navbar-toggle .icon-bar { background-color: #fff; } .navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form { border-color: #101010; } .navbar-inverse .navbar-nav > .open > a, .navbar-inverse .navbar-nav > .open > a:hover, .navbar-inverse .navbar-nav > .open > a:focus { background-color: #090909; color: #fff; } .navbar-inverse .navbar-link { color: #9d9d9d; } .navbar-inverse .navbar-link:hover { color: #fff; } .navbar-inverse .btn-link { color: #9d9d9d; } .navbar-inverse .btn-link:hover, .navbar-inverse .btn-link:focus { color: #fff; } .navbar-inverse .btn-link[disabled]:hover, .navbar-inverse .btn-link[disabled]:focus, fieldset[disabled] .navbar-inverse .btn-link:hover, fieldset[disabled] .navbar-inverse .btn-link:focus { color: #444; } .pager { padding-left: 0; margin: 21px 0; list-style: none; text-align: center; } .pager:before, .pager:after { content: \" \"; display: table; } .pager:after { clear: both; } .pager li { display: inline; } .pager li > a, .pager li > span { display: inline-block; padding: 5px 14px; background-color: #fff; border: 1px solid #ddd; border-radius: 15px; } .pager li > a:hover, .pager li > a:focus { text-decoration: none; background-color: #eeeeee; } .pager .next > a, .pager .next > span { float: right; } .pager .previous > a, .pager .previous > span { float: left; } .pager .disabled > a, .pager .disabled > a:hover, .pager .disabled > a:focus, .pager .disabled > span { color: #777777; background-color: #fff; cursor: not-allowed; } .badge { display: inline-block; min-width: 10px; padding: 3px 7px; font-size: 12px; font-weight: bold; color: #fff; line-height: 1; vertical-align: middle; white-space: nowrap; text-align: center; background-color: #777777; border-radius: 10px; } .badge:empty { display: none; } .btn .badge { position: relative; top: -1px; } .btn-xs .badge, .btn-group-xs > .btn .badge { top: 0; padding: 1px 5px; } .list-group-item.active > .badge, .nav-pills > .active > a > .badge { color: #2196f3; background-color: #fff; } .list-group-item > .badge { float: right; } .list-group-item > .badge + .badge { margin-right: 5px; } .nav-pills > li > a > .badge { margin-left: 3px; } a.badge:hover, a.badge:focus { color: #fff; text-decoration: none; cursor: pointer; } .thumbnail { display: block; padding: 4px; margin-bottom: 21px; line-height: 1.57143; background-color: #fff; border: 1px solid #ddd; border-radius: 4px; -webkit-transition: border 0.2s ease-in-out; transition: border 0.2s ease-in-out; } .thumbnail > img, .thumbnail a > img { display: block; max-width: 100%; height: auto; margin-left: auto; margin-right: auto; } .thumbnail .caption { padding: 9px; color: #333333; } a.thumbnail:hover, a.thumbnail:focus, a.thumbnail.active { border-color: #2196f3; } .media { margin-top: 15px; } .media:first-child { margin-top: 0; } .media, .media-body { zoom: 1; overflow: hidden; } .media-body { width: 10000px; } .media-object { display: block; } .media-object.img-thumbnail { max-width: none; } .media-right, .media > .pull-right { padding-left: 10px; } .media-left, .media > .pull-left { padding-right: 10px; } .media-left, .media-right, .media-body { display: table-cell; vertical-align: top; } .media-middle { vertical-align: middle; } .media-middle .media-left, .media-middle .media-right, .media-middle .media-body { vertical-align: middle; } .media-bottom { vertical-align: bottom; } .media-bottom .media-left, .media-bottom .media-right, .media-bottom .media-body { vertical-align: bottom; } .media-heading { margin-top: 0; margin-bottom: 5px; } .media-list { padding-left: 0; list-style: none; } .embed-responsive { position: relative; display: block; height: 0; padding: 0; overflow: hidden; } .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video { position: absolute; top: 0; left: 0; bottom: 0; height: 100%; width: 100%; border: 0; } .embed-responsive-16by9 { padding-bottom: 56.25%; } .embed-responsive-4by3 { padding-bottom: 75%; } .well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-color: #f5f5f5; border: 1px solid #e3e3e3; border-radius: 4px; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); } .well blockquote { border-color: #ddd; border-color: rgba(0, 0, 0, 0.15); } .well-lg { padding: 24px; border-radius: 6px; } .well-sm { padding: 9px; border-radius: 3px; } .close { float: right; font-size: 24px; line-height: 1; color: #000; text-shadow: 0 1px 0 #fff; opacity: 0.2; filter: alpha(opacity=20); } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; opacity: 0.5; filter: alpha(opacity=50); } button.close { padding: 0; cursor: pointer; background: transparent; border: 0; -webkit-appearance: none; } .modal-open { overflow: hidden; } .modal { display: none; overflow: hidden; position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 1050; -webkit-overflow-scrolling: touch; outline: 0; } .modal.fade .modal-dialog { -webkit-transform: translate(0, -25%); -ms-transform: translate(0, -25%); transform: translate(0, -25%); -webkit-transition: -webkit-transform 0.3s ease-out; transition: -webkit-transform 0.3s ease-out; transition: transform 0.3s ease-out; transition: transform 0.3s ease-out,-webkit-transform 0.3s ease-out; } .modal.in .modal-dialog { -webkit-transform: translate(0, 0); -ms-transform: translate(0, 0); transform: translate(0, 0); } .modal-open .modal { overflow-x: hidden; overflow-y: auto; } .modal-dialog { position: relative; width: auto; margin: 10px; } .modal-content { position: relative; background-color: #fff; border-radius: 6px; -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, 0.05); box-shadow: 0 3px 9px rgba(0, 0, 0, 0.05); background-clip: padding-box; outline: 0; } .modal-backdrop { position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 1040; background-color: #000; } .modal-backdrop.fade { opacity: 0; filter: alpha(opacity=0); } .modal-backdrop.in { opacity: 0.5; filter: alpha(opacity=50); } .modal-header { padding: 15px; border-bottom: 1px solid #e5e5e5; } .modal-header:before, .modal-header:after { content: \" \"; display: table; } .modal-header:after { clear: both; } .modal-header .close { margin-top: -2px; } .modal-title { margin: 0; line-height: 1.57143; } .modal-body { position: relative; padding: 15px; } .modal-footer { padding: 15px; text-align: right; border-top: 1px solid #e5e5e5; } .modal-footer:before, .modal-footer:after { content: \" \"; display: table; } .modal-footer:after { clear: both; } .modal-footer .btn + .btn { margin-left: 5px; margin-bottom: 0; } .modal-footer .btn-group .btn + .btn { margin-left: -1px; } .modal-footer .btn-block + .btn-block { margin-left: 0; } .modal-scrollbar-measure { position: absolute; top: -9999px; width: 50px; height: 50px; overflow: scroll; } .tooltip { position: absolute; z-index: 1070; display: block; font-family: \"PingHei\",\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif; font-style: normal; font-weight: normal; letter-spacing: normal; line-break: auto; line-height: 1.57143; text-align: left; text-align: start; text-decoration: none; text-shadow: none; text-transform: none; white-space: normal; word-break: normal; word-spacing: normal; word-wrap: normal; font-size: 12px; opacity: 0; filter: alpha(opacity=0); } .tooltip.in { opacity: 0.9; filter: alpha(opacity=90); } .tooltip.top { margin-top: -3px; padding: 5px 0; } .tooltip.right { margin-left: 3px; padding: 0 5px; } .tooltip.bottom { margin-top: 3px; padding: 5px 0; } .tooltip.left { margin-left: -3px; padding: 0 5px; } .tooltip-inner { max-width: 200px; padding: 3px 8px; color: #fff; text-align: center; background-color: #000; border-radius: 4px; } .tooltip-arrow { position: absolute; width: 0; height: 0; border-color: transparent; border-style: solid; } .tooltip.top .tooltip-arrow { bottom: 0; left: 50%; margin-left: -5px; border-width: 5px 5px 0; border-top-color: #000; } .tooltip.top-left .tooltip-arrow { bottom: 0; right: 5px; margin-bottom: -5px; border-width: 5px 5px 0; border-top-color: #000; } .tooltip.top-right .tooltip-arrow { bottom: 0; left: 5px; margin-bottom: -5px; border-width: 5px 5px 0; border-top-color: #000; } .tooltip.right .tooltip-arrow { top: 50%; left: 0; margin-top: -5px; border-width: 5px 5px 5px 0; border-right-color: #000; } .tooltip.left .tooltip-arrow { top: 50%; right: 0; margin-top: -5px; border-width: 5px 0 5px 5px; border-left-color: #000; } .tooltip.bottom .tooltip-arrow { top: 0; left: 50%; margin-left: -5px; border-width: 0 5px 5px; border-bottom-color: #000; } .tooltip.bottom-left .tooltip-arrow { top: 0; right: 5px; margin-top: -5px; border-width: 0 5px 5px; border-bottom-color: #000; } .tooltip.bottom-right .tooltip-arrow { top: 0; left: 5px; margin-top: -5px; border-width: 0 5px 5px; border-bottom-color: #000; } .clearfix:before, .clearfix:after { content: \" \"; display: table; } .clearfix:after { clear: both; } .center-block { display: block; margin-left: auto; margin-right: auto; } .pull-right { float: right !important; } .pull-left { float: left !important; } .hide { display: none !important; } .show { display: block !important; } .invisible { visibility: hidden; } .text-hide { font: 0/0 a; color: transparent; text-shadow: none; background-color: transparent; border: 0; } .hidden { display: none !important; } .affix { position: fixed; } @-ms-viewport { width: device-width; } .visible-xs { display: none !important; } .visible-sm { display: none !important; } .visible-md { display: none !important; } .visible-lg { display: none !important; } .visible-xs-block, .visible-xs-inline, .visible-xs-inline-block, .visible-sm-block, .visible-sm-inline, .visible-sm-inline-block, .visible-md-block, .visible-md-inline, .visible-md-inline-block, .visible-lg-block, .visible-lg-inline, .visible-lg-inline-block { display: none !important; } .visible-print { display: none !important; } .visible-print-block { display: none !important; } .visible-print-inline { display: none !important; } .visible-print-inline-block { display: none !important; } /** * application */ /*! * IE10 viewport hack for Surface/desktop Windows 8 bug * Copyright 2014-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */ /* * See the Getting Started docs for more information: * http://getbootstrap.com/getting-started/#support-ie10-width */ @-ms-viewport { width: device-width; } @-o-viewport { width: device-width; } @viewport { width: device-width; } /* * scrollbar */ ::-webkit-scrollbar { width: 6px; height: 4px; background: transparent; } ::-webkit-scrollbar-thumb { background: rgba(0, 0, 0, 0.15); } ::-webkit-scrollbar-thumb:window-inactive { background: rgba(0, 0, 0, 0.1); } ::-webkit-scrollbar-thumb:vertical { height: 4px; background: rgba(0, 0, 0, 0.15); } ::-webkit-scrollbar-thumb:horizontal { width: 4px; background: rgba(0, 0, 0, 0.15); } ::-webkit-scrollbar-thumb:vertical:hover { background-color: rgba(0, 0, 0, 0.3); } ::-webkit-scrollbar-thumb:vertical:active { background-color: rgba(0, 0, 0, 0.5); } ::-webkit-scrollbar-track { background: rgba(0, 0, 0, 0.1); -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1); box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1); } ::-webkit-scrollbar-track-piece { background: rgba(0, 0, 0, 0.15); } *, *:before, *:after { -webkit-box-sizing: border-box; box-sizing: border-box; } html, body { position: relative; overflow-x: hidden; } body { padding-right: 0 !important; font-family: \"PingHei\",\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif; font-size: 14px; line-height: 1.57143; color: #333333; background-color: #fff; } a { color: #333333; text-decoration: none; } a:focus, a:hover { color: #0a6ebd; text-decoration: none; } a.active { color: #0a6ebd; } .active > a { color: #0a6ebd; } input, button, select, textarea, .btn { outline: none !important; } input:focus, input:hover, input:active, button:focus, button:hover, button:active, select:focus, select:hover, select:active, textarea:focus, textarea:hover, textarea:active, .btn:focus, .btn:hover, .btn:active { outline: none !important; } /*------------------ Fluidity response ------------------------------*/ img, canvas, iframe, video, svg { max-width: 100%; height: auto; } /*------------------ clear ------------------------------*/ .clear { height: 0; font-size: 0; line-height: 0; overflow: hidden; clear: both; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: \"\"; } .clearfix:after { clear: both; } .clearfix { *zoom: 1; } /*other*/ .clickable { cursor: pointer; } .scrollable { overflow-x: hidden; overflow-y: auto; } /*transform*/ .transform-no { -ms-transform: none !important; -webkit-transform: none !important; transform: none !important; } /*---------------------------------------------------- * color *---------------------------------------------------*/ .text-dark { color: #333 !important; } .text-grey { color: #999 !important; } /*text-white*/ .text-white { color: #fff !important; } .text-white a:hover, .text-white a:hover i, .text-white:hover { color: rgba(255, 255, 255, 0.8); } .text-white a.list-group-item.active i { color: #fff; } .text-white .accordion-list p { font-size: 12px; height: 84px; line-height: 21px; color: rgba(255, 255, 255, 0.8); } /*background-color*/ .bg-no { background: none !important; } .bg-alpha { background-color: transparent !important; } .bg-inverse, .bg-inverse a { color: #fff; } .btn.bg-inverse:hover, .btn.bg-inverse:focus, .btn.bg-inverse.focus { color: rgba(255, 255, 255, 0.8); } .bg { background-color: #f6f6f6 !important; } /*---------------------------------------------------- * z-index *---------------------------------------------------*/ .z-no { z-index: inherit; } .z1 { z-index: 1; } .z2 { z-index: 2; } .z3 { z-index: 3; } .z4 { z-index: 4; } .zmin { z-index: -1; } .zmax { z-index: 999; } /*---------------------------------------------------- * margin *---------------------------------------------------*/ /* All */ .m { margin: 5px !important; } .m-no { margin: 0 !important; } .m-0x { margin: 10px !important; } .m-1x { margin: 15px !important; } .m-2x { margin: 20px !important; } .m-3x { margin: 30px !important; } .m-4x { margin: 60px !important; } .m-5x { margin: 100px !important; } /* Vertical */ .mv { margin-top: 5px !important; margin-bottom: 5px !important; } .mv-no { margin-top: 0 !important; margin-bottom: 0 !important; } .mv-0x { margin-top: 10px !important; margin-bottom: 10px !important; } .mv-1x { margin-top: 15px !important; margin-bottom: 15px !important; } .mv-2x { margin-top: 20px !important; margin-bottom: 20px !important; } .mv-3x { margin-top: 30px !important; margin-bottom: 30px !important; } .mv-4x { margin-top: 60px !important; margin-bottom: 60px !important; } .mv-5x { margin-top: 100px !important; margin-bottom: 100px !important; } /* Horizontal */ .mh { margin-left: 5px !important; margin-right: 5px !important; } .mh-no { margin-left: 0 !important; margin-right: 0 !important; } .mh-0x { margin-left: 10px !important; margin-right: 10px !important; } .mh-1x { margin-left: 15px !important; margin-right: 15px !important; } .mh-2x { margin-left: 20px !important; margin-right: 20px !important; } .mh-3x { margin-left: 30px !important; margin-right: 30px !important; } .mh-4x { margin-left: 60px !important; margin-right: 60px !important; } .mh-5x { margin-left: 100px !important; margin-right: 100px !important; } /* margin Top */ .mt { margin-top: 5px !important; } .mt-no { margin-top: 0 !important; } .mt-0x { margin-top: 10px !important; } .mt-1x { margin-top: 15px !important; } .mt-2x { margin-top: 20px !important; } .mt-3x { margin-top: 30px !important; } .mt-4x { margin-top: 60px !important; } .mt-5x { margin-top: 100px !important; } /* margin Bottom */ .mb { margin-bottom: 5px !important; } .mb-no { margin-bottom: 0 !important; } .mb-0x { margin-bottom: 10px !important; } .mb-1x { margin-bottom: 15px !important; } .mb-2x { margin-bottom: 20px !important; } .mb-3x { margin-bottom: 30px !important; } .mb-4x { margin-bottom: 60px !important; } .mb-5x { margin-bottom: 100px !important; } /* margin left */ .ml { margin-left: 5px !important; } .ml-no { margin-left: 0 !important; } .ml-0x { margin-left: 10px !important; } .ml-1x { margin-left: 15px !important; } .ml-2x { margin-left: 20px !important; } .ml-3x { margin-left: 30px !important; } .ml-4x { margin-left: 60px !important; } .ml-5x { margin-left: 100px !important; } /* margin right */ .mr { margin-right: 5px !important; } .mr-no { margin-right: 0 !important; } .mr-0x { margin-right: 10px !important; } .mr-1x { margin-right: 15px !important; } .mr-2x { margin-right: 20px !important; } .mr-3x { margin-right: 30px !important; } .mr-4x { margin-right: 60px !important; } .mr-5x { margin-right: 100px !important; } /*---------------------------------------------------- * padding *---------------------------------------------------*/ /* All */ .p { padding: 5px !important; } .p-no { padding: 0 !important; } .p-0x { padding: 10px !important; } .p-1x { padding: 15px !important; } .p-2x { padding: 20px !important; } .p-3x { padding: 30px !important; } .p-4x { padding: 60px !important; } .p-5x { padding: 100px !important; } /* Vertical */ .pv { padding-top: 5px !important; padding-bottom: 5px !important; } .pv-no { padding-top: 0 !important; padding-bottom: 0 !important; } .pv-0x { padding-top: 10px !important; padding-bottom: 10px !important; } .pv-1x { padding-top: 15px !important; padding-bottom: 15px !important; } .pv-2x { padding-top: 20px !important; padding-bottom: 20px !important; } .pv-3x { padding-top: 30px !important; padding-bottom: 30px !important; } .pv-4x { padding-top: 60px !important; padding-bottom: 60px !important; } .pv-5x { padding-top: 100px !important; padding-bottom: 100px !important; } /* Horizontal */ .ph { padding-left: 5px !important; padding-right: 5px !important; } .ph-no { padding-left: 0 !important; padding-right: 0 !important; } .ph-0x { padding-left: 10px !important; padding-right: 10px !important; } .ph-1x { padding-left: 15px !important; padding-right: 15px !important; } .ph-2x { padding-left: 20px !important; padding-right: 20px !important; } .ph-3x { padding-left: 30px !important; padding-right: 30px !important; } .ph-4x { padding-left: 60px !important; padding-right: 60px !important; } .ph-5x { padding-left: 100px !important; padding-right: 100px !important; } /* padding Top */ .pt { padding-top: 5px !important; } .pt-no { padding-top: 0 !important; } .pt-0x { padding-top: 10px !important; } .pt-1x { padding-top: 15px !important; } .pt-2x { padding-top: 20px !important; } .pt-3x { padding-top: 30px !important; } .pt-4x { padding-top: 60px !important; } .pt-5x { padding-top: 100px !important; } /* padding Bottom */ .pb { padding-bottom: 5px !important; } .pb-no { padding-bottom: 0 !important; } .pb-0x { padding-bottom: 10px !important; } .pb-1x { padding-bottom: 15px !important; } .pb-2x { padding-bottom: 20px !important; } .pb-3x { padding-bottom: 30px !important; } .pb-4x { padding-bottom: 60px !important; } .pb-5x { padding-bottom: 100px !important; } /* padding left */ .pl { padding-left: 5px !important; } .pl-no { padding-left: 0 !important; } .pl-0x { padding-left: 10px !important; } .pl-1x { padding-left: 15px !important; } .pl-2x { padding-left: 20px !important; } .pl-3x { padding-left: 30px !important; } .pl-4x { padding-left: 60px !important; } .pl-5x { padding-left: 100px !important; } /* padding right */ .pr { padding-right: 5px !important; } .pr-no { padding-right: 0 !important; } .pr-0x { padding-right: 10px !important; } .pr-1x { padding-right: 15px !important; } .pr-2x { padding-right: 20px !important; } .pr-3x { padding-right: 30px !important; } .pr-4x { padding-right: 60px !important; } .pr-5x { padding-right: 100px !important; } /*---------------------------------------------------- * border *---------------------------------------------------*/ .b { border: 1px solid #ddd; } .b-no { border: none !important; } /*---------------------------------------------------- * border-radius *---------------------------------------------------*/ /*----------------------css border-radius----------------*/ .r-rounded { border-radius: 2em !important; padding-left: 1em; padding-right: 1em; overflow: hidden; } .r-circle { border-radius: 50% !important; overflow: hidden; } .r-no { border-radius: 0 !important; } /*---------------------------------------------------- * width and height *---------------------------------------------------*/ .w-auto { width: auto !important; } .w-full, .w-full img { width: 100% !important; max-width: 100% !important; } /*---------------------------------------------------- * text *---------------------------------------------------*/ .lh-2x { line-height: 2.0; } /*----------------- css text --------------------*/ .text-break { word-break: break-all !important; word-wrap: break-word !important; } .text-undecorate { text-decoration: none !important; } .text-underline { text-decoration: underline !important; } .text-through { text-decoration: line-through !important; } .text-sub { vertical-align: sub !important; } .text-super { vertical-align: super !important; } .text-indent, .text-indent p, .text-indent div { text-indent: 2em; } /*text wrap*/ .text-nowrap { /*display: block;*/ max-width: 100%; overflow: hidden !important; text-overflow: ellipsis !important; white-space: nowrap !important; word-wrap: normal !important; -moz-binding: url(\"ellipsis.xml\"); } .text-nowrap-1x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 1; -webkit-box-flex: 1; line-height: 24px; height: 24px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-2x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2; line-height: 24px; height: 48px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-3x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 3; line-height: 24px; height: 72px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-4x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 4; line-height: 24px; height: 96px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-5x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 5; line-height: 24px; height: 120px; word-break: break-all !important; word-wrap: break-word !important; } /*---------------------------------------------------- * thumb *---------------------------------------------------*/ .thumb { width: 16px; display: inline-block; overflow: hidden; } .thumb-xs { width: 32px; display: inline-block; overflow: hidden; } .thumb-sm { width: 48px; display: inline-block; overflow: hidden; } .thumb-md { width: 64px; display: inline-block; overflow: hidden; } .thumb-lg { width: 96px; display: inline-block; overflow: hidden; } .thumb-xl { width: 128px; display: inline-block; overflow: hidden; } .thumb-wrapper { padding: 2px; border: 1px solid #dbe2e7; } .thumb img, .thumb-0x img, .thumb-1x img, .thumb-2x img, .thumb-3x img, .thumb-4x img, .thumb-5x img, .thumb-6x img, .thumb-btn img { height: auto; max-width: 100%; vertical-align: middle; } /*---------------------------------------------------- * img hover style *---------------------------------------------------*/ /*img gray*/ img.img-gray, .img-gray img { -webkit-filter: grayscale(100%); -moz-filter: grayscale(100%); -ms-filter: grayscale(100%); -o-filter: grayscale(100%); filter: grayscale(100%); -webkit-filter: gray; filter: gray; } img.img-gray:hover, .img-gray:hover img { -webkit-filter: grayscale(0); -moz-filter: grayscale(0); -ms-filter: grayscale(0); -o-filter: grayscale(0); filter: grayscale(0); } /*img-rotate*/ img.img-rotate, .img-rotate img { -webkit-transition: -webkit-transform 0.3s ease; transition: -webkit-transform 0.3s ease; transition: transform 0.3s ease; transition: transform 0.3s ease,-webkit-transform 0.3s ease; } img.img-rotate:hover, .img-rotate:hover img { transform: rotate(360deg); -ms-transform: rotate(360deg); /* IE 9 */ -moz-transform: rotate(360deg); /* Firefox */ -webkit-transform: rotate(360deg); /* Safari and Chrome */ -o-transform: rotate(360deg); } /*img-burn*/ img.img-burn, .img-burn img { position: relative; -webkit-transition: all 0.8s ease-in-out; transition: all 0.8s ease-in-out; } img.img-burn:hover, .img-burn:hover img { -webkit-transform: scale(1.2) rotate(2deg); -ms-transform: scale(1.2) rotate(2deg); transform: scale(1.2) rotate(2deg); } /*hover-up*/ img.hover-up, .hover-up img { position: relative; top: 0; -webkit-transition: top .3s ease-out; transition: top .3s ease-out; } img.hover-up:hover, .hover-up:hover img { top: -6px; } /*Button components*/ .text-active, .active > .text, .active > .auto .text, .collapsed > .text, .collapsed > .auto .text { display: none !important; } .active > .text-active, .active > .auto .text-active, .collapsed > .text-active, .collapsed > .auto .text-active { display: inline-block !important; } /*Button components end here*/ /** * paper */ .shadow-no { -webkit-box-shadow: none; box-shadow: none; } .shadow, .hover-shadow:hover { -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); } /*radio*/ .radio { margin-left: 20px; } .radio label { display: inline-block; position: relative; padding-left: 5px; } .radio label:before { content: \"\"; display: inline-block; position: absolute; width: 17px; height: 17px; left: 0; margin-left: -20px; border: 1px solid #cccccc; border-radius: 50%; background-color: #fff; -webkit-transition: border 0.15s ease-in-out; transition: border 0.15s ease-in-out; } .radio label:after { display: inline-block; position: absolute; content: \" \"; width: 11px; height: 11px; left: 3px; top: 3px; margin-left: -20px; border-radius: 50%; background-color: #555555; -webkit-transform: scale(0, 0); -ms-transform: scale(0, 0); transform: scale(0, 0); -webkit-transition: -webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); transition: -webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); transition: transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); transition: transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33),-webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); } .radio input[type=radio] { display: none; } .radio input[type=radio]:checked + label:after { -webkit-transform: scale(1, 1); -ms-transform: scale(1, 1); transform: scale(1, 1); } .radio input[type=radio]:disabled + label { opacity: 0.65; } .radio input[type=radio]:disabled + label:before { cursor: not-allowed; } .hover-grow { -webkit-transition: all .2s linear; transition: all .2s linear; } .hover-grow:hover { -webkit-transform: translate3d(0, -2px, 0); transform: translate3d(0, -2px, 0); } fieldset { padding: 0; margin: 0; border: 0; min-width: 0; } legend { display: block; width: 100%; padding: 0; margin-bottom: 21px; font-size: 21px; line-height: inherit; color: #333333; border: 0; border-bottom: 1px solid #e5e5e5; } label { display: inline-block; max-width: 100%; margin-bottom: 5px; font-weight: bold; } input[type=\"search\"] { -webkit-box-sizing: border-box; box-sizing: border-box; } input[type=\"radio\"], input[type=\"checkbox\"] { margin: 4px 0 0; margin-top: 1px \\9; line-height: normal; } input[type=\"file\"] { display: block; } input[type=\"range\"] { display: block; width: 100%; } select[multiple], select[size] { height: auto; } input[type=\"file\"]:focus, input[type=\"radio\"]:focus, input[type=\"checkbox\"]:focus { outline: 5px auto -webkit-focus-ring-color; outline-offset: -2px; } output { display: block; padding-top: 7px; font-size: 14px; line-height: 1.57143; color: #555555; } .form-control { display: block; width: 100%; height: 35px; padding: 6px 12px; font-size: 14px; line-height: 1.57143; color: #555555; background-color: #fff; background-image: none; border: 1px solid #ccc; border-radius: 4px; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075); -webkit-transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s; -webkit-transition: border-color ease-in-out 0.15s,-webkit-box-shadow ease-in-out 0.15s; transition: border-color ease-in-out 0.15s,-webkit-box-shadow ease-in-out 0.15s; transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s; transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s,-webkit-box-shadow ease-in-out 0.15s; } .form-control:focus { border-color: #66afe9; outline: 0; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 8px rgba(102, 175, 233, 0.6); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 8px rgba(102, 175, 233, 0.6); } .form-control::-moz-placeholder { color: #999; opacity: 1; } .form-control:-ms-input-placeholder { color: #999; } .form-control::-webkit-input-placeholder { color: #999; } .form-control::-ms-expand { border: 0; background-color: transparent; } .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control { background-color: #eeeeee; opacity: 1; } .form-control[disabled], fieldset[disabled] .form-control { cursor: not-allowed; } textarea.form-control { height: auto; } input[type=\"search\"] { -webkit-appearance: none; } /* * Component: list * ---------------- */ .list-disc { list-style: disc !important; } .list-alpha { list-style: upper-alpha !important; } .list-decimal { list-style: decimal !important; } .list-outside { list-style-position: outside !important; } .list-inside { list-style-position: inside !important; } .list-square { list-style: none; } .list-square li:before { color: #ccc; content: \"▪\"; font-size: 12px; margin-right: 6px; -webkit-transition: 0.2s ease; transition: 0.2s ease; } .list-circle-num, .list-square-num { counter-reset: list1; } .list-circle-num > li, .list-square-num > li { list-style: none outside none; margin-bottom: 13px; } .list-circle-num > li:before { counter-increment: list1; content: counter(list1) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 12px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-square-num > li:before { counter-increment: list1; content: counter(list1) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 5px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-circle-num > li > ol, .list-square-num > li > ol { counter-reset: list2; } .list-circle-num > li > ol > li, .list-square-num > li > ol > li { margin-bottom: 13px; } .list-circle-num > li > ol > li:before { counter-increment: list2; content: counter(list1) \".\" counter(list2) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 12px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-square-num > li > ol > li:before { counter-increment: list2; content: counter(list1) \".\" counter(list2) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 5px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-circle-num[class*=\"list-full\"] > li::before, .list-square-num[class*=\"list-full\"] > li::before { background: #de4a32; color: #ffffff; } .label { display: inline-block; padding: .3em .6em; font-size: 75%; font-weight: bold; line-height: 1; color: #777777; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; } .label:empty { display: none; } .btn .label { position: relative; top: -1px; } a.label:hover, a.label:focus { color: #333333; text-decoration: none; cursor: pointer; } .label-default { background-color: #eeeeee; } .label-default[href]:hover, .label-default[href]:focus { background-color: #d5d5d5; } .label-primary { background-color: #2196f3; color: #fff; } .label-primary[href]:hover, .label-primary[href]:focus { background-color: #0c7cd5; } .label-success { background-color: #5cb85c; color: #fff; } .label-success[href]:hover, .label-success[href]:focus { background-color: #449d44; } .label-info { background-color: #56CCF2; color: #fff; } .label-info[href]:hover, .label-info[href]:focus { background-color: #27beee; } .label-warning { background-color: #F09819; color: #fff; } .label-warning[href]:hover, .label-warning[href]:focus { background-color: #c97c0d; } .label-danger { background-color: #FF512F; color: #fff; } .label-danger[href]:hover, .label-danger[href]:focus { background-color: #fb2900; } .panel { margin-bottom: 21px; background-color: #fff; border: 1px solid #f2f2f2; } .panel .article-title { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2; font-size: 18px; line-height: 32px; height: 64px; word-break: break-all !important; word-wrap: break-word !important; } .panel-body { padding: 15px; } .panel-body:before, .panel-body:after { content: \" \"; display: table; } .panel-body:after { clear: both; } .panel-heading { padding: 10px 15px; border-bottom: 1px solid #f2f2f2; } .panel-heading > .dropdown .dropdown-toggle { color: inherit; } .panel-title { margin-top: 0; margin-bottom: 0; font-size: 16px; color: inherit; } .panel-title > a, .panel-title > small, .panel-title > .small, .panel-title > small > a, .panel-title > .small > a { color: inherit; text-decoration: none; } .panel-footer { padding: 10px 15px; border-top: 1px solid #f2f2f2; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; } /** * panel-group-base */ .panel.b-no { border: 0; margin-bottom: 0; } .panel.b-no .panel-heading, .panel.b-no .panel-body, .panel.b-no .panel-footer { border: 0; padding-left: 0; padding-right: 0; } /* Badger*/ .panel-badger { position: relative; } .panel-badger:after { content: \"\"; position: absolute; top: 0; width: 0; height: 0; border-width: 4px; border-style: solid; border-color: #777777 transparent transparent #777777; } .panel-badger:hover:after { border-color: #2196f3 transparent transparent #2196f3; } .badger-danger:after { border-color: #FF512F transparent transparent #FF512F; } .badger-warning:after { border-color: #F09819 transparent transparent #F09819; } .badger-success:after { border-color: #5cb85c transparent transparent #5cb85c; } .badger-info:after { border-color: #56CCF2 transparent transparent #56CCF2; } .badger-primary:after { border-color: #2196f3 transparent transparent #2196f3; } /* bg shortcodes */ .bg-gradient-info span, .bg-gradient-info:before { background: #56CCF2; background: -webkit-linear-gradient(left, #56CCF2 0%, #2F80ED 80%, #2F80ED 100%); background: -webkit-gradient(linear, left top, right top, from(#56CCF2), color-stop(80%, #2F80ED), to(#2F80ED)); background: linear-gradient(to right, #56CCF2 0%, #2F80ED 80%, #2F80ED 100%); } .bg-gradient-primary span, .bg-gradient-primary:before { background: #396afc; background: -webkit-linear-gradient(left, #396afc 0%, #2948ff 80%, #2948ff 100%); background: -webkit-gradient(linear, left top, right top, from(#396afc), color-stop(80%, #2948ff), to(#2948ff)); background: linear-gradient(to right, #396afc 0%, #2948ff 80%, #2948ff 100%); } .bg-gradient-success span, .bg-gradient-success:before { background: #44ea76; background: -webkit-linear-gradient(left, #44ea76 0%, #39fad7 80%, #39fad7 100%); background: -webkit-gradient(linear, left top, right top, from(#44ea76), color-stop(80%, #39fad7), to(#39fad7)); background: linear-gradient(to right, #44ea76 0%, #39fad7 80%, #39fad7 100%); } .bg-gradient-warning span, .bg-gradient-warning:before { background: #FF512F; background: -webkit-linear-gradient(left, #FF512F 0%, #F09819 80%, #F09819 100%); background: -webkit-gradient(linear, left top, right top, from(#FF512F), color-stop(80%, #F09819), to(#F09819)); background: linear-gradient(to right, #FF512F 0%, #F09819 80%, #F09819 100%); } .bg-gradient-danger span, .bg-gradient-danger:before { background: #FF512F; background: -webkit-linear-gradient(left, #FF512F 0%, #DD2476 80%, #DD2476 100%); background: -webkit-gradient(linear, left top, right top, from(#FF512F), color-stop(80%, #DD2476), to(#DD2476)); background: linear-gradient(to right, #FF512F 0%, #DD2476 80%, #DD2476 100%); } /* Button fancy */ .btn-fancy { display: inline-block; font-size: 17px; letter-spacing: 0.03em; text-transform: uppercase; color: #ffffff; position: relative; } .btn-fancy:before { content: ''; display: inline-block; height: 40px; position: absolute; bottom: -5px; left: 30px; right: 30px; z-index: -1; -webkit-filter: blur(20px) brightness(0.95); filter: blur(20px) brightness(0.95); -webkit-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: all 0.3s ease-out; transition: all 0.3s ease-out; } .btn-fancy i { margin-top: -1px; margin-right: 20px; font-size: 1.265em; vertical-align: middle; } .btn-fancy span { display: inline-block; padding: 18px 60px; border-radius: 50em; position: relative; z-index: 2; will-change: transform,filter; -webkit-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: all 0.3s ease-out; transition: all 0.3s ease-out; } .btn-fancy:focus, .btn-fancy:active { color: #ffffff; } .btn-fancy:hover { color: #ffffff; } .btn-fancy:hover span { -webkit-filter: brightness(1.05) contrast(1.05); filter: brightness(1.05) contrast(1.05); -webkit-transform: scale(0.95); -ms-transform: scale(0.95); transform: scale(0.95); } .btn-fancy:hover:before { bottom: 0; -webkit-filter: blur(10px) brightness(0.95); filter: blur(10px) brightness(0.95); } .btn-fancy.pop-onhover:before { opacity: 0; bottom: 10px; } .btn-fancy.pop-onhover:hover:before { bottom: -7px; opacity: 1; -webkit-filter: blur(20px); filter: blur(20px); } .btn-fancy.pop-onhover:hover span { -webkit-transform: scale(1.04); -ms-transform: scale(1.04); transform: scale(1.04); } .btn-fancy.pop-onhover:hover:active span { -webkit-filter: brightness(1) contrast(1); filter: brightness(1) contrast(1); -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); -webkit-transition: all 0.15s ease-out; transition: all 0.15s ease-out; } .btn-fancy.pop-onhover:hover:active:before { bottom: 0; -webkit-filter: blur(10px) brightness(0.95); filter: blur(10px) brightness(0.95); -webkit-transition: all 0.2s ease-out; transition: all 0.2s ease-out; } /* * Component: table * css like github * ---------------- */ table { border: 1px solid #f2f2f2; } table > thead > tr > th, table > thead > tr > td, table > tbody > tr > th, table > tbody > tr > td, table > tfoot > tr > th, table > tfoot > tr > td { border: 1px solid #f2f2f2; } table > tbody > tr:nth-of-type(odd) { background-color: #f8f8f8; } table > tbody > tr:hover { background-color: #fbfbfb; } table { padding: 0; width: 100%; max-width: 100%; margin: 10px 0; } table > thead > tr > th, table > thead > tr > td, table > tbody > tr > th, table > tbody > tr > td, table > tfoot > tr > th, table > tfoot > tr > td { padding: 6px 13px; } table > tbody + tbody { border-top: 2px solid #f2f2f2; } table table { background-color: #fff; } .modal button.close { position: absolute; right: 10px; top: 10px; z-index: 99; } .modal-small .modal-dialog { width: 480px; } @font-face { font-family: \"icon\"; src: url(\"iconfont.eot?t=1525101408939\"); /* IE9*/ src: url(\"iconfont.eot?t=1525101408939#iefix\") format(\"embedded-opentype\"),url(\"data:application/x-font-woff;charset=utf-8;base64,\") format(\"woff\"),url(\"iconfont.ttf?t=1525101408939\") format(\"truetype\"),url(\"iconfont.svg?t=1525101408939#icon\") format(\"svg\"); } .icon { display: inline-block; font: normal normal normal 14px/1 icon; font-size: inherit; text-rendering: auto; -webkit-font-smoothing: antialiased; -webkit-text-stroke-width: 0.2px; -moz-osx-font-smoothing: grayscale; } .icon-diandian:before { content: \"\\e63a\"; } .icon-huaban:before { content: \"\\e63c\"; } .icon-code-fork:before { content: \"\\e67a\"; } .icon-more:before { content: \"\\e6c0\"; } .icon-zhihu:before { content: \"\\e6d1\"; } .icon-linkedin:before { content: \"\\e724\"; } .icon-eye-fill:before { content: \"\\e64f\"; } .icon-stackexchange:before { content: \"\\e8b2\"; } .icon-tag:before { content: \"\\e6a3\"; } .icon-starfish:before { content: \"\\e62e\"; } .icon-home:before { content: \"\\e660\"; } .icon-search:before { content: \"\\e61c\"; } .icon-project:before { content: \"\\e63e\"; } .icon-dialog:before { content: \"\\e613\"; } .icon-twitter:before { content: \"\\ec9c\"; } .icon-github:before { content: \"\\e70a\"; } .icon-time:before { content: \"\\e669\"; } .icon-voice:before { content: \"\\e65a\"; } .icon-google:before { content: \"\\e601\"; } .icon-weibo:before { content: \"\\e64b\"; } .icon-segmentfault:before { content: \"\\e610\"; } .icon-star-fill:before { content: \"\\e630\"; } .icon-phone:before { content: \"\\e68a\"; } .icon-cup-fill:before { content: \"\\e614\"; } .icon-jiaju:before { content: \"\\e671\"; } .icon-qzone:before { content: \"\\e603\"; } .icon-home-fill:before { content: \"\\e617\"; } .icon-clock:before { content: \"\\e618\"; } .icon-file:before { content: \"\\e66f\"; } .icon-comment:before { content: \"\\e61a\"; } .icon-cup:before { content: \"\\e62c\"; } .icon-share:before { content: \"\\e66a\"; } .icon-star-half:before { content: \"\\e62f\"; } .icon-star:before { content: \"\\e619\"; } .icon-tencent-weibo:before { content: \"\\e602\"; } .icon-book:before { content: \"\\e79d\"; } .icon-bitbucket:before { content: \"\\e64e\"; } .icon-facebook:before { content: \"\\e6e3\"; } .icon-email:before { content: \"\\e667\"; } .icon-zcool:before { content: \"\\e60c\"; } .icon-social-media:before { content: \"\\e68b\"; } .icon-douban:before { content: \"\\e60f\"; } .icon-coding:before { content: \"\\e600\"; } .icon-github-fill:before { content: \"\\e71d\"; } .icon-qq:before { content: \"\\e611\"; } .icon-shu-fill:before { content: \"\\e615\"; } .icon-pinterest:before { content: \"\\e697\"; } .icon-tags:before { content: \"\\e6c4\"; } .icon-bill:before { content: \"\\e61b\"; } .icon-shu:before { content: \"\\e616\"; } .icon-book-shelf:before { content: \"\\e60d\"; } .icon-target:before { content: \"\\e695\"; } .icon-profile:before { content: \"\\e6e2\"; } .icon-alipay:before { content: \"\\e938\"; } .icon-skype:before { content: \"\\e604\"; } .icon-juejin:before { content: \"\\e605\"; } .icon-code:before { content: \"\\e73f\"; } .icon-list:before { content: \"\\e61e\"; } .icon-map-marker:before { content: \"\\e609\"; } .icon-stackoverflow:before { content: \"\\e606\"; } .icon-hourglass:before { content: \"\\e60e\"; } .icon-behance:before { content: \"\\e67b\"; } .icon-folder-open:before { content: \"\\e6b4\"; } .icon-folder:before { content: \"\\e60a\"; } .icon-menu:before { content: \"\\e607\"; } .icon-users:before { content: \"\\e60b\"; } .icon-eye:before { content: \"\\e657\"; } .icon-wechat:before { content: \"\\e65e\"; } .icon-number:before { content: \"\\e658\"; } .icon-gitlab:before { content: \"\\e67c\"; } .icon-rss:before { content: \"\\e63d\"; } .icon-archives:before { content: \"\\e62d\"; } .icon-68design:before { content: \"\\e608\"; } .icon-dribble:before { content: \"\\e982\"; } .icon-wepay:before { content: \"\\e629\"; } .icon-youdao-note:before { content: \"\\e8a6\"; } .icon-book-fill:before { content: \"\\e659\"; } .icon-hezuo:before { content: \"\\e6e5\"; } .icon-link:before { content: \"\\e635\"; } .icon-archives-fill:before { content: \"\\e694\"; } .icon-anchor:before { content: \"\\e858\"; } .icon-angle-down:before { content: \"\\e85e\"; } .icon-angle-left:before { content: \"\\e85f\"; } .icon-angle-up:before { content: \"\\e860\"; } .icon-angle-right:before { content: \"\\e862\"; } .icon-calendar:before { content: \"\\e895\"; } .icon-calendar-check:before { content: \"\\e896\"; } .icon-calendar-minus:before { content: \"\\e897\"; } .icon-calendar-plus:before { content: \"\\e899\"; } .icon-calendar-times:before { content: \"\\e89a\"; } .icon-close:before { content: \"\\e8c4\"; } .icon-delicious:before { content: \"\\e8e2\"; } .icon-plus:before { content: \"\\e99d\"; } .icon-gg:before { content: \"\\e6fd\"; } .icon-friendship:before { content: \"\\e612\"; } .icon-gitee:before { content: \"\\e61d\"; } pre .comment { color: #8e908c; } pre .variable, pre .attribute, pre .tag, pre .regexp, pre .ruby .constant, pre .xml .tag .title, pre .xml .pi, pre .xml .doctype, pre .html .doctype, pre .css .id, pre .css .class, pre .css .pseudo { color: #c82829; } pre .number, pre .preprocessor, pre .built_in, pre .literal, pre .params, pre .constant { color: #f5871f; } pre .ruby .class .title, pre .css .rules .attribute { color: #718c00; } pre .string, pre .value, pre .inheritance, pre .header, pre .ruby .symbol, pre .xml .cdata { color: #718c00; } pre .title, pre .css .hexcolor { color: #3e999f; } pre .function, pre .python .decorator, pre .python .title, pre .ruby .function .title, pre .ruby .title .keyword, pre .perl .sub, pre .javascript .title, pre .js .title, pre .coffeescript .title { color: #4271ae; } pre .keyword, pre .javascript .function, pre .js .function { color: #8959a8; } pre, .highlight { background: #fafafa; margin: 10px 0; padding: 15px 10px; overflow: auto; font-size: 13px; color: #4d4d4c; line-height: 1.5; } .highlight .gutter pre, .gist .gist-file .gist-data .line-numbers { color: #666; } code { text-shadow: 0 1px #fff; padding: 0.2em 0.4em; margin: 0 0.3em; color: #555; background: #eee; border-radius: 3px; font-size: 85%; } pre code { background: none; text-shadow: none; padding: 0; } .highlight { position: relative; padding: 32px 10px 0 10px; border-radius: 4px; } .highlight:before { display: block; content: ' '; height: 32px; position: absolute; top: 0; left: 0; right: 0; background-color: #f6f6f6; padding: 0 10px; border-top-left-radius: 4px; border-top-right-radius: 4px; } .highlight:after { content: \" \"; position: absolute; border-radius: 50%; background: #fc625d; width: 10px; height: 10px; top: 0; left: 15px; margin-top: 11px; -webkit-box-shadow: 20px 0 #fdbc40,40px 0 #35cd4b; box-shadow: 20px 0 #fdbc40,40px 0 #35cd4b; } .highlight pre { border: none; margin: 0; } .highlight table { position: relative; border: none; width: 100%; margin: 0; padding: 0; } .highlight tr { border: none; } .highlight td, .highlight th { border: none; padding: 0; } .highlight td.code, .highlight th.code { width: 100% !important; } .highlight figcaption { font-size: 0.85em; color: #8e908c; line-height: 1em; margin-bottom: 1em; } .highlight figcaption a { float: right; } .highlight .line { height: 24px; line-height: 24px; } .highlight .gutter pre { text-align: right; padding-right: 0; padding-left: 0; color: #ccc; } /* * Sidebar */ /* Hide for mobile, show later */ .header { background-color: #fbfbfb; } .sidebar { background-color: #fdfdfd; } .sidebar .slimContent { padding: 20px; } .main { position: relative; min-height: 100vh; padding: 15px; } .main:before, .main:after { content: \" \"; display: table; } .main:after { clear: both; } .footer { padding: 20px; background-color: #fbfbfb; } /* * main-center */ body.main-center .sidebar { left: auto; right: 0; border-left: 1px solid #f6f6f6; border-right: 0; } /* * main-left */ body.main-left .header { left: auto; right: 0; border-left: 1px solid #f6f6f6; border-right: 0; } body.main-left .sidebar { left: auto; right: 0; border-left: 1px solid #f6f6f6; border-right: 0; } body.main-left .footer { left: auto; right: 0; } /* * main-right */ body.no-sidebar .sidebar { display: none !important; } /** * Sidebar navigation */ .main-nav { float: none !important; } .main-nav > li { display: block; width: 100%; position: relative; } .main-nav > li > a { color: #555555; } .main-nav > li .menu-title { margin-left: 15px; } .main-nav > .active a, .main-nav > .active a:hover, .main-nav > .active a:focus { color: #333333; background: #f4f4f4; } /** * profile-block */ .profile-block { padding: 20px 15px 10px 15px; } #avatar { width: 64px; height: 64px; display: inline-block; } #avatar img { width: 100%; max-height: 100%; height: auto !important; } #name { font-size: 18px; margin-top: 10px; margin-bottom: 0; } #title { font-size: 13px; margin-top: 5px; margin-bottom: 5px; } /** * search */ .sidebar-form { border-radius: 3px; border: 1px solid #eee; margin: 0 15px 15px 15px; } .sidebar-form input[type=\"text\"], .sidebar-form .btn { -webkit-box-shadow: none; box-shadow: none; background-color: transparent; border: 1px solid transparent; height: 32px; } .sidebar-form input[type=\"text\"]:focus, .sidebar-form .btn:focus { outline: none; } .sidebar-form input[type=\"text\"] { color: #666; border-top-left-radius: 2px; border-top-right-radius: 0; border-bottom-right-radius: 0; border-bottom-left-radius: 2px; } .sidebar-form input[type=\"text\"]:focus, .sidebar-form input[type=\"text\"]:focus + .input-group-btn .btn { background-color: #fff; color: #666; } .sidebar-form .btn { color: #999; border-top-left-radius: 0; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 0; } .header { /** * navbar */ } .header .navbar-collapse { padding-left: 0; padding-right: 0; } .header .navbar-collapse .navbar-nav { margin: 0; } .header .navbar-toggle .icon-bar { background-color: #2196f3; } /* * Main content */ .main .pager { text-align: left; margin: 10px 0; } .main .pager .disabled { cursor: not-allowed; } .main .pager > a, .main .pager > .page-number { line-height: 32px; /* float: left; */ } .main .pager a { color: #666; border: 0; line-height: 32px; padding: 0; } .main .pager a:link, .main .pager a:visited { background-color: transparent; } .main .pager a:hover { color: #0a6ebd; background-color: transparent; } .main .pager .prev { margin-right: 10px; } .main .pager .page-number.current { color: #2196f3; } .main .pager .page-number + .page-number { margin-left: 10px; } .main .pager .page-number + .next { margin-left: 10px; } .main .total-article { margin: 10px 0; line-height: 32px; color: #999; } .main .page-header { margin-top: 0; } .main .article-list article { border-bottom: 1px solid #f2f2f2; } .main .article-list article:last-child { border-bottom: 0; } .main .article-meta { font-size: 13px; color: #999; } .main .article-meta a { color: #999; } .main .article-meta a:hover { color: #0a6ebd; text-decoration: none; } .main .article-meta span + span { margin-left: 10px; } .main .content { min-height: 85vh; } .main.has-sticky .content { margin-bottom: 70px; } #comments .gitment-footer-container, #comments .gitment-footer-project-link { display: none !important; } .panel .label, .widget .label { font-weight: normal; } .widget:before, .widget:after { content: \" \"; display: table; } .widget:after { clear: both; } .widget .widget-title { font-size: 18px; color: #000; } .widget time { color: #999; font-size: 12px; text-transform: uppercase; } .widget p { margin-bottom: 0; } .widget ul { margin-left: 0; padding-left: 0; list-style: none; } .widget .category-link { color: #0a6ebd; } .category-list-count, .tag-list-count, .archive-list-count { padding-left: 5px; color: #999; font-size: 0.85em; } .category-list-count:before, .tag-list-count:before, .archive-list-count:before { content: \"(\"; } .category-list-count:after, .tag-list-count:after, .archive-list-count:after { content: \")\"; } .category-list, .archive-list, .tag-list { line-height: 1.75; } .category-list li:before, .archive-list li:before, .tag-list li:before { color: #ccc; content: \"▪\"; font-size: 12px; margin-right: 6px; -webkit-transition: 0.2s ease; transition: 0.2s ease; } .category-list-child { padding-left: 15px; } .recent-post-list li + li { margin-top: 15px; } .recent-post-list li .item-thumb, .recent-post-list li .item-inner { display: table-cell; vertical-align: middle; } .recent-post-list li .item-thumb { opacity: 1; padding-right: 10px; -webkit-transition: all 0.2s ease; transition: all 0.2s ease; } .recent-post-list li .item-thumb .thumb { width: 50px; height: 50px; display: block; position: relative; overflow: hidden; } .recent-post-list li .item-thumb .thumb span { width: 100%; height: 100%; display: block; } .recent-post-list li .item-thumb .thumb .thumb-image { position: absolute; background-size: cover; background-position: center; } .recent-post-list li .item-thumb .thumb .thumb-none { background-image: url(\"../images/thumb-default.png\"); background-size: 100% 100%; } .recent-post-list li:hover .item-thumb { opacity: 0.8; } .sidebar-toc.collapse { display: none !important; } .sidebar-toc.in { display: block !important; } .tagcloud a { display: inline-block; margin-bottom: 0.2em; padding: .3em .6em; font-size: 75% !important; line-height: 1; background-color: #eee; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; } .bar .pager .next > a, .bar .pager .next > span { float: none; } .bar.bar-footer { position: relative; background-color: #fff; bottom: -15px; } .bar.bar-footer:before { content: ''; position: absolute; width: -webkit-calc(100% + 30px); width: calc(100% + 30px); height: 52px; left: -15px; border-top: 1px solid #f6f6f6; border-bottom: 1px solid #fff; background-color: #fff; } .bar .bar-inner { position: relative; z-index: 9; } .bar .bar-inner:before, .bar .bar-inner:after { content: \" \"; display: table; } .bar .bar-inner:after { clear: both; } .bar .bar-right { margin: 10px 0; float: right; } .toggle-toc { cursor: pointer; margin-left: 10px; } .toggle-toc a { display: inline-block; line-height: 32px; text-align: center; } /** * footer */ .footer { color: #999; } .footer .copyright { font-size: 12px; } .footer .copyright a { color: #999; text-decoration: none; } .footer .copyright a:hover { color: #0a6ebd; } /** * .wave-icon */ .wave-icon { display: inline-block; position: relative; } .wave-icon .wave-circle { display: block; border-radius: 50%; background-color: transparent; } .wave-icon .wave-circle:before, .wave-icon .wave-circle:after { content: ''; border: 10px solid #2196f3; background: #2196f3; border-radius: 50%; position: absolute; top: 50%; left: 50%; z-index: 1; } .wave-icon .wave-circle:before { height: 74px; width: 74px; -webkit-animation: pulse 5s ease-out; animation: pulse 5s ease-out; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; margin-top: -37px; margin-left: -37px; opacity: 0; } .wave-icon .wave-circle:after { height: 98px; width: 98px; -webkit-animation: pulse 5s ease-out; animation: pulse 5s ease-out; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; margin-top: -49px; margin-left: -49px; opacity: 0.3; } .wave-icon .icon { position: relative; display: block; width: 50px; height: 50px; line-height: 50px; text-align: center; background-color: #2196f3; border-radius: 50%; font-size: 24px; color: #fff; z-index: 2; } .wave-icon.wave-icon-info .wave-circle:before, .wave-icon.wave-icon-info .wave-circle:after { border: 10px solid #56CCF2; background: #56CCF2; } .wave-icon.wave-icon-info .icon { background-color: #56CCF2; } .wave-icon.wave-icon-primary .wave-circle:before, .wave-icon.wave-icon-primary .wave-circle:after { border: 10px solid #2196f3; background: #2196f3; } .wave-icon.wave-icon-primary .icon { background-color: #2196f3; } .wave-icon.wave-icon-warning .wave-circle:before, .wave-icon.wave-icon-warning .wave-circle:after { border: 10px solid #F09819; background: #F09819; } .wave-icon.wave-icon-warning .icon { background-color: #F09819; } .wave-icon.wave-icon-success .wave-circle:before, .wave-icon.wave-icon-success .wave-circle:after { border: 10px solid #5cb85c; background: #5cb85c; } .wave-icon.wave-icon-success .icon { background-color: #5cb85c; } .wave-icon.wave-icon-danger .wave-circle:before, .wave-icon.wave-icon-danger .wave-circle:after { border: 10px solid #FF512F; background: #FF512F; } .wave-icon.wave-icon-danger .icon { background-color: #FF512F; } @-webkit-keyframes pulse { 0% { -webkit-transform: scale(0); opacity: 0.0; } 25% { -webkit-transform: scale(0); opacity: 0.1; } 50% { -webkit-transform: scale(0.1); opacity: 0.3; } 75% { -webkit-transform: scale(0.5); opacity: 0.5; } 100% { -webkit-transform: scale(1); opacity: 0.0; } } .repo-list { list-style: none; padding-left: 0; } .repo { position: relative; list-style-type: none; border: 1px solid #f2f2f2; margin-bottom: 15px; overflow: hidden; } .repo-title { padding: 0 15px; margin: 15px 0; font-size: 16px; font-weight: 600; } .repo-body { display: -webkit-box; padding: 0 15px; margin: 0 0 20px; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2; line-height: 1.5em; height: 3em; word-break: break-all !important; word-wrap: break-word !important; } .repo-image { position: relative; display: table; width: 101%; height: 3px; margin: -1px -1px 15px; background-color: #666; } .repo-meta { padding: 0 15px; margin-top: 5px; margin-bottom: 15px; color: #777; font-size: 12px; text-align: right; } .repo-meta:before, .repo-meta:after { content: \" \"; display: table; } .repo-meta:after { clear: both; } .repo-meta .meta + .meta { margin-left: 15px; } /* * Global add-ons */ .text-collapsed { display: none; } .text-in { display: inline-block; } .collapsed .text-collapsed { display: inline-block; } .collapsed .text-in { display: none; } .sub-header { padding-bottom: 10px; border-bottom: 1px solid #eee; } .article-header { margin-bottom: 20px; } .article-footer { margin-top: 20px; } /** * collection */ .collection { position: relative; } .collection a.collection-item { display: block; -webkit-transition: .25s; transition: .25s; color: #777777; } .collection a:not(.active):hover { color: #333333; } .collection .collection-item { padding: 8px 0; margin: 0; } .article-list .article-title { font-size: 18px; } .article-toc .toc-title { font-size: 18px; color: #000; } .article-toc .toc { list-style: none; padding-left: 0; line-height: 2.0; } .article-toc .toc ol { list-style: none; padding-left: 10px; } .article-toc .toc .toc-item { position: relative; } .article-toc .toc .toc-item .markdownIt-Anchor { position: absolute; left: 0; right: 0; top: 0; padding: 14px 0; } .marked-body h1, .marked-body h2, .marked-body h3, .marked-body h4, .marked-body h5, .marked-body h6 { margin-top: 24px; margin-bottom: 16px; font-weight: 600; line-height: 1.25; } .marked-body h1 { padding-bottom: 0.3em; font-size: 2em; border-bottom: 1px solid #f2f2f2; } .marked-body h2 { padding-bottom: 0.3em; font-size: 1.5em; border-bottom: 1px solid #f2f2f2; } .marked-body a { color: #2196f3; text-decoration: none; } .marked-body a:focus, .marked-body a:hover { color: #0a6ebd; text-decoration: none; } .marked-body ul, .marked-body ol { padding-left: 0; margin-left: 20px; } /* * We are hiding the invisible nav outside the screen * so we need to avoid the horizontal scroll */ body.okayNav-loaded { overflow-x: hidden; } .okayNav { position: relative; } .okayNav:before, .okayNav:after { content: \" \"; display: table; } .okayNav:after { clear: both; } .okayNav:not(.loaded) { visibility: hidden; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .okayNav ul { /* We want two navigations - one hidden and one visible */ float: left; padding-left: 0; } .okayNav ul li { display: inline-block; margin-left: 15px; } .okayNav a { position: relative; z-index: 1; } .okayNav a.active { color: #0a6ebd; } .okayNav__nav--visible { overflow: hidden; white-space: nowrap; } .okayNav__nav--visible li { display: inline-block; margin-left: 15px; } .okayNav__nav--visible li:first-child { margin-left: 0; } .okayNav__nav--visible a { /* Link styling for the visible part of the nav */ display: block; -webkit-transition: color 200ms cubic-bezier(0.55, 0, 0.1, 1); transition: color 200ms cubic-bezier(0.55, 0, 0.1, 1); } .okayNav__nav--visible:empty ~ .okayNav__menu-toggle { top: 0; } /* Link styling for the off-screen part of the nav */ .okayNav__nav--invisible { display: none; position: absolute; width: 100%; top: 24px; overflow-y: auto; -webkit-overflow-scrolling: touch; -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); padding-top: 15px; padding-bottom: 15px; background: #fff; } .okayNav__nav--invisible li { display: inline-block; } .okayNav__nav--invisible li a { display: block; padding: 6px 15px; min-width: 100px; } .okayNav__nav--invisible.nav-left { left: 0; } .okayNav__nav--invisible.nav-right { right: 0; } .okayNav__nav--invisible.transition-enabled { -webkit-transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1),-webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); } .okayNav__nav--invisible.nav-open { display: block; z-index: 99; border: 1px solid #f2f2f2; } /* Kebab icon */ .okayNav__menu-toggle { position: relative; z-index: 1; float: right; cursor: pointer; -webkit-transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1),-webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); } .okayNav__menu-toggle.okay-invisible { position: absolute; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; pointer-events: none; opacity: 0; } .okayNav__menu-toggle span { background: #666; display: inline-block; width: 2px; height: 2px; margin: auto 1px; pointer-events: none; border-radius: 50%; vertical-align: middle; } .okayNav__menu-toggle.icon--active { /* Kebab icon when off-screen nav is open */ } .okayNav__menu-toggle.icon--active span { background: #0a6ebd; } .okayNav a { color: #2e2e33; font-weight: 400; } .okayNav a:hover { color: #0a6ebd; } /** * social-links */ .social-links { list-style: none; padding: 0; text-align: left; } .social-links li { list-style: none; display: inline-block; margin-left: 10px; } .social-links li:first-child { margin-left: 0; } .header .social-links { padding: 10px 20px; } .footer .social-links { margin-bottom: 5px; } @font-face { font-family: \"socialshare\"; src: url(\"../fonts/iconfont.eot\"); /* IE9*/ src: url(\"../fonts/iconfont.eot?#iefix\") format(\"embedded-opentype\"),url(\"../fonts/iconfont.woff\") format(\"woff\"),url(\"../fonts/iconfont.ttf\") format(\"truetype\"),url(\"../fonts/iconfont.svg#iconfont\") format(\"svg\"); } .social-share { display: inline-block; font-size: 16px; } .social-share a { position: relative; text-decoration: none; margin-left: 16px; display: inline-block; outline: none; line-height: 32px; } .social-share .social-share-icon { position: relative; display: inline-block; height: 32px; line-height: 32px; color: #999; text-align: center; vertical-align: middle; -webkit-transition: background 0.6s ease-out 0s; transition: background 0.6s ease-out 0s; } .social-share .social-share-icon:hover { color: #666; } .social-share .icon-weibo:hover { color: #ff763b; } .social-share .icon-tencent:hover { color: #56b6e7; } .social-share .icon-qq:hover { color: #56b6e7; } .social-share .icon-qzone:hover { color: #FDBE3D; } .social-share .icon-douban:hover { color: #33b045; } .social-share .icon-linkedin:hover { color: #0077B5; } .social-share .icon-facebook:hover { color: #44619D; } .social-share .icon-google:hover { color: #db4437; } .social-share .icon-twitter:hover { color: #55acee; } .social-share .icon-diandian:hover { color: #307DCA; } .social-share .icon-wechat { position: relative; } .social-share .icon-wechat:hover { color: #7bc549; } .social-share .icon-wechat .wechat-qrcode { display: none; border: 1px solid #eee; position: absolute; z-index: 9; top: -209px; left: -90px; width: 200px; height: 200px; color: #666; font-size: 12px; text-align: center; background-color: #fff; -webkit-transition: all 200ms; transition: all 200ms; -webkit-tansition: all 350ms; -moz-transition: all 350ms; } .social-share .icon-wechat .wechat-qrcode.bottom { top: 40px; left: -84px; } .social-share .icon-wechat .wechat-qrcode.bottom:after { display: none; } .social-share .icon-wechat .wechat-qrcode h4 { font-weight: normal; height: 26px; line-height: 26px; font-size: 12px; background-color: #f3f3f3; margin: 0; padding: 0; color: #777; } .social-share .icon-wechat .wechat-qrcode .qrcode { width: 105px; margin: 15px auto; } .social-share .icon-wechat .wechat-qrcode .qrcode table { margin: 0 !important; } .social-share .icon-wechat .wechat-qrcode .help p { font-weight: normal; line-height: 16px; padding: 0; margin: 0; } .social-share .icon-wechat .wechat-qrcode:before { content: ''; position: absolute; left: 50%; margin-left: -6px; bottom: -15px; width: 0; height: 0; border-width: 8px 6px 6px 6px; border-style: solid; border-color: #eee transparent transparent transparent; } .social-share .icon-wechat .wechat-qrcode:after { content: ''; position: absolute; left: 50%; margin-left: -6px; bottom: -13px; width: 0; height: 0; border-width: 8px 6px 6px 6px; border-style: solid; border-color: #fff transparent transparent transparent; } .social-share .icon-wechat:hover .wechat-qrcode { display: block; } .btn-donate { position: absolute; bottom: 10px; left: 50%; margin-left: -25px; width: 50px; height: 50px; line-height: 50px; padding: 0; border-radius: 50%; font-size: 18px; cursor: pointer; z-index: 99; } .btn-donate:focus, .btn-donate:hover, .btn-donate:active { border-color: transparent !important; outline: none !important; } .btn-donate.btn-fancy { background-color: transparent; } .btn-donate.btn-fancy span { width: 50px; height: 50px; padding: 0; } .donate { overflow: hidden; } .donate-box { text-align: center; padding-top: 30px; } .donate-box .donate-head { width: 100%; height: 80px; text-align: center; line-height: 60px; color: #a3a3a3; font-size: 16px; position: relative; } .donate-box .donate-head:before, .donate-box .donate-head:after { font-family: Arial,Helvetica,sans-serif; background: none; width: 0px; height: 0px; font-style: normal; color: #eee; font-size: 100px; position: absolute; top: 15px; } .donate-box .donate-head:before { content: '\\201c'; left: 30px; } .donate-box .donate-head:after { content: '\\201d'; right: 70px; } .donate-box .donate-footer { padding-top: 35px; } .donate-box .donate-payimg { display: inline-block; padding: 10px; border: 6px solid #ea5f00; margin: 0 auto; border-radius: 3px; } .donate-box .donate-payimg img { display: block; text-align: center; width: 140px; height: 140px; } .book .media-middle { display: inline-block; width: 115px; } .ins-search { display: none; } .ins-search.show { display: block; } .ins-selectable { cursor: pointer; } .ins-search-mask, .ins-search-container { position: fixed; } .ins-search-mask { top: 0; left: 0; width: 100%; height: 100%; z-index: 1050; background: rgba(0, 0, 0, 0.5); } .ins-input-wrapper { position: relative; } .ins-search-input { width: 100%; border: none; outline: none; font-size: 16px; -webkit-box-shadow: none; box-shadow: none; font-weight: 200; border-radius: 0; background: #fff; line-height: 20px; -webkit-box-sizing: border-box; box-sizing: border-box; padding: 12px 28px 12px 20px; border-bottom: 1px solid #e2e2e2; font-family: \"Microsoft Yahei Light\",\"Microsoft Yahei\",Helvetica,Arial,sans-serif; } .ins-close { top: 50%; right: 6px; width: 20px; height: 20px; font-size: 24px; margin-top: -15px; position: absolute; text-align: center; opacity: 1.0; color: #666; display: inline-block; } .ins-close:hover { color: #006bde; } .ins-search-container { left: 50%; top: 100px; z-index: 1051; bottom: 100px; -webkit-box-sizing: border-box; box-sizing: border-box; width: 540px; margin-left: -270px; } .ins-section-wrapper { left: 0; right: 0; top: 45px; bottom: 0; overflow-y: auto; position: absolute; } .ins-section-container { position: relative; background: #f7f7f7; } .ins-section { font-size: 14px; line-height: 16px; } .ins-section .ins-section-header, .ins-section .ins-search-item { padding: 8px 15px; } .ins-section .ins-section-header { color: #9a9a9a; border-bottom: 1px solid #e2e2e2; } .ins-section .ins-slug { margin-left: 5px; color: #9a9a9a; } .ins-section .ins-slug:before { content: '('; } .ins-section .ins-slug:after { content: ')'; } .ins-section .ins-search-item header, .ins-section .ins-search-item .ins-search-preview { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .ins-section .ins-search-item header .icon { margin-right: 8px; } .ins-section .ins-search-item .ins-search-preview { height: 15px; font-size: 12px; color: #9a9a9a; margin: 5px 0 0 20px; } .ins-section .ins-search-item:hover, .ins-section .ins-search-item.active { color: #fff; background: #006bde; } .ins-section .ins-search-item:hover .ins-slug, .ins-section .ins-search-item.active .ins-slug, .ins-section .ins-search-item:hover .ins-search-preview, .ins-section .ins-search-item.active .ins-search-preview { color: #fff; } .theme-black .header, .theme-blue .header, .theme-green .header, .theme-purple .header { color: #fff; } .theme-black .header a, .theme-blue .header a, .theme-green .header a, .theme-purple .header a { color: #efefef; } .theme-black .header #location, .theme-blue .header #location, .theme-green .header #location, .theme-purple .header #location { color: rgba(255, 255, 255, 0.75) !important; } .theme-black .header .navbar-toggle .icon-bar, .theme-blue .header .navbar-toggle .icon-bar, .theme-green .header .navbar-toggle .icon-bar, .theme-purple .header .navbar-toggle .icon-bar { background-color: #fff; } .theme-black .footer, .theme-blue .footer, .theme-green .footer, .theme-purple .footer { color: rgba(255, 255, 255, 0.75); } .theme-black .footer a, .theme-blue .footer a, .theme-green .footer a, .theme-purple .footer a { color: rgba(255, 255, 255, 0.75); } .theme-black .header a:focus, .theme-black .header a:hover, .theme-black .header a.active, .theme-black .footer a:focus, .theme-black .footer a:hover, .theme-black .footer a.active, .theme-blue .header a:focus, .theme-blue .header a:hover, .theme-blue .header a.active, .theme-blue .footer a:focus, .theme-blue .footer a:hover, .theme-blue .footer a.active, .theme-green .header a:focus, .theme-green .header a:hover, .theme-green .header a.active, .theme-green .footer a:focus, .theme-green .footer a:hover, .theme-green .footer a.active, .theme-purple .header a:focus, .theme-purple .header a:hover, .theme-purple .header a.active, .theme-purple .footer a:focus, .theme-purple .footer a:hover, .theme-purple .footer a.active { color: #fff; } .theme-black .main-nav > li > a:focus, .theme-black .main-nav > li > a:hover, .theme-black .main-nav > li > a.active, .theme-blue .main-nav > li > a:focus, .theme-blue .main-nav > li > a:hover, .theme-blue .main-nav > li > a.active, .theme-green .main-nav > li > a:focus, .theme-green .main-nav > li > a:hover, .theme-green .main-nav > li > a.active, .theme-purple .main-nav > li > a:focus, .theme-purple .main-nav > li > a:hover, .theme-purple .main-nav > li > a.active { color: #fff; background: rgba(0, 0, 0, 0.15); } .theme-black .main-nav > .active a, .theme-black .main-nav > .active a:focus, .theme-black .main-nav > .active a:hover, .theme-black .main-nav > .active a.active, .theme-blue .main-nav > .active a, .theme-blue .main-nav > .active a:focus, .theme-blue .main-nav > .active a:hover, .theme-blue .main-nav > .active a.active, .theme-green .main-nav > .active a, .theme-green .main-nav > .active a:focus, .theme-green .main-nav > .active a:hover, .theme-green .main-nav > .active a.active, .theme-purple .main-nav > .active a, .theme-purple .main-nav > .active a:focus, .theme-purple .main-nav > .active a:hover, .theme-purple .main-nav > .active a.active { color: #fff; background: rgba(0, 0, 0, 0.2); } .theme-black .search .sidebar-form, .theme-blue .search .sidebar-form, .theme-green .search .sidebar-form, .theme-purple .search .sidebar-form { border: 0; background: rgba(0, 0, 0, 0.2); } .theme-black .search .sidebar-form input::-webkit-input-placeholder, .theme-blue .search .sidebar-form input::-webkit-input-placeholder, .theme-green .search .sidebar-form input::-webkit-input-placeholder, .theme-purple .search .sidebar-form input::-webkit-input-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search .sidebar-form input:-moz-placeholder, .theme-blue .search .sidebar-form input:-moz-placeholder, .theme-green .search .sidebar-form input:-moz-placeholder, .theme-purple .search .sidebar-form input:-moz-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search .sidebar-form input::-moz-placeholder, .theme-blue .search .sidebar-form input::-moz-placeholder, .theme-green .search .sidebar-form input::-moz-placeholder, .theme-purple .search .sidebar-form input::-moz-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search .sidebar-form input:-ms-input-placeholder, .theme-blue .search .sidebar-form input:-ms-input-placeholder, .theme-green .search .sidebar-form input:-ms-input-placeholder, .theme-purple .search .sidebar-form input:-ms-input-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search input[type=\"text\"], .theme-blue .search input[type=\"text\"], .theme-green .search input[type=\"text\"], .theme-purple .search input[type=\"text\"] { color: #666; } .theme-black .search input[type=\"text\"] + .input-group-btn .btn, .theme-blue .search input[type=\"text\"] + .input-group-btn .btn, .theme-green .search input[type=\"text\"] + .input-group-btn .btn, .theme-purple .search input[type=\"text\"] + .input-group-btn .btn { color: rgba(255, 255, 255, 0.5); } .theme-black .search input[type=\"text\"]:focus, .theme-black .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-blue .search input[type=\"text\"]:focus, .theme-blue .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-green .search input[type=\"text\"]:focus, .theme-green .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-purple .search input[type=\"text\"]:focus, .theme-purple .search input[type=\"text\"]:focus + .input-group-btn .btn { background-color: #fff; color: #666; } .theme-black .header { background: #1a2433; background: -webkit-linear-gradient(left, #1a2433 0%, #253449 80%, #253449 100%); background: -webkit-gradient(linear, left top, right top, from(#1a2433), color-stop(80%, #253449), to(#253449)); background: linear-gradient(to right, #1a2433 0%, #253449 80%, #253449 100%); } .theme-blue .header { background: #0062c5; background: -webkit-linear-gradient(left, #0062c5 0%, #0073e6 80%, #0073e6 100%); background: -webkit-gradient(linear, left top, right top, from(#0062c5), color-stop(80%, #0073e6), to(#0073e6)); background: linear-gradient(to right, #0062c5 0%, #0073e6 80%, #0073e6 100%); } .theme-green .header { background: #08a283; background: -webkit-linear-gradient(left, #08a283 0%, #0ac29d 80%, #0ac29d 100%); background: -webkit-gradient(linear, left top, right top, from(#08a283), color-stop(80%, #0ac29d), to(#0ac29d)); background: linear-gradient(to right, #08a283 0%, #0ac29d 80%, #0ac29d 100%); } .theme-purple .header { background: #494683; background: -webkit-linear-gradient(left, #494683 0%, #555299 80%, #555299 100%); background: -webkit-gradient(linear, left top, right top, from(#494683), color-stop(80%, #555299), to(#555299)); background: linear-gradient(to right, #494683 0%, #555299 80%, #555299 100%); } @media (min-width: 767px) { .modal-center { text-align: center; padding: 0 !important; } .modal-center:before { content: ''; display: inline-block; height: 100%; vertical-align: middle; margin-right: -4px; } .modal-center .modal-dialog { display: inline-block; text-align: left; vertical-align: middle; } .donate-box .donate-footer { margin: 0 -15px -16px -15px; } } @media (min-width: 768px) { .lead { font-size: 21px; } .dl-horizontal dt { float: left; width: 160px; clear: left; text-align: right; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } .dl-horizontal dd { margin-left: 180px; } .container { width: 750px; } .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 { float: left; } .col-sm-1 { width: 8.33333%; } .col-sm-2 { width: 16.66667%; } .col-sm-3 { width: 25%; } .col-sm-4 { width: 33.33333%; } .col-sm-5 { width: 41.66667%; } .col-sm-6 { width: 50%; } .col-sm-7 { width: 58.33333%; } .col-sm-8 { width: 66.66667%; } .col-sm-9 { width: 75%; } .col-sm-10 { width: 83.33333%; } .col-sm-11 { width: 91.66667%; } .col-sm-12 { width: 100%; } .col-sm-pull-0 { right: auto; } .col-sm-pull-1 { right: 8.33333%; } .col-sm-pull-2 { right: 16.66667%; } .col-sm-pull-3 { right: 25%; } .col-sm-pull-4 { right: 33.33333%; } .col-sm-pull-5 { right: 41.66667%; } .col-sm-pull-6 { right: 50%; } .col-sm-pull-7 { right: 58.33333%; } .col-sm-pull-8 { right: 66.66667%; } .col-sm-pull-9 { right: 75%; } .col-sm-pull-10 { right: 83.33333%; } .col-sm-pull-11 { right: 91.66667%; } .col-sm-pull-12 { right: 100%; } .col-sm-push-0 { left: auto; } .col-sm-push-1 { left: 8.33333%; } .col-sm-push-2 { left: 16.66667%; } .col-sm-push-3 { left: 25%; } .col-sm-push-4 { left: 33.33333%; } .col-sm-push-5 { left: 41.66667%; } .col-sm-push-6 { left: 50%; } .col-sm-push-7 { left: 58.33333%; } .col-sm-push-8 { left: 66.66667%; } .col-sm-push-9 { left: 75%; } .col-sm-push-10 { left: 83.33333%; } .col-sm-push-11 { left: 91.66667%; } .col-sm-push-12 { left: 100%; } .col-sm-offset-0 { margin-left: 0%; } .col-sm-offset-1 { margin-left: 8.33333%; } .col-sm-offset-2 { margin-left: 16.66667%; } .col-sm-offset-3 { margin-left: 25%; } .col-sm-offset-4 { margin-left: 33.33333%; } .col-sm-offset-5 { margin-left: 41.66667%; } .col-sm-offset-6 { margin-left: 50%; } .col-sm-offset-7 { margin-left: 58.33333%; } .col-sm-offset-8 { margin-left: 66.66667%; } .col-sm-offset-9 { margin-left: 75%; } .col-sm-offset-10 { margin-left: 83.33333%; } .col-sm-offset-11 { margin-left: 91.66667%; } .col-sm-offset-12 { margin-left: 100%; } .navbar-right .dropdown-menu { right: 0; left: auto; } .navbar-right .dropdown-menu-left { left: 0; right: auto; } .nav-justified > li, .nav-tabs.nav-justified > li { display: table-cell; width: 1%; } .nav-justified > li > a, .nav-tabs.nav-justified > li > a { margin-bottom: 0; } .nav-tabs-justified > li > a, .nav-tabs.nav-justified > li > a { border-bottom: 1px solid #f2f2f2; border-radius: 4px 4px 0 0; } .nav-tabs-justified > .active > a, .nav-tabs.nav-justified > .active > a, .nav-tabs-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:hover, .nav-tabs-justified > .active > a:focus, .nav-tabs.nav-justified > .active > a:focus { border-bottom-color: #fff; } .navbar { border-radius: 4px; } .navbar-header { float: left; } .navbar-collapse { width: auto; border-top: 0; -webkit-box-shadow: none; box-shadow: none; } .navbar-collapse.collapse { display: block !important; height: auto !important; padding-bottom: 0; overflow: visible !important; } .navbar-collapse.in { overflow-y: visible; } .navbar-fixed-top .navbar-collapse, .navbar-static-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse { padding-left: 0; padding-right: 0; } .container > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-header, .container-fluid > .navbar-collapse { margin-right: 0; margin-left: 0; } .navbar-static-top { border-radius: 0; } .navbar-fixed-top, .navbar-fixed-bottom { border-radius: 0; } .navbar > .container .navbar-brand, .navbar > .container-fluid .navbar-brand { margin-left: -15px; } .navbar-toggle { display: none; } .navbar-nav { float: left; margin: 0; } .navbar-nav > li { float: left; } .navbar-nav > li > a { padding-top: 14.5px; padding-bottom: 14.5px; } .navbar-form .form-group { display: inline-block; margin-bottom: 0; vertical-align: middle; } .navbar-form .form-control { display: inline-block; width: auto; vertical-align: middle; } .navbar-form .form-control-static { display: inline-block; } .navbar-form .input-group { display: inline-table; vertical-align: middle; } .navbar-form .input-group .input-group-addon, .navbar-form .input-group .input-group-btn, .navbar-form .input-group .form-control { width: auto; } .navbar-form .input-group > .form-control { width: 100%; } .navbar-form .control-label { margin-bottom: 0; vertical-align: middle; } .navbar-form .radio, .navbar-form .checkbox { display: inline-block; margin-top: 0; margin-bottom: 0; vertical-align: middle; } .navbar-form .radio label, .navbar-form .checkbox label { padding-left: 0; } .navbar-form .radio input[type=\"radio\"], .navbar-form .checkbox input[type=\"checkbox\"] { position: relative; margin-left: 0; } .navbar-form .has-feedback .form-control-feedback { top: 0; } .navbar-form { width: auto; border: 0; margin-left: 0; margin-right: 0; padding-top: 0; padding-bottom: 0; -webkit-box-shadow: none; box-shadow: none; } .navbar-text { float: left; margin-left: 15px; margin-right: 15px; } .navbar-left { float: left !important; } .navbar-right { float: right !important; margin-right: -15px; } .navbar-right ~ .navbar-right { margin-right: 0; } .modal-dialog { width: 600px; margin: 30px auto; } .modal-content { -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05); } .modal-sm { width: 300px; } .header { position: fixed; top: 0; bottom: 0; left: 0; z-index: 1000; display: block; padding: 0; overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */ border-right: 1px solid #f6f6f6; width: 4.16667%; } .sidebar { position: fixed; top: 0; bottom: 0; left: 0; display: block; padding: 0; overflow-x: hidden; overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */ border-right: 1px solid #f6f6f6; width: 33.33333%; } .main { width: 62.5%; padding-right: 20px; padding-left: 20px; } .footer { position: fixed; left: 0; bottom: 0; background-color: transparent; z-index: 1050; width: 4.16667%; } body.main-center .main { margin-left: 4.16667%; } body.main-left .sidebar { margin-right: 4.16667%; } body.main-right .sidebar { margin-left: 4.16667%; } body.main-right .main { margin-left: 37.5%; } body.no-sidebar.main-left .main { width: 95.83333333%; margin-right: 4.16667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 95.83333333%; margin-left: 4.16667%; } .header .navbar-header { float: none; } #avatar img { padding: 5px; } .bar.bar-footer:before { width: -webkit-calc(100% + 40px); width: calc(100% + 40px); left: -20px; } .header .social-links { display: none; } } @media (min-width: 992px) { .slimContent{ margin-top: 20px; } .container { width: 970px; } .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 { float: left; } .col-md-1 { width: 8.33333%; } .col-md-2 { width: 16.66667%; } .col-md-3 { width: 25%; } .col-md-4 { width: 33.33333%; } .col-md-5 { width: 41.66667%; } .col-md-6 { width: 50%; } .col-md-7 { width: 58.33333%; } .col-md-8 { width: 66.66667%; } .col-md-9 { width: 75%; } .col-md-10 { width: 83.33333%; } .col-md-11 { width: 91.66667%; } .col-md-12 { width: 100%; } .col-md-pull-0 { right: auto; } .col-md-pull-1 { right: 8.33333%; } .col-md-pull-2 { right: 16.66667%; } .col-md-pull-3 { right: 25%; } .col-md-pull-4 { right: 33.33333%; } .col-md-pull-5 { right: 41.66667%; } .col-md-pull-6 { right: 50%; } .col-md-pull-7 { right: 58.33333%; } .col-md-pull-8 { right: 66.66667%; } .col-md-pull-9 { right: 75%; } .col-md-pull-10 { right: 83.33333%; } .col-md-pull-11 { right: 91.66667%; } .col-md-pull-12 { right: 100%; } .col-md-push-0 { left: auto; } .col-md-push-1 { left: 8.33333%; } .col-md-push-2 { left: 16.66667%; } .col-md-push-3 { left: 25%; } .col-md-push-4 { left: 33.33333%; } .col-md-push-5 { left: 41.66667%; } .col-md-push-6 { left: 50%; } .col-md-push-7 { left: 58.33333%; } .col-md-push-8 { left: 66.66667%; } .col-md-push-9 { left: 75%; } .col-md-push-10 { left: 83.33333%; } .col-md-push-11 { left: 91.66667%; } .col-md-push-12 { left: 100%; } .col-md-offset-0 { margin-left: 0%; } .col-md-offset-1 { margin-left: 8.33333%; } .col-md-offset-2 { margin-left: 16.66667%; } .col-md-offset-3 { margin-left: 25%; } .col-md-offset-4 { margin-left: 33.33333%; } .col-md-offset-5 { margin-left: 41.66667%; } .col-md-offset-6 { margin-left: 50%; } .col-md-offset-7 { margin-left: 58.33333%; } .col-md-offset-8 { margin-left: 66.66667%; } .col-md-offset-9 { margin-left: 75%; } .col-md-offset-10 { margin-left: 83.33333%; } .col-md-offset-11 { margin-left: 91.66667%; } .col-md-offset-12 { margin-left: 100%; } .modal-lg { width: 900px; } .header { width: 16.66667%; } .sidebar { width: 25%; } .sidebar .slimContent { padding-right: 25px; padding-left: 25px; } .main { width: 58.33333%; padding-right: 25px; padding-left: 25px; } .footer { width: 16.66667%; } body.main-center .main { margin-left: 16.66667%; } body.main-left .sidebar { margin-right: 16.66667%; } body.main-right .sidebar { margin-left: 16.66667%; } body.main-right .main { margin-left: 41.66667%; } body.no-sidebar.main-left .main { width: 83.33333333%; margin-right: 16.66667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 83.33333333%; margin-left: 16.66667%; } .bar.bar-footer:before { width: -webkit-calc(100% + 50px); width: calc(100% + 50px); left: -25px; } .marked-body .headerlink:before, .marked-body .markdownIt-Anchor:before { display: inline-block; width: 18px; content: \"#\"; color: #0a6ebd; text-align: right; float: left; visibility: hidden; } .marked-body .headerlink:before { margin-left: -15px; padding-right: 2px; } .marked-body .markdownIt-Anchor:before { margin-left: -20px; } .marked-body h1:hover .headerlink:before, .marked-body h1:hover .markdownIt-Anchor:before, .marked-body h2:hover .headerlink:before, .marked-body h2:hover .markdownIt-Anchor:before, .marked-body h3:hover .headerlink:before, .marked-body h3:hover .markdownIt-Anchor:before, .marked-body h4:hover .headerlink:before, .marked-body h4:hover .markdownIt-Anchor:before, .marked-body h5:hover .headerlink:before, .marked-body h5:hover .markdownIt-Anchor:before, .marked-body h6:hover .headerlink:before, .marked-body h6:hover .markdownIt-Anchor:before { visibility: visible; } } @media (min-width: 1200px) { .container { width: 1170px; } .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 { float: left; } .col-lg-1 { width: 8.33333%; } .col-lg-2 { width: 16.66667%; } .col-lg-3 { width: 25%; } .col-lg-4 { width: 33.33333%; } .col-lg-5 { width: 41.66667%; } .col-lg-6 { width: 50%; } .col-lg-7 { width: 58.33333%; } .col-lg-8 { width: 66.66667%; } .col-lg-9 { width: 75%; } .col-lg-10 { width: 83.33333%; } .col-lg-11 { width: 91.66667%; } .col-lg-12 { width: 100%; } .col-lg-pull-0 { right: auto; } .col-lg-pull-1 { right: 8.33333%; } .col-lg-pull-2 { right: 16.66667%; } .col-lg-pull-3 { right: 25%; } .col-lg-pull-4 { right: 33.33333%; } .col-lg-pull-5 { right: 41.66667%; } .col-lg-pull-6 { right: 50%; } .col-lg-pull-7 { right: 58.33333%; } .col-lg-pull-8 { right: 66.66667%; } .col-lg-pull-9 { right: 75%; } .col-lg-pull-10 { right: 83.33333%; } .col-lg-pull-11 { right: 91.66667%; } .col-lg-pull-12 { right: 100%; } .col-lg-push-0 { left: auto; } .col-lg-push-1 { left: 8.33333%; } .col-lg-push-2 { left: 16.66667%; } .col-lg-push-3 { left: 25%; } .col-lg-push-4 { left: 33.33333%; } .col-lg-push-5 { left: 41.66667%; } .col-lg-push-6 { left: 50%; } .col-lg-push-7 { left: 58.33333%; } .col-lg-push-8 { left: 66.66667%; } .col-lg-push-9 { left: 75%; } .col-lg-push-10 { left: 83.33333%; } .col-lg-push-11 { left: 91.66667%; } .col-lg-push-12 { left: 100%; } .col-lg-offset-0 { margin-left: 0%; } .col-lg-offset-1 { margin-left: 8.33333%; } .col-lg-offset-2 { margin-left: 16.66667%; } .col-lg-offset-3 { margin-left: 25%; } .col-lg-offset-4 { margin-left: 33.33333%; } .col-lg-offset-5 { margin-left: 41.66667%; } .col-lg-offset-6 { margin-left: 50%; } .col-lg-offset-7 { margin-left: 58.33333%; } .col-lg-offset-8 { margin-left: 66.66667%; } .col-lg-offset-9 { margin-left: 75%; } .col-lg-offset-10 { margin-left: 83.33333%; } .col-lg-offset-11 { margin-left: 91.66667%; } .col-lg-offset-12 { margin-left: 100%; } .visible-lg { display: block !important; } table.visible-lg { display: table !important; } tr.visible-lg { display: table-row !important; } th.visible-lg, td.visible-lg { display: table-cell !important; } .visible-lg-block { display: block !important; } .visible-lg-inline { display: inline !important; } .visible-lg-inline-block { display: inline-block !important; } .hidden-lg { display: none !important; } .header { width: 16.66667%; } .sidebar { width: 23%; } .sidebar .slimContent { padding-right: 30px; padding-left: 30px; } .main { width: 60.33333%; padding-right: 30px; padding-left: 30px; } .footer { width: 16.66667%; } body.main-center .main { margin-left: 16.66667%; } body.main-left .sidebar { margin-right: 16.66667%; } body.main-right .sidebar { margin-left: 16.66667%; } body.main-right .main { margin-left: 39.66667%; } body.no-sidebar.main-left .main { width: 83.33333333%; margin-right: 16.66667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 83.33333333%; margin-left: 16.66667%; } .main-nav > li > a { padding: 10px 20px; } .bar.bar-footer:before { width: -webkit-calc(100% + 60px); width: calc(100% + 60px); left: -30px; } } @media (min-width: 1440px) { .header { width: 16.66667%; } .sidebar { width: 21%; } .main { width: 62.33333%; } .footer { width: 16.66667%; } body.main-center .main { margin-left: 16.66667%; } body.main-left .sidebar { margin-right: 16.66667%; } body.main-right .sidebar { margin-left: 16.66667%; } body.main-right .main { margin-left: 37.66667%; } body.no-sidebar.main-left .main { width: 83.33333333%; margin-right: 16.66667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 83.33333333%; margin-left: 16.66667%; } .header #title { font-size: 15px; } } @media (max-width: 1199px) { .main-nav > li > a { padding: 6px 20px; } .bar .pager li a span { display: none; } .footer .copyright { display: none; } } @media (max-width: 767px) { .navbar-nav .open .dropdown-menu { position: static; float: none; width: auto; margin-top: 0; background-color: transparent; border: 0; -webkit-box-shadow: none; box-shadow: none; } .navbar-nav .open .dropdown-menu > li > a, .navbar-nav .open .dropdown-menu .dropdown-header { padding: 5px 15px 5px 25px; } .navbar-nav .open .dropdown-menu > li > a { line-height: 21px; } .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-nav .open .dropdown-menu > li > a:focus { background-image: none; } .navbar-form .form-group { margin-bottom: 5px; } .navbar-form .form-group:last-child { margin-bottom: 0; } .navbar-default .navbar-nav .open .dropdown-menu > li > a { color: #777; } .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus { color: #333; background-color: transparent; } .navbar-default .navbar-nav .open .dropdown-menu > .active > a, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus { color: #555; background-color: #e7e7e7; } .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus { color: #ccc; background-color: transparent; } .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header { border-color: #090909; } .navbar-inverse .navbar-nav .open .dropdown-menu .divider { background-color: #090909; } .navbar-inverse .navbar-nav .open .dropdown-menu > li > a { color: #9d9d9d; } .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus { color: #fff; background-color: transparent; } .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus { color: #fff; background-color: #090909; } .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus { color: #444; background-color: transparent; } .visible-xs { display: block !important; } table.visible-xs { display: table !important; } tr.visible-xs { display: table-row !important; } th.visible-xs, td.visible-xs { display: table-cell !important; } .visible-xs-block { display: block !important; } .visible-xs-inline { display: inline !important; } .visible-xs-inline-block { display: inline-block !important; } .hidden-xs { display: none !important; } body { padding-top: 53px; } .list-circle-num, .list-square-num { margin: 0 0 40px; } .modal-xs-full .modal-dialog, .modal-xs-full .modal-content { height: 100%; width: 100%; margin: 0; border-radius: 0; -webkit-box-shadow: none; box-shadow: none; } .modal-xs-full .modal-dialog .donate-box, .modal-xs-full .modal-content .donate-box { padding-top: 50px; } .highlight table:before { display: block; content: ' '; height: 38px; position: absolute; top: 0; left: 0; right: 0; margin-left: -10px; margin-right: -10px; margin-top: -38px; background-color: #f6f6f6; border-top-left-radius: 4px; border-top-right-radius: 4px; } .header { position: fixed; left: 0; right: 0; top: 0; width: 100%; z-index: 1050; } .header:before, .header:after { content: \" \"; display: table; } .header:after { clear: both; } .sidebar { display: none; } .main { min-height: auto; } .main-nav > li > a { padding: 10px 20px; } .sidebar-form { border: 0; margin: 9px 45px 9px 0; } .sidebar-form .input-group-btn .btn { color: #2196f3; } .sidebar-form input[type=\"text\"]:focus { background-color: transparent; } .sidebar-form input[type=\"text\"]:focus + .input-group-btn .btn { color: #2196f3; background-color: transparent; } .header .navbar-toggle { position: absolute; top: 0; right: 0; margin-right: 5px; } .header .navbar-toggle .icon-bar { width: 18px; } .header .search { width: 90%; float: right; } .header .profile-block { padding: 0; margin: 10px 0; width: 8.33333%; float: left; } .header #avatar { width: 32px; height: 32px; } .header #name, .header #title, .header #location { display: none; } #main-navbar { position: absolute; width: 100%; background-color: #fbfbfb; border-bottom: 1px solid #f6f6f6; z-index: 99; } .main .content { min-height: auto; } .sidebar-toc.in { position: fixed; top: 50px; bottom: 50px; z-index: 9; } .bar.bar-footer { top: auto !important; bottom: 0 !important; } .footer { display: none; position: static; } .footer .copyright { display: block; } .social-links .tooltip { display: none !important; visibility: hidden; } .theme-black .search input[type=\"text\"]:focus, .theme-blue .search input[type=\"text\"]:focus, .theme-green .search input[type=\"text\"]:focus, .theme-purple .search input[type=\"text\"]:focus { background-color: transparent; } .theme-black .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-blue .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-green .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-purple .search input[type=\"text\"]:focus + .input-group-btn .btn { color: rgba(255, 255, 255, 0.5); background-color: transparent; } .theme-black #main-navbar { background: #1a2433; background: -webkit-linear-gradient(left, #1a2433 0%, #253449 80%, #253449 100%); background: -webkit-gradient(linear, left top, right top, from(#1a2433), color-stop(80%, #253449), to(#253449)); background: linear-gradient(to right, #1a2433 0%, #253449 80%, #253449 100%); } .theme-blue #main-navbar { background: #0062c5; background: -webkit-linear-gradient(left, #0062c5 0%, #0073e6 80%, #0073e6 100%); background: -webkit-gradient(linear, left top, right top, from(#0062c5), color-stop(80%, #0073e6), to(#0073e6)); background: linear-gradient(to right, #0062c5 0%, #0073e6 80%, #0073e6 100%); } .theme-green #main-navbar { background: #08a283; background: -webkit-linear-gradient(left, #08a283 0%, #0ac29d 80%, #0ac29d 100%); background: -webkit-gradient(linear, left top, right top, from(#08a283), color-stop(80%, #0ac29d), to(#0ac29d)); background: linear-gradient(to right, #08a283 0%, #0ac29d 80%, #0ac29d 100%); } .theme-purple #main-navbar { background: #494683; background: -webkit-linear-gradient(left, #494683 0%, #555299 80%, #555299 100%); background: -webkit-gradient(linear, left top, right top, from(#494683), color-stop(80%, #555299), to(#555299)); background: linear-gradient(to right, #494683 0%, #555299 80%, #555299 100%); } } @media screen and (max-width: 559px),screen and (max-height: 479px) { .ins-search-container { top: 0; left: 0; margin: 0; width: 100%; height: 100%; background: #f7f7f7; } } @media (max-width: 480px) { .header #avatar { width: 24px; height: 24px; margin-top: 3px; margin-left: 15px; } } @media (min-width: 768px) and (max-width: 991px) { .visible-sm { display: block !important; } table.visible-sm { display: table !important; } tr.visible-sm { display: table-row !important; } th.visible-sm, td.visible-sm { display: table-cell !important; } .visible-sm-block { display: block !important; } .visible-sm-inline { display: inline !important; } .visible-sm-inline-block { display: inline-block !important; } .hidden-sm { display: none !important; } .sidebar-form { display: none; } .header .main-nav > li > a { text-align: center; padding-left: 0; padding-right: 0; } .header .main-nav > li > a span { display: none; } .header .profile-block { padding-top: 10px; padding-left: 0; padding-right: 0; } .header #avatar { width: 32px; height: 32px; } .footer { padding-left: 0; padding-right: 0; } .social-links { display: block; width: 100%; text-align: center; margin-bottom: 0; } .social-links:before, .social-links:after { content: \" \"; display: table; } .social-links:after { clear: both; } .social-links li { display: block; margin-left: 0; margin-top: 10px; } .social-links li:before, .social-links li:after { content: \" \"; display: table; } .social-links li:after { clear: both; } .social-links .tooltip { display: none !important; visibility: hidden; } } @media (min-width: 992px) and (max-width: 1199px) { .visible-md { display: block !important; } table.visible-md { display: table !important; } tr.visible-md { display: table-row !important; } th.visible-md, td.visible-md { display: table-cell !important; } .visible-md-block { display: block !important; } .visible-md-inline { display: inline !important; } .visible-md-inline-block { display: inline-block !important; } .hidden-md { display: none !important; } } @media print { *, *:before, *:after { background: transparent !important; color: #000 !important; -webkit-box-shadow: none !important; box-shadow: none !important; text-shadow: none !important; } a, a:visited { text-decoration: underline; } a[href]:after { content: \" (\" attr(href) \")\"; } abbr[title]:after { content: \" (\" attr(title) \")\"; } a[href^=\"#\"]:after, a[href^=\"javascript:\"]:after { content: \"\"; } pre, blockquote { border: 1px solid #999; page-break-inside: avoid; } thead { display: table-header-group; } tr, img { page-break-inside: avoid; } img { max-width: 100% !important; } p, h2, h3 { orphans: 3; widows: 3; } h2, h3 { page-break-after: avoid; } .navbar { display: none; } .btn > .caret, .dropup > .btn > .caret { border-top-color: #000 !important; } .label { border: 1px solid #000; } .table { border-collapse: collapse !important; } .table td, .table th { background-color: #fff !important; } .table-bordered th, .table-bordered td { border: 1px solid #ddd !important; } .visible-print { display: block !important; } table.visible-print { display: table !important; } tr.visible-print { display: table-row !important; } th.visible-print, td.visible-print { display: table-cell !important; } .visible-print-block { display: block !important; } .visible-print-inline { display: inline !important; } .visible-print-inline-block { display: inline-block !important; } .hidden-print { display: none !important; } } @media (max-device-width: 480px) and (orientation: landscape) { .navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse { max-height: 200px; } }"},{"title":"","date":"2022-06-24T17:19:04.496Z","updated":"2022-06-24T17:19:04.496Z","comments":true,"path":"css/style.min.css","permalink":"http://fyupeng.github.io/css/style.min.css","excerpt":"","text":"@charset \"UTF-8\";/*! * Bootstrap v3.3.7 (http://getbootstrap.com) * Copyright 2011-2016 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}b,optgroup,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0}mark{background:#ff0;color:#000}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0;vertical-align:middle}svg:not(:root){overflow:hidden}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}textarea{overflow:auto}td,th{padding:0}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:transparent}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}figure{margin:0}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.57143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:21px;margin-bottom:21px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:21px;margin-bottom:10.5px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:10.5px;margin-bottom:10.5px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:30px}.h2,h2{font-size:26px}.h3,h3{font-size:22px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 10.5px}.lead{margin-bottom:21px;font-size:16px;font-weight:300;line-height:1.4}.small,small{font-size:85%}.mark,mark{background-color:#fcf8e3;padding:.2em}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-lowercase{text-transform:lowercase}.initialism,.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777!important}.text-primary{color:#2196f3}a.text-primary:focus,a.text-primary:hover{color:#0c7cd5}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#2196f3}a.bg-primary:focus,a.bg-primary:hover{background-color:#0c7cd5}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:9.5px;margin:42px 0 21px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:10.5px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none;margin-left:-5px}.list-inline>li{display:inline-block;padding-left:5px;padding-right:5px}dl{margin-top:0;margin-bottom:21px}dd,dt{line-height:1.57143}dt{font-weight:700}dd{margin-left:0}.dl-horizontal dd:after,.dl-horizontal dd:before{content:\" \";display:table}.dl-horizontal dd:after{clear:both}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%}blockquote{padding:10.5px 16px;margin:0 0 21px;border:1px dotted #eee;border-left:3px solid #eee;background-color:#fbfbfb}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.57143;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\\2014 \\00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0;text-align:right}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\\00A0 \\2014'}address{margin-bottom:21px;font-style:normal;line-height:1.57143}.container{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container:after,.container:before{content:\" \";display:table}.container:after{clear:both}.container-fluid{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container-fluid:after,.container-fluid:before{content:\" \";display:table}.container-fluid:after{clear:both}.row{margin-left:-15px;margin-right:-15px}.row:after,.row:before{content:\" \";display:table}.row:after{clear:both}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-left:15px;padding-right:15px}.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{float:left}.col-xs-1{width:8.33333%}.col-xs-2{width:16.66667%}.col-xs-3{width:25%}.col-xs-4{width:33.33333%}.col-xs-5{width:41.66667%}.col-xs-6{width:50%}.col-xs-7{width:58.33333%}.col-xs-8{width:66.66667%}.col-xs-9{width:75%}.col-xs-10{width:83.33333%}.col-xs-11{width:91.66667%}.col-xs-12{width:100%}.col-xs-pull-0{right:auto}.col-xs-pull-1{right:8.33333%}.col-xs-pull-2{right:16.66667%}.col-xs-pull-3{right:25%}.col-xs-pull-4{right:33.33333%}.col-xs-pull-5{right:41.66667%}.col-xs-pull-6{right:50%}.col-xs-pull-7{right:58.33333%}.col-xs-pull-8{right:66.66667%}.col-xs-pull-9{right:75%}.col-xs-pull-10{right:83.33333%}.col-xs-pull-11{right:91.66667%}.col-xs-pull-12{right:100%}.col-xs-push-0{left:auto}.col-xs-push-1{left:8.33333%}.col-xs-push-2{left:16.66667%}.col-xs-push-3{left:25%}.col-xs-push-4{left:33.33333%}.col-xs-push-5{left:41.66667%}.col-xs-push-6{left:50%}.col-xs-push-7{left:58.33333%}.col-xs-push-8{left:66.66667%}.col-xs-push-9{left:75%}.col-xs-push-10{left:83.33333%}.col-xs-push-11{left:91.66667%}.col-xs-push-12{left:100%}.col-xs-offset-0{margin-left:0}.col-xs-offset-1{margin-left:8.33333%}.col-xs-offset-2{margin-left:16.66667%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-4{margin-left:33.33333%}.col-xs-offset-5{margin-left:41.66667%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-7{margin-left:58.33333%}.col-xs-offset-8{margin-left:66.66667%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-10{margin-left:83.33333%}.col-xs-offset-11{margin-left:91.66667%}.col-xs-offset-12{margin-left:100%}.btn{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.57143;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}.btn.active,.btn:active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active,.btn-default:active,.open>.btn-default.dropdown-toggle{color:#333;background-color:#e6e6e6;border-color:#adadad;background-image:none}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.btn-default.dropdown-toggle.focus,.open>.btn-default.dropdown-toggle:focus,.open>.btn-default.dropdown-toggle:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#2196f3;border-color:#0d8aee}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#0c7cd5;border-color:#064475}.btn-primary:hover{color:#fff;background-color:#0c7cd5;border-color:#0a68b4}.btn-primary.active,.btn-primary:active,.open>.btn-primary.dropdown-toggle{color:#fff;background-color:#0c7cd5;border-color:#0a68b4;background-image:none}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.btn-primary.dropdown-toggle.focus,.open>.btn-primary.dropdown-toggle:focus,.open>.btn-primary.dropdown-toggle:hover{color:#fff;background-color:#0a68b4;border-color:#064475}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#2196f3;border-color:#0d8aee}.btn-primary .badge{color:#2196f3;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active,.btn-success:active,.open>.btn-success.dropdown-toggle{color:#fff;background-color:#449d44;border-color:#398439;background-image:none}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.btn-success.dropdown-toggle.focus,.open>.btn-success.dropdown-toggle:focus,.open>.btn-success.dropdown-toggle:hover{color:#fff;background-color:#398439;border-color:#255625}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#56ccf2;border-color:#3ec5f0}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#27beee;border-color:#0d7ea3}.btn-info:hover{color:#fff;background-color:#27beee;border-color:#11aee0}.btn-info.active,.btn-info:active,.open>.btn-info.dropdown-toggle{color:#fff;background-color:#27beee;border-color:#11aee0;background-image:none}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.btn-info.dropdown-toggle.focus,.open>.btn-info.dropdown-toggle:focus,.open>.btn-info.dropdown-toggle:hover{color:#fff;background-color:#11aee0;border-color:#0d7ea3}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#56ccf2;border-color:#3ec5f0}.btn-info .badge{color:#56ccf2;background-color:#fff}.btn-warning{color:#fff;background-color:#f09819;border-color:#e18b0f}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#c97c0d;border-color:#694107}.btn-warning:hover{color:#fff;background-color:#c97c0d;border-color:#a7670b}.btn-warning.active,.btn-warning:active,.open>.btn-warning.dropdown-toggle{color:#fff;background-color:#c97c0d;border-color:#a7670b;background-image:none}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.btn-warning.dropdown-toggle.focus,.open>.btn-warning.dropdown-toggle:focus,.open>.btn-warning.dropdown-toggle:hover{color:#fff;background-color:#a7670b;border-color:#694107}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f09819;border-color:#e18b0f}.btn-warning .badge{color:#f09819;background-color:#fff}.btn-danger{color:#fff;background-color:#ff512f;border-color:#ff3c16}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#fb2900;border-color:#951800}.btn-danger:hover{color:#fff;background-color:#fb2900;border-color:#d72300}.btn-danger.active,.btn-danger:active,.open>.btn-danger.dropdown-toggle{color:#fff;background-color:#fb2900;border-color:#d72300;background-image:none}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.btn-danger.dropdown-toggle.focus,.open>.btn-danger.dropdown-toggle:focus,.open>.btn-danger.dropdown-toggle:hover{color:#fff;background-color:#d72300;border-color:#951800}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#ff512f;border-color:#ff3c16}.btn-danger .badge{color:#ff512f;background-color:#fff}.btn-link{color:#2196f3;font-weight:400;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#0a6ebd;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-lg{padding:10px 16px;font-size:18px;line-height:1.33333;border-radius:6px}.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-property:height,visibility;transition-property:height,visibility;-webkit-transition-duration:.35s;transition-duration:.35s;-webkit-transition-timing-function:ease;transition-timing-function:ease}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;font-size:14px;text-align:left;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9.5px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.57143;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{text-decoration:none;color:#262626;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;outline:0;background-color:#2196f3}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);cursor:not-allowed}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{left:auto;right:0}.dropdown-menu-left{left:0;right:auto}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.57143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px dashed;border-bottom:4px solid\\9;content:\"\"}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-left:0;padding-right:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.input-group-addon.btn{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.input-group-addon.btn{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{margin-bottom:0;padding-left:0;list-style:none}.nav:after,.nav:before{content:\" \";display:table}.nav:after{clear:both}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;background-color:transparent;cursor:not-allowed}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#2196f3}.nav .nav-divider{height:1px;margin:9.5px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #f2f2f2}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.57143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #f2f2f2}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;background-color:#fff;border:1px solid #f2f2f2;border-bottom-color:transparent;cursor:default}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#2196f3}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified,.nav-tabs.nav-justified{width:100%}.nav-justified>li,.nav-tabs.nav-justified>li{float:none}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}.nav-tabs-justified,.nav-tabs.nav-justified{border-bottom:0}.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #f2f2f2}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:21px;border:1px solid transparent}.navbar:after,.navbar:before{content:\" \";display:table}.navbar:after{clear:both}.navbar-header:after,.navbar-header:before{content:\" \";display:table}.navbar-header:after{clear:both}.navbar-collapse{overflow-x:visible;padding-right:15px;padding-left:15px;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1);-webkit-overflow-scrolling:touch}.navbar-collapse:after,.navbar-collapse:before{content:\" \";display:table}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}.navbar-static-top{z-index:1000;border-width:0 0 1px}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:14.5px 15px;font-size:18px;line-height:21px;height:50px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}.navbar-toggle{position:relative;float:right;margin-right:15px;padding:10px;margin-top:8px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:3px}.navbar-nav{margin:7.25px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:21px}.navbar-form{padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);margin:7.5px -15px}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-radius:4px 4px 0 0}.navbar-btn{margin-top:7.5px;margin-bottom:7.5px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:14.5px;margin-bottom:14.5px}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{background-color:#e7e7e7;color:#555}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#090909}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>li>a,.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{background-color:#090909;color:#fff}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.pager{padding-left:0;margin:21px 0;list-style:none;text-align:center}.pager:after,.pager:before{content:\" \";display:table}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;background-color:#fff;cursor:not-allowed}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;color:#fff;line-height:1;vertical-align:middle;white-space:nowrap;text-align:center;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#2196f3;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.thumbnail{display:block;padding:4px;margin-bottom:21px;line-height:1.57143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto;margin-left:auto;margin-right:auto}.thumbnail .caption{padding:9px;color:#333}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#2196f3}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{zoom:1;overflow:hidden}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle,.media-middle .media-body,.media-middle .media-left,.media-middle .media-right{vertical-align:middle}.media-bottom,.media-bottom .media-body,.media-bottom .media-left,.media-bottom .media-right{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;left:0;bottom:0;height:100%;width:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:24px;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:0 0;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{display:none;overflow:hidden;position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);transform:translate(0,-25%);-webkit-transition:-webkit-transform .3s ease-out;transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;border-radius:6px;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.05);box-shadow:0 3px 9px rgba(0,0,0,.05);background-clip:padding-box;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header:after,.modal-header:before{content:\" \";display:table}.modal-header:after{clear:both}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.57143}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:after,.modal-footer:before{content:\" \";display:table}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-left:5px;margin-bottom:0}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.tooltip{position:absolute;z-index:1070;display:block;font-family:PingHei,\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.57143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:12px;opacity:0;filter:alpha(opacity=0)}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{margin-top:-3px;padding:5px 0}.tooltip.right{margin-left:3px;padding:0 5px}.tooltip.bottom{margin-top:3px;padding:5px 0}.tooltip.left{margin-left:-3px;padding:0 5px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{bottom:0;right:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-print,.visible-print-block,.visible-print-inline,.visible-print-inline-block,.visible-sm,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}/*! * IE10 viewport hack for Surface/desktop Windows 8 bug * Copyright 2014-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */@-o-viewport{width:device-width}@viewport{width:device-width}::-webkit-scrollbar{width:6px;height:4px;background:0 0}::-webkit-scrollbar-thumb{background:rgba(0,0,0,.15)}::-webkit-scrollbar-thumb:window-inactive{background:rgba(0,0,0,.1)}::-webkit-scrollbar-thumb:vertical{height:4px;background:rgba(0,0,0,.15)}::-webkit-scrollbar-thumb:horizontal{width:4px;background:rgba(0,0,0,.15)}::-webkit-scrollbar-thumb:vertical:hover{background-color:rgba(0,0,0,.3)}::-webkit-scrollbar-thumb:vertical:active{background-color:rgba(0,0,0,.5)}::-webkit-scrollbar-track{background:rgba(0,0,0,.1);-webkit-box-shadow:inset 0 0 3px rgba(0,0,0,.1);box-shadow:inset 0 0 3px rgba(0,0,0,.1)}::-webkit-scrollbar-track-piece{background:rgba(0,0,0,.15)}body,html{position:relative;overflow-x:hidden}body{padding-right:0!important;font-family:PingHei,\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif;font-size:14px;line-height:1.57143;color:#333;background-color:#fff}a{color:#333;text-decoration:none}a:focus,a:hover{color:#0a6ebd;text-decoration:none}.active>a,a.active{color:#0a6ebd}.btn,button,input,select,textarea{outline:0!important}.btn:active,.btn:focus,.btn:hover,button:active,button:focus,button:hover,input:active,input:focus,input:hover,select:active,select:focus,select:hover,textarea:active,textarea:focus,textarea:hover{outline:0!important}canvas,iframe,img,svg,video{max-width:100%;height:auto}.clear{height:0;font-size:0;line-height:0;overflow:hidden;clear:both}.clearfix:after,.clearfix:before{content:\" \";display:table;line-height:0;content:\"\"}.clearfix:after{clear:both}.clearfix{*zoom:1}.clickable{cursor:pointer}.scrollable{overflow-x:hidden;overflow-y:auto}.transform-no{-ms-transform:none!important;-webkit-transform:none!important;transform:none!important}.text-dark{color:#333!important}.text-grey{color:#999!important}.text-white{color:#fff!important}.text-white a:hover,.text-white a:hover i,.text-white:hover{color:rgba(255,255,255,.8)}.text-white a.list-group-item.active i{color:#fff}.text-white .accordion-list p{font-size:12px;height:84px;line-height:21px;color:rgba(255,255,255,.8)}.bg-no{background:0 0!important}.bg-alpha{background-color:transparent!important}.bg-inverse,.bg-inverse a{color:#fff}.btn.bg-inverse.focus,.btn.bg-inverse:focus,.btn.bg-inverse:hover{color:rgba(255,255,255,.8)}.bg{background-color:#f6f6f6!important}.z-no{z-index:inherit}.z1{z-index:1}.z2{z-index:2}.z3{z-index:3}.z4{z-index:4}.zmin{z-index:-1}.zmax{z-index:999}.m{margin:5px!important}.m-no{margin:0!important}.m-0x{margin:10px!important}.m-1x{margin:15px!important}.m-2x{margin:20px!important}.m-3x{margin:30px!important}.m-4x{margin:60px!important}.m-5x{margin:100px!important}.mv{margin-top:5px!important;margin-bottom:5px!important}.mv-no{margin-top:0!important;margin-bottom:0!important}.mv-0x{margin-top:10px!important;margin-bottom:10px!important}.mv-1x{margin-top:15px!important;margin-bottom:15px!important}.mv-2x{margin-top:20px!important;margin-bottom:20px!important}.mv-3x{margin-top:30px!important;margin-bottom:30px!important}.mv-4x{margin-top:60px!important;margin-bottom:60px!important}.mv-5x{margin-top:100px!important;margin-bottom:100px!important}.mh{margin-left:5px!important;margin-right:5px!important}.mh-no{margin-left:0!important;margin-right:0!important}.mh-0x{margin-left:10px!important;margin-right:10px!important}.mh-1x{margin-left:15px!important;margin-right:15px!important}.mh-2x{margin-left:20px!important;margin-right:20px!important}.mh-3x{margin-left:30px!important;margin-right:30px!important}.mh-4x{margin-left:60px!important;margin-right:60px!important}.mh-5x{margin-left:100px!important;margin-right:100px!important}.mt{margin-top:5px!important}.mt-no{margin-top:0!important}.mt-0x{margin-top:10px!important}.mt-1x{margin-top:15px!important}.mt-2x{margin-top:20px!important}.mt-3x{margin-top:30px!important}.mt-4x{margin-top:60px!important}.mt-5x{margin-top:100px!important}.mb{margin-bottom:5px!important}.mb-no{margin-bottom:0!important}.mb-0x{margin-bottom:10px!important}.mb-1x{margin-bottom:15px!important}.mb-2x{margin-bottom:20px!important}.mb-3x{margin-bottom:30px!important}.mb-4x{margin-bottom:60px!important}.mb-5x{margin-bottom:100px!important}.ml{margin-left:5px!important}.ml-no{margin-left:0!important}.ml-0x{margin-left:10px!important}.ml-1x{margin-left:15px!important}.ml-2x{margin-left:20px!important}.ml-3x{margin-left:30px!important}.ml-4x{margin-left:60px!important}.ml-5x{margin-left:100px!important}.mr{margin-right:5px!important}.mr-no{margin-right:0!important}.mr-0x{margin-right:10px!important}.mr-1x{margin-right:15px!important}.mr-2x{margin-right:20px!important}.mr-3x{margin-right:30px!important}.mr-4x{margin-right:60px!important}.mr-5x{margin-right:100px!important}.p{padding:5px!important}.p-no{padding:0!important}.p-0x{padding:10px!important}.p-1x{padding:15px!important}.p-2x{padding:20px!important}.p-3x{padding:30px!important}.p-4x{padding:60px!important}.p-5x{padding:100px!important}.pv{padding-top:5px!important;padding-bottom:5px!important}.pv-no{padding-top:0!important;padding-bottom:0!important}.pv-0x{padding-top:10px!important;padding-bottom:10px!important}.pv-1x{padding-top:15px!important;padding-bottom:15px!important}.pv-2x{padding-top:20px!important;padding-bottom:20px!important}.pv-3x{padding-top:30px!important;padding-bottom:30px!important}.pv-4x{padding-top:60px!important;padding-bottom:60px!important}.pv-5x{padding-top:100px!important;padding-bottom:100px!important}.ph{padding-left:5px!important;padding-right:5px!important}.ph-no{padding-left:0!important;padding-right:0!important}.ph-0x{padding-left:10px!important;padding-right:10px!important}.ph-1x{padding-left:15px!important;padding-right:15px!important}.ph-2x{padding-left:20px!important;padding-right:20px!important}.ph-3x{padding-left:30px!important;padding-right:30px!important}.ph-4x{padding-left:60px!important;padding-right:60px!important}.ph-5x{padding-left:100px!important;padding-right:100px!important}.pt{padding-top:5px!important}.pt-no{padding-top:0!important}.pt-0x{padding-top:10px!important}.pt-1x{padding-top:15px!important}.pt-2x{padding-top:20px!important}.pt-3x{padding-top:30px!important}.pt-4x{padding-top:60px!important}.pt-5x{padding-top:100px!important}.pb{padding-bottom:5px!important}.pb-no{padding-bottom:0!important}.pb-0x{padding-bottom:10px!important}.pb-1x{padding-bottom:15px!important}.pb-2x{padding-bottom:20px!important}.pb-3x{padding-bottom:30px!important}.pb-4x{padding-bottom:60px!important}.pb-5x{padding-bottom:100px!important}.pl{padding-left:5px!important}.pl-no{padding-left:0!important}.pl-0x{padding-left:10px!important}.pl-1x{padding-left:15px!important}.pl-2x{padding-left:20px!important}.pl-3x{padding-left:30px!important}.pl-4x{padding-left:60px!important}.pl-5x{padding-left:100px!important}.pr{padding-right:5px!important}.pr-no{padding-right:0!important}.pr-0x{padding-right:10px!important}.pr-1x{padding-right:15px!important}.pr-2x{padding-right:20px!important}.pr-3x{padding-right:30px!important}.pr-4x{padding-right:60px!important}.pr-5x{padding-right:100px!important}.b{border:1px solid #ddd}.b-no{border:none!important}.r-rounded{border-radius:2em!important;padding-left:1em;padding-right:1em;overflow:hidden}.r-circle{border-radius:50%!important;overflow:hidden}.r-no{border-radius:0!important}.w-auto{width:auto!important}.w-full,.w-full img{width:100%!important;max-width:100%!important}.lh-2x{line-height:2}.text-break{word-break:break-all!important;word-wrap:break-word!important}.text-undecorate{text-decoration:none!important}.text-underline{text-decoration:underline!important}.text-through{text-decoration:line-through!important}.text-sub{vertical-align:sub!important}.text-super{vertical-align:super!important}.text-indent,.text-indent div,.text-indent p{text-indent:2em}.text-nowrap{max-width:100%;overflow:hidden!important;text-overflow:ellipsis!important;white-space:nowrap!important;word-wrap:normal!important;-moz-binding:url(ellipsis.xml)}.text-nowrap-1x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:1;-webkit-box-flex:1;line-height:24px;height:24px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-2x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:2;line-height:24px;height:48px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-3x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:3;line-height:24px;height:72px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-4x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:4;line-height:24px;height:96px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-5x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:5;line-height:24px;height:120px;word-break:break-all!important;word-wrap:break-word!important}.thumb{width:16px;display:inline-block;overflow:hidden}.thumb-xs{width:32px;display:inline-block;overflow:hidden}.thumb-sm{width:48px;display:inline-block;overflow:hidden}.thumb-md{width:64px;display:inline-block;overflow:hidden}.thumb-lg{width:96px;display:inline-block;overflow:hidden}.thumb-xl{width:128px;display:inline-block;overflow:hidden}.thumb-wrapper{padding:2px;border:1px solid #dbe2e7}.thumb img,.thumb-0x img,.thumb-1x img,.thumb-2x img,.thumb-3x img,.thumb-4x img,.thumb-5x img,.thumb-6x img,.thumb-btn img{height:auto;max-width:100%;vertical-align:middle}.img-gray img,img.img-gray{-webkit-filter:grayscale(100%);-moz-filter:grayscale(100%);-ms-filter:grayscale(100%);-o-filter:grayscale(100%);filter:grayscale(100%);-webkit-filter:gray;filter:gray}.img-gray:hover img,img.img-gray:hover{-webkit-filter:grayscale(0);-moz-filter:grayscale(0);-ms-filter:grayscale(0);-o-filter:grayscale(0);filter:grayscale(0)}.img-rotate img,img.img-rotate{-webkit-transition:-webkit-transform .3s ease;transition:-webkit-transform .3s ease;transition:transform .3s ease;transition:transform .3s ease,-webkit-transform .3s ease}.img-rotate:hover img,img.img-rotate:hover{transform:rotate(360deg);-ms-transform:rotate(360deg);-moz-transform:rotate(360deg);-webkit-transform:rotate(360deg);-o-transform:rotate(360deg)}.img-burn img,img.img-burn{position:relative;-webkit-transition:all .8s ease-in-out;transition:all .8s ease-in-out}.img-burn:hover img,img.img-burn:hover{-webkit-transform:scale(1.2) rotate(2deg);-ms-transform:scale(1.2) rotate(2deg);transform:scale(1.2) rotate(2deg)}.hover-up img,img.hover-up{position:relative;top:0;-webkit-transition:top .3s ease-out;transition:top .3s ease-out}.hover-up:hover img,img.hover-up:hover{top:-6px}.active>.auto .text,.active>.text,.collapsed>.auto .text,.collapsed>.text,.text-active{display:none!important}.active>.auto .text-active,.active>.text-active,.collapsed>.auto .text-active,.collapsed>.text-active{display:inline-block!important}.shadow-no{-webkit-box-shadow:none;box-shadow:none}.hover-shadow:hover,.shadow{-webkit-box-shadow:0 1px 2px rgba(0,0,0,.05);box-shadow:0 1px 2px rgba(0,0,0,.05)}.radio{margin-left:20px}.radio label{display:inline-block;position:relative;padding-left:5px}.radio label:before{content:\"\";display:inline-block;position:absolute;width:17px;height:17px;left:0;margin-left:-20px;border:1px solid #ccc;border-radius:50%;background-color:#fff;-webkit-transition:border .15s ease-in-out;transition:border .15s ease-in-out}.radio label:after{display:inline-block;position:absolute;content:\" \";width:11px;height:11px;left:3px;top:3px;margin-left:-20px;border-radius:50%;background-color:#555;-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);-webkit-transition:-webkit-transform .1s cubic-bezier(.8,-.33,.2,1.33);transition:-webkit-transform .1s cubic-bezier(.8,-.33,.2,1.33);transition:transform .1s cubic-bezier(.8,-.33,.2,1.33);transition:transform .1s cubic-bezier(.8,-.33,.2,1.33),-webkit-transform .1s cubic-bezier(.8,-.33,.2,1.33)}.radio input[type=radio]{display:none}.radio input[type=radio]:checked+label:after{-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1)}.radio input[type=radio]:disabled+label{opacity:.65}.radio input[type=radio]:disabled+label:before{cursor:not-allowed}.hover-grow{-webkit-transition:all .2s linear;transition:all .2s linear}.hover-grow:hover{-webkit-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0)}fieldset{padding:0;margin:0;border:0;min-width:0}legend{display:block;width:100%;padding:0;margin-bottom:21px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=checkbox]:focus,input[type=file]:focus,input[type=radio]:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.57143;color:#555}.form-control{display:block;width:100%;height:35px;padding:6px 12px;font-size:14px;line-height:1.57143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s,-webkit-box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control::-ms-expand{border:0;background-color:transparent}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}.list-disc{list-style:disc!important}.list-alpha{list-style:upper-alpha!important}.list-decimal{list-style:decimal!important}.list-outside{list-style-position:outside!important}.list-inside{list-style-position:inside!important}.list-square{list-style:none}.list-square li:before{color:#ccc;content:\"▪\";font-size:12px;margin-right:6px;-webkit-transition:.2s ease;transition:.2s ease}.list-circle-num,.list-square-num{counter-reset:list1}.list-circle-num>li,.list-square-num>li{list-style:none;margin-bottom:13px}.list-circle-num>li:before{counter-increment:list1;content:counter(list1) \"\";width:24px;height:24px;text-align:center;border-radius:12px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-square-num>li:before{counter-increment:list1;content:counter(list1) \"\";width:24px;height:24px;text-align:center;border-radius:5px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-circle-num>li>ol,.list-square-num>li>ol{counter-reset:list2}.list-circle-num>li>ol>li,.list-square-num>li>ol>li{margin-bottom:13px}.list-circle-num>li>ol>li:before{counter-increment:list2;content:counter(list1) \".\" counter(list2) \"\";width:24px;height:24px;text-align:center;border-radius:12px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-square-num>li>ol>li:before{counter-increment:list2;content:counter(list1) \".\" counter(list2) \"\";width:24px;height:24px;text-align:center;border-radius:5px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-circle-num[class*=list-full]>li::before,.list-square-num[class*=list-full]>li::before{background:#de4a32;color:#fff}.label{display:inline-block;padding:.3em .6em;font-size:75%;font-weight:700;line-height:1;color:#777;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label:empty{display:none}.btn .label{position:relative;top:-1px}a.label:focus,a.label:hover{color:#333;text-decoration:none;cursor:pointer}.label-default{background-color:#eee}.label-default[href]:focus,.label-default[href]:hover{background-color:#d5d5d5}.label-primary{background-color:#2196f3;color:#fff}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#0c7cd5}.label-success{background-color:#5cb85c;color:#fff}.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}.label-info{background-color:#56ccf2;color:#fff}.label-info[href]:focus,.label-info[href]:hover{background-color:#27beee}.label-warning{background-color:#f09819;color:#fff}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#c97c0d}.label-danger{background-color:#ff512f;color:#fff}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#fb2900}.panel{margin-bottom:21px;background-color:#fff;border:1px solid #f2f2f2}.panel .article-title{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:2;font-size:18px;line-height:32px;height:64px;word-break:break-all!important;word-wrap:break-word!important}.panel-body{padding:15px}.panel-body:after,.panel-body:before{content:\" \";display:table}.panel-body:after{clear:both}.panel-heading{padding:10px 15px;border-bottom:1px solid #f2f2f2}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit;text-decoration:none}.panel-footer{padding:10px 15px;border-top:1px solid #f2f2f2;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel.b-no{border:0;margin-bottom:0}.panel.b-no .panel-body,.panel.b-no .panel-footer,.panel.b-no .panel-heading{border:0;padding-left:0;padding-right:0}.panel-badger{position:relative}.panel-badger:after{content:\"\";position:absolute;top:0;width:0;height:0;border-width:4px;border-style:solid;border-color:#777 transparent transparent #777}.panel-badger:hover:after{border-color:#2196f3 transparent transparent #2196f3}.badger-danger:after{border-color:#ff512f transparent transparent #ff512f}.badger-warning:after{border-color:#f09819 transparent transparent #f09819}.badger-success:after{border-color:#5cb85c transparent transparent #5cb85c}.badger-info:after{border-color:#56ccf2 transparent transparent #56ccf2}.badger-primary:after{border-color:#2196f3 transparent transparent #2196f3}.bg-gradient-info span,.bg-gradient-info:before{background:#56ccf2;background:-webkit-linear-gradient(left,#56ccf2 0,#2f80ed 80%,#2f80ed 100%);background:-webkit-gradient(linear,left top,right top,from(#56ccf2),color-stop(80%,#2f80ed),to(#2f80ed));background:linear-gradient(to right,#56ccf2 0,#2f80ed 80%,#2f80ed 100%)}.bg-gradient-primary span,.bg-gradient-primary:before{background:#396afc;background:-webkit-linear-gradient(left,#396afc 0,#2948ff 80%,#2948ff 100%);background:-webkit-gradient(linear,left top,right top,from(#396afc),color-stop(80%,#2948ff),to(#2948ff));background:linear-gradient(to right,#396afc 0,#2948ff 80%,#2948ff 100%)}.bg-gradient-success span,.bg-gradient-success:before{background:#44ea76;background:-webkit-linear-gradient(left,#44ea76 0,#39fad7 80%,#39fad7 100%);background:-webkit-gradient(linear,left top,right top,from(#44ea76),color-stop(80%,#39fad7),to(#39fad7));background:linear-gradient(to right,#44ea76 0,#39fad7 80%,#39fad7 100%)}.bg-gradient-warning span,.bg-gradient-warning:before{background:#ff512f;background:-webkit-linear-gradient(left,#ff512f 0,#f09819 80%,#f09819 100%);background:-webkit-gradient(linear,left top,right top,from(#ff512f),color-stop(80%,#f09819),to(#f09819));background:linear-gradient(to right,#ff512f 0,#f09819 80%,#f09819 100%)}.bg-gradient-danger span,.bg-gradient-danger:before{background:#ff512f;background:-webkit-linear-gradient(left,#ff512f 0,#dd2476 80%,#dd2476 100%);background:-webkit-gradient(linear,left top,right top,from(#ff512f),color-stop(80%,#dd2476),to(#dd2476));background:linear-gradient(to right,#ff512f 0,#dd2476 80%,#dd2476 100%)}.btn-fancy{display:inline-block;font-size:17px;letter-spacing:.03em;text-transform:uppercase;color:#fff;position:relative}.btn-fancy:before{content:'';display:inline-block;height:40px;position:absolute;bottom:-5px;left:30px;right:30px;z-index:-1;-webkit-filter:blur(20px) brightness(.95);filter:blur(20px) brightness(.95);-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition:all .3s ease-out;transition:all .3s ease-out}.btn-fancy i{margin-top:-1px;margin-right:20px;font-size:1.265em;vertical-align:middle}.btn-fancy span{display:inline-block;padding:18px 60px;border-radius:50em;position:relative;z-index:2;will-change:transform,filter;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition:all .3s ease-out;transition:all .3s ease-out}.btn-fancy:active,.btn-fancy:focus{color:#fff}.btn-fancy:hover{color:#fff}.btn-fancy:hover span{-webkit-filter:brightness(1.05) contrast(1.05);filter:brightness(1.05) contrast(1.05);-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95)}.btn-fancy:hover:before{bottom:0;-webkit-filter:blur(10px) brightness(.95);filter:blur(10px) brightness(.95)}.btn-fancy.pop-onhover:before{opacity:0;bottom:10px}.btn-fancy.pop-onhover:hover:before{bottom:-7px;opacity:1;-webkit-filter:blur(20px);filter:blur(20px)}.btn-fancy.pop-onhover:hover span{-webkit-transform:scale(1.04);-ms-transform:scale(1.04);transform:scale(1.04)}.btn-fancy.pop-onhover:hover:active span{-webkit-filter:brightness(1) contrast(1);filter:brightness(1) contrast(1);-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1);-webkit-transition:all .15s ease-out;transition:all .15s ease-out}.btn-fancy.pop-onhover:hover:active:before{bottom:0;-webkit-filter:blur(10px) brightness(.95);filter:blur(10px) brightness(.95);-webkit-transition:all .2s ease-out;transition:all .2s ease-out}table,table>tbody>tr>td,table>tbody>tr>th,table>tfoot>tr>td,table>tfoot>tr>th,table>thead>tr>td,table>thead>tr>th{border:1px solid #f2f2f2}table>tbody>tr:nth-of-type(odd){background-color:#f8f8f8}table>tbody>tr:hover{background-color:#fbfbfb}table{border-collapse:collapse;border-spacing:0;padding:0;width:100%;max-width:100%;margin:10px 0}table>tbody>tr>td,table>tbody>tr>th,table>tfoot>tr>td,table>tfoot>tr>th,table>thead>tr>td,table>thead>tr>th{padding:6px 13px}table>tbody+tbody{border-top:2px solid #f2f2f2}table table{background-color:#fff}.modal button.close{position:absolute;right:10px;top:10px;z-index:99}.modal-small .modal-dialog{width:480px}@font-face{font-family:icon;src:url(iconfont.eot?t=1525101408939);src:url(iconfont.eot?t=1525101408939#iefix) format(\"embedded-opentype\"),url(\"data:application/x-font-woff;charset=utf-8;base64,\") format(\"woff\"),url(iconfont.ttf?t=1525101408939) format(\"truetype\"),url(iconfont.svg?t=1525101408939#icon) format(\"svg\")}.icon{display:inline-block;font:14px/1 icon;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-webkit-text-stroke-width:.2px;-moz-osx-font-smoothing:grayscale}.icon-diandian:before{content:\"\\e63a\"}.icon-huaban:before{content:\"\\e63c\"}.icon-code-fork:before{content:\"\\e67a\"}.icon-more:before{content:\"\\e6c0\"}.icon-zhihu:before{content:\"\\e6d1\"}.icon-linkedin:before{content:\"\\e724\"}.icon-eye-fill:before{content:\"\\e64f\"}.icon-stackexchange:before{content:\"\\e8b2\"}.icon-tag:before{content:\"\\e6a3\"}.icon-starfish:before{content:\"\\e62e\"}.icon-home:before{content:\"\\e660\"}.icon-search:before{content:\"\\e61c\"}.icon-project:before{content:\"\\e63e\"}.icon-dialog:before{content:\"\\e613\"}.icon-twitter:before{content:\"\\ec9c\"}.icon-github:before{content:\"\\e70a\"}.icon-time:before{content:\"\\e669\"}.icon-voice:before{content:\"\\e65a\"}.icon-google:before{content:\"\\e601\"}.icon-weibo:before{content:\"\\e64b\"}.icon-segmentfault:before{content:\"\\e610\"}.icon-star-fill:before{content:\"\\e630\"}.icon-phone:before{content:\"\\e68a\"}.icon-cup-fill:before{content:\"\\e614\"}.icon-jiaju:before{content:\"\\e671\"}.icon-qzone:before{content:\"\\e603\"}.icon-home-fill:before{content:\"\\e617\"}.icon-clock:before{content:\"\\e618\"}.icon-file:before{content:\"\\e66f\"}.icon-comment:before{content:\"\\e61a\"}.icon-cup:before{content:\"\\e62c\"}.icon-share:before{content:\"\\e66a\"}.icon-star-half:before{content:\"\\e62f\"}.icon-star:before{content:\"\\e619\"}.icon-tencent-weibo:before{content:\"\\e602\"}.icon-book:before{content:\"\\e79d\"}.icon-bitbucket:before{content:\"\\e64e\"}.icon-facebook:before{content:\"\\e6e3\"}.icon-email:before{content:\"\\e667\"}.icon-zcool:before{content:\"\\e60c\"}.icon-social-media:before{content:\"\\e68b\"}.icon-douban:before{content:\"\\e60f\"}.icon-coding:before{content:\"\\e600\"}.icon-github-fill:before{content:\"\\e71d\"}.icon-qq:before{content:\"\\e611\"}.icon-shu-fill:before{content:\"\\e615\"}.icon-pinterest:before{content:\"\\e697\"}.icon-tags:before{content:\"\\e6c4\"}.icon-bill:before{content:\"\\e61b\"}.icon-shu:before{content:\"\\e616\"}.icon-book-shelf:before{content:\"\\e60d\"}.icon-target:before{content:\"\\e695\"}.icon-profile:before{content:\"\\e6e2\"}.icon-alipay:before{content:\"\\e938\"}.icon-skype:before{content:\"\\e604\"}.icon-juejin:before{content:\"\\e605\"}.icon-code:before{content:\"\\e73f\"}.icon-list:before{content:\"\\e61e\"}.icon-map-marker:before{content:\"\\e609\"}.icon-stackoverflow:before{content:\"\\e606\"}.icon-hourglass:before{content:\"\\e60e\"}.icon-behance:before{content:\"\\e67b\"}.icon-folder-open:before{content:\"\\e6b4\"}.icon-folder:before{content:\"\\e60a\"}.icon-menu:before{content:\"\\e607\"}.icon-users:before{content:\"\\e60b\"}.icon-eye:before{content:\"\\e657\"}.icon-wechat:before{content:\"\\e65e\"}.icon-number:before{content:\"\\e658\"}.icon-gitlab:before{content:\"\\e67c\"}.icon-rss:before{content:\"\\e63d\"}.icon-archives:before{content:\"\\e62d\"}.icon-68design:before{content:\"\\e608\"}.icon-dribble:before{content:\"\\e982\"}.icon-wepay:before{content:\"\\e629\"}.icon-youdao-note:before{content:\"\\e8a6\"}.icon-book-fill:before{content:\"\\e659\"}.icon-hezuo:before{content:\"\\e6e5\"}.icon-link:before{content:\"\\e635\"}.icon-archives-fill:before{content:\"\\e694\"}.icon-anchor:before{content:\"\\e858\"}.icon-angle-down:before{content:\"\\e85e\"}.icon-angle-left:before{content:\"\\e85f\"}.icon-angle-up:before{content:\"\\e860\"}.icon-angle-right:before{content:\"\\e862\"}.icon-calendar:before{content:\"\\e895\"}.icon-calendar-check:before{content:\"\\e896\"}.icon-calendar-minus:before{content:\"\\e897\"}.icon-calendar-plus:before{content:\"\\e899\"}.icon-calendar-times:before{content:\"\\e89a\"}.icon-close:before{content:\"\\e8c4\"}.icon-delicious:before{content:\"\\e8e2\"}.icon-plus:before{content:\"\\e99d\"}.icon-gg:before{content:\"\\e6fd\"}.icon-friendship:before{content:\"\\e612\"}.icon-gitee:before{content:\"\\e61d\"}pre .comment{color:#8e908c}pre .attribute,pre .css .class,pre .css .id,pre .css .pseudo,pre .html .doctype,pre .regexp,pre .ruby .constant,pre .tag,pre .variable,pre .xml .doctype,pre .xml .pi,pre .xml .tag .title{color:#c82829}pre .built_in,pre .constant,pre .literal,pre .number,pre .params,pre .preprocessor{color:#f5871f}pre .css .rules .attribute,pre .header,pre .inheritance,pre .ruby .class .title,pre .ruby .symbol,pre .string,pre .value,pre .xml .cdata{color:#718c00}pre .css .hexcolor,pre .title{color:#3e999f}pre .coffeescript .title,pre .function,pre .javascript .title,pre .js .title,pre .perl .sub,pre .python .decorator,pre .python .title,pre .ruby .function .title,pre .ruby .title .keyword{color:#4271ae}pre .javascript .function,pre .js .function,pre .keyword{color:#8959a8}.highlight,pre{background:#fafafa;margin:10px 0;padding:15px 10px;overflow:auto;font-size:13px;color:#4d4d4c;line-height:1.5}.gist .gist-file .gist-data .line-numbers,.highlight .gutter pre{color:#666}code{text-shadow:0 1px #fff;padding:.2em .4em;margin:0 .3em;color:#555;background:#eee;border-radius:3px;font-size:85%}pre code{background:0 0;text-shadow:none;padding:0}.highlight{position:relative;padding:32px 10px 0;border-radius:4px}.highlight:before{display:block;content:' ';height:32px;position:absolute;top:0;left:0;right:0;background-color:#f6f6f6;padding:0 10px;border-top-left-radius:4px;border-top-right-radius:4px}.highlight:after{content:\" \";position:absolute;border-radius:50%;background:#fc625d;width:10px;height:10px;top:0;left:15px;margin-top:11px;-webkit-box-shadow:20px 0 #fdbc40,40px 0 #35cd4b;box-shadow:20px 0 #fdbc40,40px 0 #35cd4b}.highlight pre{border:none;margin:0}.highlight table{position:relative;border:none;width:100%;margin:0;padding:0}.highlight tr{border:none}.highlight td,.highlight th{border:none;padding:0}.highlight td.code,.highlight th.code{width:100%!important}.highlight figcaption{font-size:.85em;color:#8e908c;line-height:1em;margin-bottom:1em}.highlight figcaption a{float:right}.highlight .line{height:24px;line-height:24px}.highlight .gutter pre{text-align:right;padding-right:0;padding-left:0;color:#ccc}.header{background-color:#fbfbfb}.sidebar{background-color:#fdfdfd}.sidebar .slimContent{padding:20px}.main{position:relative;min-height:100vh;padding:15px}.main:after,.main:before{content:\" \";display:table}.main:after{clear:both}.footer{padding:20px;background-color:#fbfbfb;color:#999}body.main-center .sidebar,body.main-left .header,body.main-left .sidebar{left:auto;right:0;border-left:1px solid #f6f6f6;border-right:0}body.main-left .footer{left:auto;right:0}body.no-sidebar .sidebar{display:none!important}.main-nav{float:none!important}.main-nav>li{display:block;width:100%;position:relative}.main-nav>li>a{color:#555}.main-nav>li .menu-title{margin-left:15px}.main-nav>.active a,.main-nav>.active a:focus,.main-nav>.active a:hover{color:#333;background:#f4f4f4}.profile-block{padding:20px 15px 10px}#avatar{width:64px;height:64px;display:inline-block}#avatar img{width:100%;max-height:100%;height:auto!important}#name{font-size:18px;margin-top:10px;margin-bottom:0}#title{font-size:13px;margin-top:5px;margin-bottom:5px}.sidebar-form{border-radius:3px;border:1px solid #eee;margin:0 15px 15px}.sidebar-form .btn,.sidebar-form input[type=text]{-webkit-box-shadow:none;box-shadow:none;background-color:transparent;border:1px solid transparent;height:32px}.sidebar-form .btn:focus,.sidebar-form input[type=text]:focus{outline:0}.sidebar-form input[type=text]{color:#666;border-radius:2px 0 0 2px}.sidebar-form input[type=text]:focus,.sidebar-form input[type=text]:focus+.input-group-btn .btn{background-color:#fff;color:#666}.sidebar-form .btn{color:#999;border-radius:0 2px 2px 0}.header .navbar-collapse{padding-left:0;padding-right:0}.header .navbar-collapse .navbar-nav{margin:0}.header .navbar-toggle .icon-bar{background-color:#2196f3}.main .pager{text-align:left;margin:10px 0}.main .pager .disabled{cursor:not-allowed}.main .pager>.page-number,.main .pager>a{line-height:32px;float:left}.main .pager a{color:#666;border:0;line-height:32px;padding:0}.main .pager a:link,.main .pager a:visited{background-color:transparent}.main .pager a:hover{color:#0a6ebd;background-color:transparent}.main .pager .prev{margin-right:10px}.main .pager .page-number.current{color:#2196f3}.main .pager .page-number+.next,.main .pager .page-number+.page-number{margin-left:10px}.main .total-article{margin:10px 0;line-height:32px;color:#999}.main .page-header{margin-top:0}.main .article-list article{border-bottom:1px solid #f2f2f2}.main .article-list article:last-child{border-bottom:0}.main .article-meta{font-size:13px;color:#999}.main .article-meta a{color:#999}.main .article-meta a:hover{color:#0a6ebd;text-decoration:none}.main .article-meta span+span{margin-left:10px}.main .content{min-height:85vh}.main.has-sticky .content{margin-bottom:70px}#comments .gitment-footer-container,#comments .gitment-footer-project-link{display:none!important}.panel .label,.widget .label{font-weight:400}.widget:after,.widget:before{content:\" \";display:table}.widget:after{clear:both}.widget .widget-title{font-size:18px;color:#000}.widget time{color:#999;font-size:12px;text-transform:uppercase}.widget p{margin-bottom:0}.widget ul{margin-left:0;padding-left:0;list-style:none}.widget .category-link{color:#0a6ebd}.archive-list-count,.category-list-count,.tag-list-count{padding-left:5px;color:#999;font-size:.85em}.archive-list-count:before,.category-list-count:before,.tag-list-count:before{content:\"(\"}.archive-list-count:after,.category-list-count:after,.tag-list-count:after{content:\")\"}.archive-list,.category-list,.tag-list{line-height:1.75}.archive-list li:before,.category-list li:before,.tag-list li:before{color:#ccc;content:\"▪\";font-size:12px;margin-right:6px;-webkit-transition:.2s ease;transition:.2s ease}.category-list-child{padding-left:15px}.recent-post-list li+li{margin-top:15px}.recent-post-list li .item-inner,.recent-post-list li .item-thumb{display:table-cell;vertical-align:middle}.recent-post-list li .item-thumb{opacity:1;padding-right:10px;-webkit-transition:all .2s ease;transition:all .2s ease}.recent-post-list li .item-thumb .thumb{width:50px;height:50px;display:block;position:relative;overflow:hidden}.recent-post-list li .item-thumb .thumb span{width:100%;height:100%;display:block}.recent-post-list li .item-thumb .thumb .thumb-image{position:absolute;background-size:cover;background-position:center}.recent-post-list li .item-thumb .thumb .thumb-none{background-image:url(../images/thumb-default.png);background-size:100% 100%}.recent-post-list li:hover .item-thumb{opacity:.8}.sidebar-toc.collapse{display:none!important}.sidebar-toc.in{display:block!important}.tagcloud a{display:inline-block;margin-bottom:.2em;padding:.3em .6em;font-size:75%!important;line-height:1;background-color:#eee;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.bar .pager .next>a,.bar .pager .next>span{float:none}.bar.bar-footer{position:relative;background-color:#fff;bottom:-15px}.bar.bar-footer:before{content:'';position:absolute;width:-webkit-calc(100% + 30px);width:calc(100% + 30px);height:52px;left:-15px;border-top:1px solid #f6f6f6;border-bottom:1px solid #fff;background-color:#fff}.bar .bar-inner{position:relative;z-index:9}.bar .bar-inner:after,.bar .bar-inner:before{content:\" \";display:table}.bar .bar-inner:after{clear:both}.bar .bar-right{margin:10px 0;float:right}.toggle-toc{cursor:pointer;margin-left:10px}.toggle-toc a{display:inline-block;line-height:32px;text-align:center}.footer .copyright{font-size:12px}.footer .copyright a{color:#999;text-decoration:none}.footer .copyright a:hover{color:#0a6ebd}.wave-icon{display:inline-block;position:relative}.wave-icon .wave-circle{display:block;border-radius:50%;background-color:transparent}.wave-icon .wave-circle:after,.wave-icon .wave-circle:before{content:'';border:10px solid #2196f3;background:#2196f3;border-radius:50%;position:absolute;top:50%;left:50%;z-index:1}.wave-icon .wave-circle:before{height:74px;width:74px;-webkit-animation:5s ease-out infinite pulse;animation:5s ease-out infinite pulse;margin-top:-37px;margin-left:-37px;opacity:0}.wave-icon .wave-circle:after{height:98px;width:98px;-webkit-animation:5s ease-out infinite pulse;animation:5s ease-out infinite pulse;margin-top:-49px;margin-left:-49px;opacity:.3}.wave-icon .icon{position:relative;display:block;width:50px;height:50px;line-height:50px;text-align:center;background-color:#2196f3;border-radius:50%;font-size:24px;color:#fff;z-index:2}.wave-icon.wave-icon-info .wave-circle:after,.wave-icon.wave-icon-info .wave-circle:before{border:10px solid #56ccf2;background:#56ccf2}.wave-icon.wave-icon-info .icon{background-color:#56ccf2}.wave-icon.wave-icon-primary .wave-circle:after,.wave-icon.wave-icon-primary .wave-circle:before{border:10px solid #2196f3;background:#2196f3}.wave-icon.wave-icon-primary .icon{background-color:#2196f3}.wave-icon.wave-icon-warning .wave-circle:after,.wave-icon.wave-icon-warning .wave-circle:before{border:10px solid #f09819;background:#f09819}.wave-icon.wave-icon-warning .icon{background-color:#f09819}.wave-icon.wave-icon-success .wave-circle:after,.wave-icon.wave-icon-success .wave-circle:before{border:10px solid #5cb85c;background:#5cb85c}.wave-icon.wave-icon-success .icon{background-color:#5cb85c}.wave-icon.wave-icon-danger .wave-circle:after,.wave-icon.wave-icon-danger .wave-circle:before{border:10px solid #ff512f;background:#ff512f}.wave-icon.wave-icon-danger .icon{background-color:#ff512f}@-webkit-keyframes pulse{0%{-webkit-transform:scale(0);opacity:0}25%{-webkit-transform:scale(0);opacity:.1}50%{-webkit-transform:scale(.1);opacity:.3}75%{-webkit-transform:scale(.5);opacity:.5}100%{-webkit-transform:scale(1);opacity:0}}.repo-list{list-style:none;padding-left:0}.repo{position:relative;list-style-type:none;border:1px solid #f2f2f2;margin-bottom:15px;overflow:hidden}.repo-title{padding:0 15px;margin:15px 0;font-size:16px;font-weight:600}.repo-body{display:-webkit-box;padding:0 15px;margin:0 0 20px;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:2;line-height:1.5em;height:3em;word-break:break-all!important;word-wrap:break-word!important}.repo-image{position:relative;display:table;width:101%;height:3px;margin:-1px -1px 15px;background-color:#666}.repo-meta{padding:0 15px;margin-top:5px;margin-bottom:15px;color:#777;font-size:12px;text-align:right}.repo-meta:after,.repo-meta:before{content:\" \";display:table}.repo-meta:after{clear:both}.repo-meta .meta+.meta{margin-left:15px}.text-collapsed{display:none}.collapsed .text-collapsed,.text-in{display:inline-block}.collapsed .text-in{display:none}.sub-header{padding-bottom:10px;border-bottom:1px solid #eee}.article-header{margin-bottom:20px}.article-footer{margin-top:20px}.collection{position:relative}.collection a.collection-item{display:block;-webkit-transition:.25s;transition:.25s;color:#777}.collection a:not(.active):hover{color:#333}.collection .collection-item{padding:8px 0;margin:0}.article-list .article-title{font-size:18px}.article-toc .toc-title{font-size:18px;color:#000}.article-toc .toc{list-style:none;padding-left:0;line-height:2}.article-toc .toc ol{list-style:none;padding-left:10px}.article-toc .toc .toc-item{position:relative}.article-toc .toc .toc-item .markdownIt-Anchor{position:absolute;left:0;right:0;top:0;padding:14px 0}.marked-body h1,.marked-body h2,.marked-body h3,.marked-body h4,.marked-body h5,.marked-body h6{margin-top:24px;margin-bottom:16px;font-weight:600;line-height:1.25}.marked-body h1{padding-bottom:.3em;font-size:2em;border-bottom:1px solid #f2f2f2}.marked-body h2{padding-bottom:.3em;font-size:1.5em;border-bottom:1px solid #f2f2f2}.marked-body a{color:#2196f3;text-decoration:none}.marked-body a:focus,.marked-body a:hover{color:#0a6ebd;text-decoration:none}.marked-body ol,.marked-body ul{padding-left:0;margin-left:20px}body.okayNav-loaded{overflow-x:hidden}.okayNav{position:relative}.okayNav:after,.okayNav:before{content:\" \";display:table}.okayNav:after{clear:both}.okayNav:not(.loaded){visibility:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.okayNav ul{float:left;padding-left:0}.okayNav ul li{display:inline-block;margin-left:15px}.okayNav a{position:relative;z-index:1;color:#2e2e33;font-weight:400}.okayNav a.active{color:#0a6ebd}.okayNav__nav--visible{overflow:hidden;white-space:nowrap}.okayNav__nav--visible li{display:inline-block;margin-left:15px}.okayNav__nav--visible li:first-child{margin-left:0}.okayNav__nav--visible a{display:block;-webkit-transition:color .2s cubic-bezier(.55,0,.1,1);transition:color .2s cubic-bezier(.55,0,.1,1)}.okayNav__nav--visible:empty~.okayNav__menu-toggle{top:0}.okayNav__nav--invisible{display:none;position:absolute;width:100%;top:24px;overflow-y:auto;-webkit-overflow-scrolling:touch;-webkit-box-shadow:0 1px 2px rgba(0,0,0,.05);box-shadow:0 1px 2px rgba(0,0,0,.05);padding-top:15px;padding-bottom:15px;background:#fff}.okayNav__nav--invisible li{display:inline-block}.okayNav__nav--invisible li a{display:block;padding:6px 15px;min-width:100px}.okayNav__nav--invisible.nav-left{left:0}.okayNav__nav--invisible.nav-right{right:0}.okayNav__nav--invisible.transition-enabled{-webkit-transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1),-webkit-transform .4s cubic-bezier(.55,0,.1,1)}.okayNav__nav--invisible.nav-open{display:block;z-index:99;border:1px solid #f2f2f2}.okayNav__menu-toggle{position:relative;z-index:1;float:right;cursor:pointer;-webkit-transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1),-webkit-transform .4s cubic-bezier(.55,0,.1,1)}.okayNav__menu-toggle.okay-invisible{position:absolute;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;opacity:0}.okayNav__menu-toggle span{background:#666;display:inline-block;width:2px;height:2px;margin:auto 1px;pointer-events:none;border-radius:50%;vertical-align:middle}.okayNav__menu-toggle.icon--active span{background:#0a6ebd}.okayNav a:hover{color:#0a6ebd}.social-links{list-style:none;padding:0;text-align:left}.social-links li{list-style:none;display:inline-block;margin-left:10px}.social-links li:first-child{margin-left:0}.header .social-links{padding:10px 20px}.footer .social-links{margin-bottom:5px}@font-face{font-family:socialshare;src:url(../fonts/iconfont.eot);src:url(../fonts/iconfont.eot?#iefix) format(\"embedded-opentype\"),url(../fonts/iconfont.woff) format(\"woff\"),url(../fonts/iconfont.ttf) format(\"truetype\"),url(../fonts/iconfont.svg#iconfont) format(\"svg\")}.social-share{display:inline-block;font-size:16px}.social-share a{position:relative;text-decoration:none;margin-left:16px;display:inline-block;outline:0;line-height:32px}.social-share .social-share-icon{position:relative;display:inline-block;height:32px;line-height:32px;color:#999;text-align:center;vertical-align:middle;-webkit-transition:background .6s ease-out 0s;transition:background .6s ease-out 0s}.social-share .social-share-icon:hover{color:#666}.social-share .icon-weibo:hover{color:#ff763b}.social-share .icon-qq:hover,.social-share .icon-tencent:hover{color:#56b6e7}.social-share .icon-qzone:hover{color:#fdbe3d}.social-share .icon-douban:hover{color:#33b045}.social-share .icon-linkedin:hover{color:#0077b5}.social-share .icon-facebook:hover{color:#44619d}.social-share .icon-google:hover{color:#db4437}.social-share .icon-twitter:hover{color:#55acee}.social-share .icon-diandian:hover{color:#307dca}.social-share .icon-wechat{position:relative}.social-share .icon-wechat:hover{color:#7bc549}.social-share .icon-wechat .wechat-qrcode{display:none;border:1px solid #eee;position:absolute;z-index:9;top:-209px;left:-90px;width:200px;height:200px;color:#666;font-size:12px;text-align:center;background-color:#fff;-webkit-transition:all .2s;transition:all .2s;-webkit-tansition:all 350ms;-moz-transition:all 350ms}.social-share .icon-wechat .wechat-qrcode.bottom{top:40px;left:-84px}.social-share .icon-wechat .wechat-qrcode.bottom:after{display:none}.social-share .icon-wechat .wechat-qrcode h4{font-weight:400;height:26px;line-height:26px;font-size:12px;background-color:#f3f3f3;margin:0;padding:0;color:#777}.social-share .icon-wechat .wechat-qrcode .qrcode{width:105px;margin:15px auto}.social-share .icon-wechat .wechat-qrcode .qrcode table{margin:0!important}.social-share .icon-wechat .wechat-qrcode .help p{font-weight:400;line-height:16px;padding:0;margin:0}.social-share .icon-wechat .wechat-qrcode:before{content:'';position:absolute;left:50%;margin-left:-6px;bottom:-15px;width:0;height:0;border-width:8px 6px 6px;border-style:solid;border-color:#eee transparent transparent}.social-share .icon-wechat .wechat-qrcode:after{content:'';position:absolute;left:50%;margin-left:-6px;bottom:-13px;width:0;height:0;border-width:8px 6px 6px;border-style:solid;border-color:#fff transparent transparent}.social-share .icon-wechat:hover .wechat-qrcode{display:block}.btn-donate{position:absolute;bottom:10px;left:50%;margin-left:-25px;width:50px;height:50px;line-height:50px;padding:0;border-radius:50%;font-size:18px;cursor:pointer;z-index:99}.btn-donate:active,.btn-donate:focus,.btn-donate:hover{border-color:transparent!important;outline:0!important}.btn-donate.btn-fancy{background-color:transparent}.btn-donate.btn-fancy span{width:50px;height:50px;padding:0}.donate{overflow:hidden}.donate-box{text-align:center;padding-top:30px}.donate-box .donate-head{width:100%;height:80px;text-align:center;line-height:60px;color:#a3a3a3;font-size:16px;position:relative}.donate-box .donate-head:after,.donate-box .donate-head:before{font-family:Arial,Helvetica,sans-serif;background:0 0;width:0;height:0;font-style:normal;color:#eee;font-size:100px;position:absolute;top:15px}.donate-box .donate-head:before{content:'\\201c';left:30px}.donate-box .donate-head:after{content:'\\201d';right:70px}.donate-box .donate-footer{padding-top:35px}.donate-box .donate-payimg{display:inline-block;padding:10px;border:6px solid #ea5f00;margin:0 auto;border-radius:3px}.donate-box .donate-payimg img{display:block;text-align:center;width:140px;height:140px}.book .media-middle{display:inline-block;width:115px}.ins-search{display:none}.ins-search.show{display:block}.ins-selectable{cursor:pointer}.ins-search-container,.ins-search-mask{position:fixed}.ins-search-mask{top:0;left:0;width:100%;height:100%;z-index:1050;background:rgba(0,0,0,.5)}.ins-input-wrapper{position:relative}.ins-search-input{width:100%;border:none;outline:0;font-size:16px;-webkit-box-shadow:none;box-shadow:none;font-weight:200;border-radius:0;background:#fff;line-height:20px;-webkit-box-sizing:border-box;box-sizing:border-box;padding:12px 28px 12px 20px;border-bottom:1px solid #e2e2e2;font-family:\"Microsoft Yahei Light\",\"Microsoft Yahei\",Helvetica,Arial,sans-serif}.ins-close{top:50%;right:6px;width:20px;height:20px;font-size:24px;margin-top:-15px;position:absolute;text-align:center;opacity:1;color:#666;display:inline-block}.ins-close:hover{color:#006bde}.ins-search-container{left:50%;top:100px;z-index:1051;bottom:100px;-webkit-box-sizing:border-box;box-sizing:border-box;width:540px;margin-left:-270px}.ins-section-wrapper{left:0;right:0;top:45px;bottom:0;overflow-y:auto;position:absolute}.ins-section-container{position:relative;background:#f7f7f7}.ins-section{font-size:14px;line-height:16px}.ins-section .ins-search-item,.ins-section .ins-section-header{padding:8px 15px}.ins-section .ins-section-header{color:#9a9a9a;border-bottom:1px solid #e2e2e2}.ins-section .ins-slug{margin-left:5px;color:#9a9a9a}.ins-section .ins-slug:before{content:'('}.ins-section .ins-slug:after{content:')'}.ins-section .ins-search-item .ins-search-preview,.ins-section .ins-search-item header{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ins-section .ins-search-item header .icon{margin-right:8px}.ins-section .ins-search-item .ins-search-preview{height:15px;font-size:12px;color:#9a9a9a;margin:5px 0 0 20px}.ins-section .ins-search-item.active,.ins-section .ins-search-item:hover{color:#fff;background:#006bde}.ins-section .ins-search-item.active .ins-search-preview,.ins-section .ins-search-item.active .ins-slug,.ins-section .ins-search-item:hover .ins-search-preview,.ins-section .ins-search-item:hover .ins-slug,.theme-black .header,.theme-blue .header,.theme-green .header,.theme-purple .header{color:#fff}.theme-black .header a,.theme-blue .header a,.theme-green .header a,.theme-purple .header a{color:#efefef}.theme-black .header #location,.theme-blue .header #location,.theme-green .header #location,.theme-purple .header #location{color:rgba(255,255,255,.75)!important}.theme-black .header .navbar-toggle .icon-bar,.theme-blue .header .navbar-toggle .icon-bar,.theme-green .header .navbar-toggle .icon-bar,.theme-purple .header .navbar-toggle .icon-bar{background-color:#fff}.theme-black .footer,.theme-black .footer a,.theme-blue .footer,.theme-blue .footer a,.theme-green .footer,.theme-green .footer a,.theme-purple .footer,.theme-purple .footer a{color:rgba(255,255,255,.75)}.theme-black .footer a.active,.theme-black .footer a:focus,.theme-black .footer a:hover,.theme-black .header a.active,.theme-black .header a:focus,.theme-black .header a:hover,.theme-blue .footer a.active,.theme-blue .footer a:focus,.theme-blue .footer a:hover,.theme-blue .header a.active,.theme-blue .header a:focus,.theme-blue .header a:hover,.theme-green .footer a.active,.theme-green .footer a:focus,.theme-green .footer a:hover,.theme-green .header a.active,.theme-green .header a:focus,.theme-green .header a:hover,.theme-purple .footer a.active,.theme-purple .footer a:focus,.theme-purple .footer a:hover,.theme-purple .header a.active,.theme-purple .header a:focus,.theme-purple .header a:hover{color:#fff}.theme-black .main-nav>li>a.active,.theme-black .main-nav>li>a:focus,.theme-black .main-nav>li>a:hover,.theme-blue .main-nav>li>a.active,.theme-blue .main-nav>li>a:focus,.theme-blue .main-nav>li>a:hover,.theme-green .main-nav>li>a.active,.theme-green .main-nav>li>a:focus,.theme-green .main-nav>li>a:hover,.theme-purple .main-nav>li>a.active,.theme-purple .main-nav>li>a:focus,.theme-purple .main-nav>li>a:hover{color:#fff;background:rgba(0,0,0,.15)}.theme-black .main-nav>.active a,.theme-black .main-nav>.active a.active,.theme-black .main-nav>.active a:focus,.theme-black .main-nav>.active a:hover,.theme-blue .main-nav>.active a,.theme-blue .main-nav>.active a.active,.theme-blue .main-nav>.active a:focus,.theme-blue .main-nav>.active a:hover,.theme-green .main-nav>.active a,.theme-green .main-nav>.active a.active,.theme-green .main-nav>.active a:focus,.theme-green .main-nav>.active a:hover,.theme-purple .main-nav>.active a,.theme-purple .main-nav>.active a.active,.theme-purple .main-nav>.active a:focus,.theme-purple .main-nav>.active a:hover{color:#fff;background:rgba(0,0,0,.2)}.theme-black .search .sidebar-form,.theme-blue .search .sidebar-form,.theme-green .search .sidebar-form,.theme-purple .search .sidebar-form{border:0;background:rgba(0,0,0,.2)}.theme-black .search .sidebar-form input::-webkit-input-placeholder,.theme-blue .search .sidebar-form input::-webkit-input-placeholder,.theme-green .search .sidebar-form input::-webkit-input-placeholder,.theme-purple .search .sidebar-form input::-webkit-input-placeholder{color:rgba(255,255,255,.5)}.theme-black .search .sidebar-form input:-moz-placeholder,.theme-blue .search .sidebar-form input:-moz-placeholder,.theme-green .search .sidebar-form input:-moz-placeholder,.theme-purple .search .sidebar-form input:-moz-placeholder{color:rgba(255,255,255,.5)}.theme-black .search .sidebar-form input::-moz-placeholder,.theme-blue .search .sidebar-form input::-moz-placeholder,.theme-green .search .sidebar-form input::-moz-placeholder,.theme-purple .search .sidebar-form input::-moz-placeholder{color:rgba(255,255,255,.5)}.theme-black .search .sidebar-form input:-ms-input-placeholder,.theme-blue .search .sidebar-form input:-ms-input-placeholder,.theme-green .search .sidebar-form input:-ms-input-placeholder,.theme-purple .search .sidebar-form input:-ms-input-placeholder{color:rgba(255,255,255,.5)}.theme-black .search input[type=text],.theme-blue .search input[type=text],.theme-green .search input[type=text],.theme-purple .search input[type=text]{color:#666}.theme-black .search input[type=text]+.input-group-btn .btn,.theme-blue .search input[type=text]+.input-group-btn .btn,.theme-green .search input[type=text]+.input-group-btn .btn,.theme-purple .search input[type=text]+.input-group-btn .btn{color:rgba(255,255,255,.5)}.theme-black .search input[type=text]:focus,.theme-black .search input[type=text]:focus+.input-group-btn .btn,.theme-blue .search input[type=text]:focus,.theme-blue .search input[type=text]:focus+.input-group-btn .btn,.theme-green .search input[type=text]:focus,.theme-green .search input[type=text]:focus+.input-group-btn .btn,.theme-purple .search input[type=text]:focus,.theme-purple .search input[type=text]:focus+.input-group-btn .btn{background-color:#fff;color:#666}.theme-black .header{background:#1a2433;background:-webkit-linear-gradient(left,#1a2433 0,#253449 80%,#253449 100%);background:-webkit-gradient(linear,left top,right top,from(#1a2433),color-stop(80%,#253449),to(#253449));background:linear-gradient(to right,#1a2433 0,#253449 80%,#253449 100%)}.theme-blue .header{background:#0062c5;background:-webkit-linear-gradient(left,#0062c5 0,#0073e6 80%,#0073e6 100%);background:-webkit-gradient(linear,left top,right top,from(#0062c5),color-stop(80%,#0073e6),to(#0073e6));background:linear-gradient(to right,#0062c5 0,#0073e6 80%,#0073e6 100%)}.theme-green .header{background:#08a283;background:-webkit-linear-gradient(left,#08a283 0,#0ac29d 80%,#0ac29d 100%);background:-webkit-gradient(linear,left top,right top,from(#08a283),color-stop(80%,#0ac29d),to(#0ac29d));background:linear-gradient(to right,#08a283 0,#0ac29d 80%,#0ac29d 100%)}.theme-purple .header{background:#494683;background:-webkit-linear-gradient(left,#494683 0,#555299 80%,#555299 100%);background:-webkit-gradient(linear,left top,right top,from(#494683),color-stop(80%,#555299),to(#555299));background:linear-gradient(to right,#494683 0,#555299 80%,#555299 100%)}@media (min-width:767px){.modal-center{text-align:center;padding:0!important}.modal-center:before{content:'';display:inline-block;height:100%;vertical-align:middle;margin-right:-4px}.modal-center .modal-dialog{display:inline-block;text-align:left;vertical-align:middle}.donate-box .donate-footer{margin:0 -15px -16px}}@media (min-width:768px){.lead{font-size:21px}.dl-horizontal dt{float:left;width:160px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}.container{width:750px}.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}.col-sm-1{width:8.33333%}.col-sm-2{width:16.66667%}.col-sm-3{width:25%}.col-sm-4{width:33.33333%}.col-sm-5{width:41.66667%}.col-sm-6{width:50%}.col-sm-7{width:58.33333%}.col-sm-8{width:66.66667%}.col-sm-9{width:75%}.col-sm-10{width:83.33333%}.col-sm-11{width:91.66667%}.col-sm-12{width:100%}.col-sm-pull-0{right:auto}.col-sm-pull-1{right:8.33333%}.col-sm-pull-2{right:16.66667%}.col-sm-pull-3{right:25%}.col-sm-pull-4{right:33.33333%}.col-sm-pull-5{right:41.66667%}.col-sm-pull-6{right:50%}.col-sm-pull-7{right:58.33333%}.col-sm-pull-8{right:66.66667%}.col-sm-pull-9{right:75%}.col-sm-pull-10{right:83.33333%}.col-sm-pull-11{right:91.66667%}.col-sm-pull-12{right:100%}.col-sm-push-0{left:auto}.col-sm-push-1{left:8.33333%}.col-sm-push-2{left:16.66667%}.col-sm-push-3{left:25%}.col-sm-push-4{left:33.33333%}.col-sm-push-5{left:41.66667%}.col-sm-push-6{left:50%}.col-sm-push-7{left:58.33333%}.col-sm-push-8{left:66.66667%}.col-sm-push-9{left:75%}.col-sm-push-10{left:83.33333%}.col-sm-push-11{left:91.66667%}.col-sm-push-12{left:100%}.col-sm-offset-0{margin-left:0}.col-sm-offset-1{margin-left:8.33333%}.col-sm-offset-2{margin-left:16.66667%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-4{margin-left:33.33333%}.col-sm-offset-5{margin-left:41.66667%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-7{margin-left:58.33333%}.col-sm-offset-8{margin-left:66.66667%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-10{margin-left:83.33333%}.col-sm-offset-11{margin-left:91.66667%}.col-sm-offset-12{margin-left:100%}.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{left:0;right:auto}.nav-justified>li,.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{margin-bottom:0}.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{border-bottom:1px solid #f2f2f2;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}.navbar{border-radius:4px}.navbar-header{float:left}.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-left:0;padding-right:0}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}.navbar-fixed-bottom,.navbar-fixed-top,.navbar-static-top{border-radius:0}.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}.navbar-toggle{display:none}.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:14.5px;padding-bottom:14.5px}.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}.navbar-form{width:auto;border:0;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0;-webkit-box-shadow:none;box-shadow:none}.navbar-text{float:left;margin-left:15px;margin-right:15px}.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.05);box-shadow:0 5px 15px rgba(0,0,0,.05)}.modal-sm{width:300px}.header{position:fixed;top:0;bottom:0;left:0;z-index:1000;display:block;padding:0;overflow-y:auto;border-right:1px solid #f6f6f6;width:4.16667%}.sidebar{position:fixed;top:0;bottom:0;left:0;display:block;padding:0;overflow-x:hidden;overflow-y:auto;border-right:1px solid #f6f6f6;width:33.33333%}.main{width:62.5%;padding-right:20px;padding-left:20px}.footer{position:fixed;left:0;bottom:0;background-color:transparent;z-index:1050;width:4.16667%}body.main-center .main{margin-left:4.16667%}body.main-left .sidebar{margin-right:4.16667%}body.main-right .sidebar{margin-left:4.16667%}body.main-right .main{margin-left:37.5%}body.no-sidebar.main-left .main{width:95.83333333%;margin-right:4.16667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:95.83333333%;margin-left:4.16667%}.header .navbar-header{float:none}#avatar img{padding:5px}.bar.bar-footer:before{width:-webkit-calc(100% + 40px);width:calc(100% + 40px);left:-20px}.header .social-links{display:none}}@media (min-width:992px){.container{width:970px}.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}.col-md-1{width:8.33333%}.col-md-2{width:16.66667%}.col-md-3{width:25%}.col-md-4{width:33.33333%}.col-md-5{width:41.66667%}.col-md-6{width:50%}.col-md-7{width:58.33333%}.col-md-8{width:66.66667%}.col-md-9{width:75%}.col-md-10{width:83.33333%}.col-md-11{width:91.66667%}.col-md-12{width:100%}.col-md-pull-0{right:auto}.col-md-pull-1{right:8.33333%}.col-md-pull-2{right:16.66667%}.col-md-pull-3{right:25%}.col-md-pull-4{right:33.33333%}.col-md-pull-5{right:41.66667%}.col-md-pull-6{right:50%}.col-md-pull-7{right:58.33333%}.col-md-pull-8{right:66.66667%}.col-md-pull-9{right:75%}.col-md-pull-10{right:83.33333%}.col-md-pull-11{right:91.66667%}.col-md-pull-12{right:100%}.col-md-push-0{left:auto}.col-md-push-1{left:8.33333%}.col-md-push-2{left:16.66667%}.col-md-push-3{left:25%}.col-md-push-4{left:33.33333%}.col-md-push-5{left:41.66667%}.col-md-push-6{left:50%}.col-md-push-7{left:58.33333%}.col-md-push-8{left:66.66667%}.col-md-push-9{left:75%}.col-md-push-10{left:83.33333%}.col-md-push-11{left:91.66667%}.col-md-push-12{left:100%}.col-md-offset-0{margin-left:0}.col-md-offset-1{margin-left:8.33333%}.col-md-offset-2{margin-left:16.66667%}.col-md-offset-3{margin-left:25%}.col-md-offset-4{margin-left:33.33333%}.col-md-offset-5{margin-left:41.66667%}.col-md-offset-6{margin-left:50%}.col-md-offset-7{margin-left:58.33333%}.col-md-offset-8{margin-left:66.66667%}.col-md-offset-9{margin-left:75%}.col-md-offset-10{margin-left:83.33333%}.col-md-offset-11{margin-left:91.66667%}.col-md-offset-12{margin-left:100%}.modal-lg{width:900px}.header{width:16.66667%}.sidebar{width:25%}.sidebar .slimContent{padding-right:25px;padding-left:25px}.main{width:58.33333%;padding-right:25px;padding-left:25px}.footer{width:16.66667%}body.main-center .main{margin-left:16.66667%}body.main-left .sidebar{margin-right:16.66667%}body.main-right .sidebar{margin-left:16.66667%}body.main-right .main{margin-left:41.66667%}body.no-sidebar.main-left .main{width:83.33333333%;margin-right:16.66667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:83.33333333%;margin-left:16.66667%}.bar.bar-footer:before{width:-webkit-calc(100% + 50px);width:calc(100% + 50px);left:-25px}.marked-body .headerlink:before,.marked-body .markdownIt-Anchor:before{display:inline-block;width:18px;content:\"#\";color:#0a6ebd;text-align:right;float:left;visibility:hidden}.marked-body .headerlink:before{margin-left:-15px;padding-right:2px}.marked-body .markdownIt-Anchor:before{margin-left:-20px}.marked-body h1:hover .headerlink:before,.marked-body h1:hover .markdownIt-Anchor:before,.marked-body h2:hover .headerlink:before,.marked-body h2:hover .markdownIt-Anchor:before,.marked-body h3:hover .headerlink:before,.marked-body h3:hover .markdownIt-Anchor:before,.marked-body h4:hover .headerlink:before,.marked-body h4:hover .markdownIt-Anchor:before,.marked-body h5:hover .headerlink:before,.marked-body h5:hover .markdownIt-Anchor:before,.marked-body h6:hover .headerlink:before,.marked-body h6:hover .markdownIt-Anchor:before{visibility:visible}}@media (min-width:1200px){.container{width:1170px}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}.col-lg-1{width:8.33333%}.col-lg-2{width:16.66667%}.col-lg-3{width:25%}.col-lg-4{width:33.33333%}.col-lg-5{width:41.66667%}.col-lg-6{width:50%}.col-lg-7{width:58.33333%}.col-lg-8{width:66.66667%}.col-lg-9{width:75%}.col-lg-10{width:83.33333%}.col-lg-11{width:91.66667%}.col-lg-12{width:100%}.col-lg-pull-0{right:auto}.col-lg-pull-1{right:8.33333%}.col-lg-pull-2{right:16.66667%}.col-lg-pull-3{right:25%}.col-lg-pull-4{right:33.33333%}.col-lg-pull-5{right:41.66667%}.col-lg-pull-6{right:50%}.col-lg-pull-7{right:58.33333%}.col-lg-pull-8{right:66.66667%}.col-lg-pull-9{right:75%}.col-lg-pull-10{right:83.33333%}.col-lg-pull-11{right:91.66667%}.col-lg-pull-12{right:100%}.col-lg-push-0{left:auto}.col-lg-push-1{left:8.33333%}.col-lg-push-2{left:16.66667%}.col-lg-push-3{left:25%}.col-lg-push-4{left:33.33333%}.col-lg-push-5{left:41.66667%}.col-lg-push-6{left:50%}.col-lg-push-7{left:58.33333%}.col-lg-push-8{left:66.66667%}.col-lg-push-9{left:75%}.col-lg-push-10{left:83.33333%}.col-lg-push-11{left:91.66667%}.col-lg-push-12{left:100%}.col-lg-offset-0{margin-left:0}.col-lg-offset-1{margin-left:8.33333%}.col-lg-offset-2{margin-left:16.66667%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-4{margin-left:33.33333%}.col-lg-offset-5{margin-left:41.66667%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-7{margin-left:58.33333%}.col-lg-offset-8{margin-left:66.66667%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-10{margin-left:83.33333%}.col-lg-offset-11{margin-left:91.66667%}.col-lg-offset-12{margin-left:100%}.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}.visible-lg-block{display:block!important}.visible-lg-inline{display:inline!important}.visible-lg-inline-block{display:inline-block!important}.hidden-lg{display:none!important}.header{width:16.66667%}.sidebar{width:23%}.sidebar .slimContent{padding-right:30px;padding-left:30px}.main{width:60.33333%;padding-right:30px;padding-left:30px}.footer{width:16.66667%}body.main-center .main{margin-left:16.66667%}body.main-left .sidebar{margin-right:16.66667%}body.main-right .sidebar{margin-left:16.66667%}body.main-right .main{margin-left:39.66667%}body.no-sidebar.main-left .main{width:83.33333333%;margin-right:16.66667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:83.33333333%;margin-left:16.66667%}.main-nav>li>a{padding:10px 20px}.bar.bar-footer:before{width:-webkit-calc(100% + 60px);width:calc(100% + 60px);left:-30px}}@media (min-width:1440px){.header{width:16.66667%}.sidebar{width:21%}.main{width:62.33333%}.footer{width:16.66667%}body.main-center .main{margin-left:16.66667%}body.main-left .sidebar{margin-right:16.66667%}body.main-right .sidebar{margin-left:16.66667%}body.main-right .main{margin-left:37.66667%}body.no-sidebar.main-left .main{width:83.33333333%;margin-right:16.66667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:83.33333333%;margin-left:16.66667%}.header #title{font-size:15px}}@media (max-width:1199px){.main-nav>li>a{padding:6px 20px}.bar .pager li a span,.footer .copyright{display:none}}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:21px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}.visible-xs-block{display:block!important}.visible-xs-inline{display:inline!important}.visible-xs-inline-block{display:inline-block!important}.hidden-xs{display:none!important}body{padding-top:53px}.list-circle-num,.list-square-num{margin:0 0 40px}.modal-xs-full .modal-content,.modal-xs-full .modal-dialog{height:100%;width:100%;margin:0;border-radius:0;-webkit-box-shadow:none;box-shadow:none}.modal-xs-full .modal-content .donate-box,.modal-xs-full .modal-dialog .donate-box{padding-top:50px}.highlight table:before{display:block;content:' ';height:38px;position:absolute;top:0;left:0;right:0;margin-left:-10px;margin-right:-10px;margin-top:-38px;background-color:#f6f6f6;border-top-left-radius:4px;border-top-right-radius:4px}.header{position:fixed;left:0;right:0;top:0;width:100%;z-index:1050}.header:after,.header:before{content:\" \";display:table}.header:after{clear:both}.sidebar{display:none}.main{min-height:auto}.main-nav>li>a{padding:10px 20px}.sidebar-form{border:0;margin:9px 45px 9px 0}.sidebar-form .input-group-btn .btn{color:#2196f3}.sidebar-form input[type=text]:focus{background-color:transparent}.sidebar-form input[type=text]:focus+.input-group-btn .btn{color:#2196f3;background-color:transparent}.header .navbar-toggle{position:absolute;top:0;right:0;margin-right:5px}.header .navbar-toggle .icon-bar{width:18px}.header .search{width:90%;float:right}.header .profile-block{padding:0;margin:10px 0;width:8.33333%;float:left}.header #avatar{width:32px;height:32px}.header #location,.header #name,.header #title{display:none}#main-navbar{position:absolute;width:100%;background-color:#fbfbfb;border-bottom:1px solid #f6f6f6;z-index:99}.main .content{min-height:auto}.sidebar-toc.in{position:fixed;top:50px;bottom:50px;z-index:9}.bar.bar-footer{top:auto!important;bottom:0!important}.footer{display:none;position:static}.footer .copyright{display:block}.social-links .tooltip{display:none!important;visibility:hidden}.theme-black .search input[type=text]:focus,.theme-blue .search input[type=text]:focus,.theme-green .search input[type=text]:focus,.theme-purple .search input[type=text]:focus{background-color:transparent}.theme-black .search input[type=text]:focus+.input-group-btn .btn,.theme-blue .search input[type=text]:focus+.input-group-btn .btn,.theme-green .search input[type=text]:focus+.input-group-btn .btn,.theme-purple .search input[type=text]:focus+.input-group-btn .btn{color:rgba(255,255,255,.5);background-color:transparent}.theme-black #main-navbar{background:#1a2433;background:-webkit-linear-gradient(left,#1a2433 0,#253449 80%,#253449 100%);background:-webkit-gradient(linear,left top,right top,from(#1a2433),color-stop(80%,#253449),to(#253449));background:linear-gradient(to right,#1a2433 0,#253449 80%,#253449 100%)}.theme-blue #main-navbar{background:#0062c5;background:-webkit-linear-gradient(left,#0062c5 0,#0073e6 80%,#0073e6 100%);background:-webkit-gradient(linear,left top,right top,from(#0062c5),color-stop(80%,#0073e6),to(#0073e6));background:linear-gradient(to right,#0062c5 0,#0073e6 80%,#0073e6 100%)}.theme-green #main-navbar{background:#08a283;background:-webkit-linear-gradient(left,#08a283 0,#0ac29d 80%,#0ac29d 100%);background:-webkit-gradient(linear,left top,right top,from(#08a283),color-stop(80%,#0ac29d),to(#0ac29d));background:linear-gradient(to right,#08a283 0,#0ac29d 80%,#0ac29d 100%)}.theme-purple #main-navbar{background:#494683;background:-webkit-linear-gradient(left,#494683 0,#555299 80%,#555299 100%);background:-webkit-gradient(linear,left top,right top,from(#494683),color-stop(80%,#555299),to(#555299));background:linear-gradient(to right,#494683 0,#555299 80%,#555299 100%)}}@media screen and (max-width:559px),screen and (max-height:479px){.ins-search-container{top:0;left:0;margin:0;width:100%;height:100%;background:#f7f7f7}}@media (max-width:480px){.header #avatar{width:24px;height:24px;margin-top:3px;margin-left:15px}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}.visible-sm-block{display:block!important}.visible-sm-inline{display:inline!important}.visible-sm-inline-block{display:inline-block!important}.hidden-sm{display:none!important}.sidebar-form{display:none}.header .main-nav>li>a{text-align:center;padding-left:0;padding-right:0}.header .main-nav>li>a span{display:none}.header .profile-block{padding-top:10px;padding-left:0;padding-right:0}.header #avatar{width:32px;height:32px}.footer{padding-left:0;padding-right:0}.social-links{display:block;width:100%;text-align:center;margin-bottom:0}.social-links:after,.social-links:before{content:\" \";display:table}.social-links:after{clear:both}.social-links li{display:block;margin-left:0;margin-top:10px}.social-links li:after,.social-links li:before{content:\" \";display:table}.social-links li:after{clear:both}.social-links .tooltip{display:none!important;visibility:hidden}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}.visible-md-block{display:block!important}.visible-md-inline{display:inline!important}.visible-md-inline-block{display:inline-block!important}.hidden-md{display:none!important}}@media print{*,:after,:before{background:0 0!important;color:#000!important;-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"#\"]:after,a[href^=\"javascript:\"]:after{content:\"\"}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}.visible-print-block{display:block!important}.visible-print-inline{display:inline!important}.visible-print-inline-block{display:inline-block!important}.hidden-print{display:none!important}}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}"},{"title":"","date":"2022-06-24T17:19:04.512Z","updated":"2022-06-24T17:19:04.512Z","comments":true,"path":"js/application.min.js","permalink":"http://fyupeng.github.io/js/application.min.js","excerpt":"","text":"$(function(){$('[data-toggle=\"tooltip\"]').tooltip(),\"undefined\"!=typeof $.fn.slimScroll&&$(\".sidebar .slimContent\").slimScroll({height:$(window).height(),color:\"rgba(0,0,0,0.15)\",size:\"5px\",position:\"right\"}),$(\"#collapseToc\").on(\"shown.bs.collapse\",function(){\"undefined\"!=typeof $.fn.slimScroll&&$(\".sidebar .slimContent\").slimScroll().on(\"slimscroll\")}),$(\".geopattern\").each(function(){$(this).geopattern($(this).data(\"pattern-id\"))});$(\"#nav-main\").okayNav({swipe_enabled:!1});$(\"[data-stick-bottom]\").keepInView({fixed:!1,parentClass:\"has-sticky\",customClass:\"sticky\",trigger:\"bottom\",zindex:42,edgeOffset:0}),$(\"[data-stick-top]\").keepInView({fixed:!0,parentClass:\"has-sticky\",customClass:\"sticky\",trigger:\"top\",zindex:42,edgeOffset:0});var t=$(\"ul.main-nav\").hasClass(\"menu-highlight\");if(t){for(var e=location.pathname,i=$(\"ul.main-nav>li\"),a=-1,s=0,n=i.length;s-1||\"/\"===e&&(\"/.\"===o||\"/\"===o||\"index.html\"===o||\"/index.html\"===o))&&(a=s),$(i[s]).removeClass(\"active\")}i[a]&&$(i[a]).addClass(\"active\")}});"},{"title":"","date":"2022-06-24T17:19:04.511Z","updated":"2022-06-24T17:19:04.511Z","comments":true,"path":"js/application.js","permalink":"http://fyupeng.github.io/js/application.js","excerpt":"","text":"$(function() { // bootstrap tooltip $('[data-toggle=\"tooltip\"]').tooltip(); // slimscroll if (typeof $.fn.slimScroll != 'undefined') { $(\".sidebar .slimContent\").slimScroll({ height: $(window).height(), color: \"rgba(0,0,0,0.15)\", size: \"5px\", position: 'right', // allowPageScroll: true }); } $('#collapseToc').on('shown.bs.collapse', function() { // do something… // slimscroll if (typeof $.fn.slimScroll != 'undefined') { $(\".sidebar .slimContent\").slimScroll().on('slimscroll'); } }); // geopattern 背景生成 $(\".geopattern\").each(function() { $(this).geopattern($(this).data('pattern-id')); }); // okayNav var navigation = $('#nav-main').okayNav({ swipe_enabled: false, // If true, you'll be able to swipe left/right to open the navigation }); // modal居中 // $('.modal').on('shown.bs.modal', function(e) { // $(this).show(); // var modalDialog = $(this).find(\".modal-dialog\"); // // Applying the top margin on modal dialog to align it vertically center // modalDialog.css(\"margin-top\", Math.max(0, ($(window).height() - modalDialog.height()) / 2)); // }); // sticky $('[data-stick-bottom]').keepInView({ fixed: false, parentClass: \"has-sticky\", customClass: \"sticky\", trigger: 'bottom', zindex: 42, edgeOffset: 0 }); $('[data-stick-top]').keepInView({ fixed: true, parentClass: \"has-sticky\", customClass: \"sticky\", trigger: 'top', zindex: 42, edgeOffset: 0 }); // menu auto highlight var menuHighlight = $(\"ul.main-nav\").hasClass('menu-highlight'); if (menuHighlight) { var currentPathname = location.pathname, $menuList = $(\"ul.main-nav>li\"), activeIndex = -1; for (var i = 0, length = $menuList.length; i < length; i++) { var itemHref = $($menuList[i]).find('a').attr('href'); if (currentPathname.indexOf(itemHref) > -1 || (currentPathname === '/' && (itemHref === '/.' || itemHref === '/' || itemHref === 'index.html' || itemHref === '/index.html'))) { activeIndex = i; } $($menuList[i]).removeClass('active'); } $menuList[activeIndex] && $($menuList[activeIndex]).addClass('active'); } });"},{"title":"","date":"2022-06-24T17:19:04.513Z","updated":"2022-06-24T17:19:04.513Z","comments":true,"path":"js/insight.js","permalink":"http://fyupeng.github.io/js/insight.js","excerpt":"","text":"/** * Insight search plugin * @author PPOffice { @link https://github.com/ppoffice } */ (function ($, CONFIG) { var $main = $('.ins-search'); var $input = $main.find('.ins-search-input'); var $wrapper = $main.find('.ins-section-wrapper'); var $container = $main.find('.ins-section-container'); $main.parent().remove('.ins-search'); $('body').append($main); function section (title) { return $('').addClass('ins-section') .append($('').addClass('ins-section-header').text(title)); } function searchItem (icon, title, slug, preview, url) { return $('').addClass('ins-selectable').addClass('ins-search-item') .append($('').append($('').addClass('icon').addClass('icon-' + icon)).append(title != null && title != '' ? title : CONFIG.TRANSLATION['UNTITLED']) .append(slug ? $('').addClass('ins-slug').text(slug) : null)) .append(preview ? $('').addClass('ins-search-preview').text(preview) : null) .attr('data-url', url); } function sectionFactory (type, array) { var sectionTitle; var $searchItems; if (array.length === 0) return null; sectionTitle = CONFIG.TRANSLATION[type]; switch (type) { case 'POSTS': case 'PAGES': $searchItems = array.map(function (item) { // Use config.root instead of permalink to fix url issue return searchItem('file', item.title, null, item.text.slice(0, 150), CONFIG.ROOT_URL + item.path); }); break; case 'CATEGORIES': case 'TAGS': $searchItems = array.map(function (item) { return searchItem(type === 'CATEGORIES' ? 'folder' : 'tag', item.name, item.slug, null, item.permalink); }); break; default: return null; } return section(sectionTitle).append($searchItems); } function extractToSet (json, key) { var values = {}; var entries = json.pages.concat(json.posts); entries.forEach(function (entry) { if (entry[key]) { entry[key].forEach(function (value) { values[value.name] = value; }); } }); var result = []; for (var key in values) { result.push(values[key]); } return result; } function parseKeywords (keywords) { return keywords.split(' ').filter(function (keyword) { return !!keyword; }).map(function (keyword) { return keyword.toUpperCase(); }); } /** * Judge if a given post/page/category/tag contains all of the keywords. * @param Object obj Object to be weighted * @param Array fields Object's fields to find matches */ function filter (keywords, obj, fields) { var result = false; var keywordArray = parseKeywords(keywords); var containKeywords = keywordArray.filter(function (keyword) { var containFields = fields.filter(function (field) { if (!obj.hasOwnProperty(field)) return false; if (obj[field].toUpperCase().indexOf(keyword) > -1) return true; }); if (containFields.length > 0) return true; return false; }); return containKeywords.length === keywordArray.length; } function filterFactory (keywords) { return { POST: function (obj) { return filter(keywords, obj, ['title', 'text']); }, PAGE: function (obj) { return filter(keywords, obj, ['title', 'text']); }, CATEGORY: function (obj) { return filter(keywords, obj, ['name', 'slug']); }, TAG: function (obj) { return filter(keywords, obj, ['name', 'slug']); } }; } /** * Calculate the weight of a matched post/page/category/tag. * @param Object obj Object to be weighted * @param Array fields Object's fields to find matches * @param Array weights Weight of every field */ function weight (keywords, obj, fields, weights) { var value = 0; parseKeywords(keywords).forEach(function (keyword) { var pattern = new RegExp(keyword, 'img'); // Global, Multi-line, Case-insensitive fields.forEach(function (field, index) { if (obj.hasOwnProperty(field)) { var matches = obj[field].match(pattern); value += matches ? matches.length * weights[index] : 0; } }); }); return value; } function weightFactory (keywords) { return { POST: function (obj) { return weight(keywords, obj, ['title', 'text'], [3, 1]); }, PAGE: function (obj) { return weight(keywords, obj, ['title', 'text'], [3, 1]); }, CATEGORY: function (obj) { return weight(keywords, obj, ['name', 'slug'], [1, 1]); }, TAG: function (obj) { return weight(keywords, obj, ['name', 'slug'], [1, 1]); } }; } function search (json, keywords) { var WEIGHTS = weightFactory(keywords); var FILTERS = filterFactory(keywords); var posts = json.posts; var pages = json.pages; var tags = extractToSet(json, 'tags'); var categories = extractToSet(json, 'categories'); return { posts: posts.filter(FILTERS.POST).sort(function (a, b) { return WEIGHTS.POST(b) - WEIGHTS.POST(a); }).slice(0, 5), pages: pages.filter(FILTERS.PAGE).sort(function (a, b) { return WEIGHTS.PAGE(b) - WEIGHTS.PAGE(a); }).slice(0, 5), categories: categories.filter(FILTERS.CATEGORY).sort(function (a, b) { return WEIGHTS.CATEGORY(b) - WEIGHTS.CATEGORY(a); }).slice(0, 5), tags: tags.filter(FILTERS.TAG).sort(function (a, b) { return WEIGHTS.TAG(b) - WEIGHTS.TAG(a); }).slice(0, 5) }; } function searchResultToDOM (searchResult) { $container.empty(); for (var key in searchResult) { $container.append(sectionFactory(key.toUpperCase(), searchResult[key])); } } function scrollTo ($item) { if ($item.length === 0) return; var wrapperHeight = $wrapper[0].clientHeight; var itemTop = $item.position().top - $wrapper.scrollTop(); var itemBottom = $item[0].clientHeight + $item.position().top; if (itemBottom > wrapperHeight + $wrapper.scrollTop()) { $wrapper.scrollTop(itemBottom - $wrapper[0].clientHeight); } if (itemTop < 0) { $wrapper.scrollTop($item.position().top); } } function selectItemByDiff (value) { var $items = $.makeArray($container.find('.ins-selectable')); var prevPosition = -1; $items.forEach(function (item, index) { if ($(item).hasClass('active')) { prevPosition = index; return; } }); var nextPosition = ($items.length + prevPosition + value) % $items.length; $($items[prevPosition]).removeClass('active'); $($items[nextPosition]).addClass('active'); scrollTo($($items[nextPosition])); } function gotoLink ($item) { if ($item && $item.length) { location.href = $item.attr('data-url'); } } $.getJSON(CONFIG.CONTENT_URL, function (json) { if (location.hash.trim() === '#ins-search') { $main.addClass('show'); } $input.on('input', function () { var keywords = $(this).val(); searchResultToDOM(search(json, keywords)); }); $input.trigger('input'); }); $(document).on('click focus', '.search-form-input', function () { $main.addClass('show'); $main.find('.ins-search-input').focus(); }).on('click', '.ins-search-item', function () { gotoLink($(this)); }).on('click', '.ins-close', function () { $main.removeClass('show'); }).on('keydown', function (e) { if (!$main.hasClass('show')) return; switch (e.keyCode) { case 27: // ESC $main.removeClass('show'); break; case 38: // UP selectItemByDiff(-1); break; case 40: // DOWN selectItemByDiff(1); break; case 13: //ENTER gotoLink($container.find('.ins-selectable.active').eq(0)); break; } }); })(jQuery, window.INSIGHT_CONFIG);"},{"title":"","date":"2022-06-24T17:19:04.514Z","updated":"2022-06-24T17:19:04.514Z","comments":true,"path":"js/jquery.min.js","permalink":"http://fyupeng.github.io/js/jquery.min.js","excerpt":"","text":"/*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */ !function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m=\"1.12.4\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray||function(a){return\"array\"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||\"object\"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,\"constructor\")&&!k.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?i[j.call(a)]||\"object\":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return\"string\"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),\"function\"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(a,b){i[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=!!a&&\"length\"in a&&a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1"},{"title":"友情链接","date":"2022-06-24T18:09:11.563Z","updated":"2022-06-24T18:09:11.563Z","comments":true,"path":"links/index.html","permalink":"http://fyupeng.github.io/links/index.html","excerpt":"","text":""},{"title":"","date":"2022-06-24T18:11:07.170Z","updated":"2022-06-24T18:11:07.170Z","comments":true,"path":"js/plugin.min.js","permalink":"http://fyupeng.github.io/js/plugin.min.js","excerpt":"","text":"!function(t){var e=\"undefined\"==typeof module?t.baidu=t.baidu||{}:module.exports;e.template=function(e,n){var o=function(){if(!t.document)return i._compile(e);var n=document.getElementById(e);if(n){if(i.cache[e])return i.cache[e];var o=/^(textarea|input)$/i.test(n.nodeName)?n.value:n.innerHTML;return i._compile(o)}return i._compile(e)}(),r=i._isObject(n)?o(n):o;return o=null,r};var i=e.template;i.versions=i.versions||[],i.versions.push(\"1.0.6\"),i.cache={},i.LEFT_DELIMITER=i.LEFT_DELIMITER||\"{ %\",i.RIGHT_DELIMITER=i.RIGHT_DELIMITER||\"% }\",i.ESCAPE=!0,i._encodeHTML=function(t){return String(t).replace(/&/g,\"&amp;\").replace(//g,\"&gt;\").replace(/\\\\/g,\"&#92;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")},i._encodeReg=function(t){return String(t).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g,\"\\\\$1\")},i._encodeEventHTML=function(t){return String(t).replace(/&/g,\"&amp;\").replace(//g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\").replace(/\\\\\\\\/g,\"\\\\\").replace(/\\\\\\//g,\"/\").replace(/\\\\n/g,\"\\n\").replace(/\\\\r/g,\"\\r\")},i._compile=function(t){var e=\"var _template_fun_array=[];\\nvar fn=(function(__data__){\\nvar _template_varName='';\\nfor(name in __data__){\\n_template_varName+=('var '+name+'=__data__[\\\"'+name+'\\\"];');\\n};\\neval(_template_varName);\\n_template_fun_array.push('\"+i._analysisStr(t)+\"');\\n_template_varName=null;\\n})(_template_object);\\nfn = null;\\nreturn _template_fun_array.join('');\\n\";return new Function(\"_template_object\",e)},i._isObject=function(t){return\"function\"==typeof t||!(!t||\"object\"!=typeof t)},i._analysisStr=function(t){var e=i.LEFT_DELIMITER,n=i.RIGHT_DELIMITER,o=i._encodeReg(e),r=i._encodeReg(n);return t=String(t).replace(new RegExp(\"(\"+o+\"[^\"+r+\"]*)//.*\\n\",\"g\"),\"$1\").replace(new RegExp(\"\",\"g\"),\"\").replace(new RegExp(o+\"\\\\*.*?\\\\*\"+r,\"g\"),\"\").replace(new RegExp(\"[\\\\r\\\\t\\\\n]\",\"g\"),\"\").replace(new RegExp(o+\"(?:(?!\"+r+\")[\\\\s\\\\S])*\"+r+\"|((?:(?!\"+o+\")[\\\\s\\\\S])+)\",\"g\"),function(t,e){var i=\"\";if(e)for(i=e.replace(/\\\\/g,\"&#92;\").replace(/'/g,\"&#39;\");/i?t+6*(e-t)*i:.5>i?e:2/3>i?t+(e-t)*(2/3-i)*6:t}var i,n,o,r=t.h,s=t.s,a=t.l;if(0===s)i=n=o=a;else{var l=.5>a?a*(1+s):a+s-a*s,h=2*a-l;i=e(h,l,r+1/3),n=e(h,l,r),o=e(h,l,r-1/3)}return{r:Math.round(255*i),g:Math.round(255*n),b:Math.round(255*o)}}e.exports={hex2rgb:i,rgb2hex:n,rgb2hsl:o,hsl2rgb:r,rgb2rgbString:function(t){return\"rgb(\"+[t.r,t.g,t.b].join(\",\")+\")\"}}},{}],3:[function(t,e){!function(i){\"use strict\";function n(t){return function(e,i){return\"object\"==typeof e&&(i=e,e=null),(null===e||void 0===e)&&(e=(new Date).toString()),i||(i={}),t.call(this,e,i)}}var o=t(\"./pattern\"),r=e.exports={generate:n(function(t,e){return new o(t,e)})};i&&(i.fn.geopattern=n(function(t,e){return this.each(function(){var n=i(this).attr(\"data-title-sha\");n&&(e=i.extend({hash:n},e));var o=r.generate(t,e);i(this).css(\"background-image\",o.toDataUrl())})}))}(\"undefined\"!=typeof jQuery?jQuery:null)},{\"./pattern\":4}],4:[function(t,e){(function(i){\"use strict\";function n(t,e,i){return parseInt(t.substr(e,i||1),16)}function o(t,e,i,n,o){var r=parseFloat(t),s=i-e,a=o-n;return(r-e)*a/s+n}function r(t){return t%2===0?k:_}function s(t){return o(t,0,15,S,I)}function a(t){var e=t,i=e/2,n=Math.sin(60*Math.PI/180)*e;return[0,n,i,0,i+e,0,2*e,n,i+e,2*n,i,2*n,0,n].join(\",\")}function l(t,e){var i=.66*e;return[[0,0,t/2,e-i,t/2,e,0,i,0,0],[t/2,e-i,t,0,t,i,t/2,e,t/2,e-i]].map(function(t){return t.join(\",\")})}function h(t){return[[t,0,t,3*t],[0,t,3*t,t]]}function c(t){var e=t,i=.33*e;return[i,0,e-i,0,e,i,e,e-i,e-i,e,i,e,0,e-i,0,i,i,0].join(\",\")}function u(t,e){var i=t/2;return[i,0,t,e,0,e,i,0].join(\",\")}function f(t,e){return[t/2,0,t,e/2,t/2,e,0,e/2].join(\",\")}function p(t){return[0,0,t,t,0,t,0,0].join(\",\")}function d(t,e,i,n,o){var a=p(n),l=s(o[0]),h=r(o[0]),c={stroke:E,\"stroke-opacity\":x,\"fill-opacity\":l,fill:h};t.polyline(a,c).transform({translate:[e+n,i],scale:[-1,1]}),t.polyline(a,c).transform({translate:[e+n,i+2*n],scale:[1,-1]}),l=s(o[1]),h=r(o[1]),c={stroke:E,\"stroke-opacity\":x,\"fill-opacity\":l,fill:h},t.polyline(a,c).transform({translate:[e+n,i+2*n],scale:[-1,-1]}),t.polyline(a,c).transform({translate:[e+n,i],scale:[1,1]})}function g(t,e,i,n,o){var a=s(o),l=r(o),h=p(n),c={stroke:E,\"stroke-opacity\":x,\"fill-opacity\":a,fill:l};t.polyline(h,c).transform({translate:[e,i+n],scale:[1,-1]}),t.polyline(h,c).transform({translate:[e+2*n,i+n],scale:[-1,-1]}),t.polyline(h,c).transform({translate:[e,i+n],scale:[1,1]}),t.polyline(h,c).transform({translate:[e+2*n,i+n],scale:[-1,1]})}function v(t,e){var i=t/2;return[0,0,e,i,0,t,0,0].join(\",\")}var m=t(\"extend\"),y=t(\"./color\"),b=t(\"./sha1\"),w=t(\"./svg\"),T={baseColor:\"#933c3c\"},C=[\"octogons\",\"overlappingCircles\",\"plusSigns\",\"xes\",\"sineWaves\",\"hexagons\",\"overlappingRings\",\"plaid\",\"triangles\",\"squares\",\"concentricCircles\",\"diamonds\",\"tessellation\",\"nestedSquares\",\"mosaicSquares\",\"chevrons\"],_=\"#222\",k=\"#ddd\",E=\"#000\",x=.02,S=.02,I=.15,A=e.exports=function(t,e){return this.opts=m({},T,e),this.hash=e.hash||b(t),this.svg=new w,this.generateBackground(),this.generatePattern(),this};A.prototype.toSvg=function(){return this.svg.toString()},A.prototype.toString=function(){return this.toSvg()},A.prototype.toBase64=function(){var t,e=this.toSvg();return t=\"undefined\"!=typeof window&&\"function\"==typeof window.btoa?window.btoa(e):new i(e).toString(\"base64\")},A.prototype.toDataUri=function(){return\"data:image/svg+xml;base64,\"+this.toBase64()},A.prototype.toDataUrl=function(){return'url(\"'+this.toDataUri()+'\")'},A.prototype.generateBackground=function(){var t,e,i,r;this.opts.color?i=y.hex2rgb(this.opts.color):(e=o(n(this.hash,14,3),0,4095,0,359),r=n(this.hash,17),t=y.rgb2hsl(y.hex2rgb(this.opts.baseColor)),t.h=(360*t.h-e+360)%360/360,t.s=r%2===0?Math.min(1,(100*t.s+r)/100):Math.max(0,(100*t.s-r)/100),i=y.hsl2rgb(t)),this.color=y.rgb2hex(i),this.svg.rect(0,0,\"100%\",\"100%\",{fill:y.rgb2rgbString(i)})},A.prototype.generatePattern=function(){var t=this.opts.generator;if(t){if(C.indexOf(t)f;f++)for(u=0;6>u;u++)c=n(this.hash,i),t=u%2===0?f*g:f*g+g/2,l=s(c),e=r(c),h={fill:e,\"fill-opacity\":l,stroke:E,\"stroke-opacity\":x},this.svg.polyline(m,h).transform({translate:[u*d*1.5-v/2,t-g/2]}),0===u&&this.svg.polyline(m,h).transform({translate:[6*d*1.5-v/2,t-g/2]}),0===f&&(t=u%2===0?6*g:6*g+g/2,this.svg.polyline(m,h).transform({translate:[u*d*1.5-v/2,t-g/2]})),0===u&&0===f&&this.svg.polyline(m,h).transform({translate:[6*d*1.5-v/2,5*g+g/2]}),i++},A.prototype.geoSineWaves=function(){var t,e,i,a,l,h,c,u=Math.floor(o(n(this.hash,0),0,15,100,400)),f=Math.floor(o(n(this.hash,1),0,15,30,100)),p=Math.floor(o(n(this.hash,2),0,15,3,30));for(this.svg.setWidth(u),this.svg.setHeight(36*p),e=0;36>e;e++)h=n(this.hash,e),i=s(h),t=r(h),c=u/4*.7,l={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":\"\"+p+\"px\"},a=\"M0 \"+f+\" C \"+c+\" 0, \"+(u/2-c)+\" 0, \"+u/2+\" \"+f+\" S \"+(u-c)+\" \"+2*f+\", \"+u+\" \"+f+\" S \"+(1.5*u-c)+\" 0, \"+1.5*u+\", \"+f,this.svg.path(a,l).transform({translate:[-u/4,p*e-1.5*f]}),this.svg.path(a,l).transform({translate:[-u/4,p*e-1.5*f+36*p]})},A.prototype.geoChevrons=function(){var t,e,i,a,h,c,u,f=o(n(this.hash,0),0,15,30,80),p=o(n(this.hash,0),0,15,30,80),d=l(f,p);for(this.svg.setWidth(6*f),this.svg.setHeight(6*p*.66),e=0,u=0;6>u;u++)for(c=0;6>c;c++)h=n(this.hash,e),i=s(h),t=r(h),a={stroke:E,\"stroke-opacity\":x,fill:t,\"fill-opacity\":i,\"stroke-width\":1},this.svg.group(a).transform({translate:[c*f,u*p*.66-p/2]}).polyline(d).end(),0===u&&this.svg.group(a).transform({translate:[c*f,6*p*.66-p/2]}).polyline(d).end(),e+=1},A.prototype.geoPlusSigns=function(){var t,e,i,a,l,c,u,f,p=o(n(this.hash,0),0,15,10,25),d=3*p,g=h(p);for(this.svg.setWidth(12*p),this.svg.setHeight(12*p),i=0,f=0;6>f;f++)for(u=0;6>u;u++)c=n(this.hash,i),a=s(c),e=r(c),t=f%2===0?0:1,l={fill:e,stroke:E,\"stroke-opacity\":x,\"fill-opacity\":a},this.svg.group(l).transform({translate:[u*d-u*p+t*p-p,f*d-f*p-d/2]}).rect(g).end(),0===u&&this.svg.group(l).transform({translate:[4*d-u*p+t*p-p,f*d-f*p-d/2]}).rect(g).end(),0===f&&this.svg.group(l).transform({translate:[u*d-u*p+t*p-p,4*d-f*p-d/2]}).rect(g).end(),0===u&&0===f&&this.svg.group(l).transform({translate:[4*d-u*p+t*p-p,4*d-f*p-d/2]}).rect(g).end(),i++},A.prototype.geoXes=function(){var t,e,i,a,l,c,u,f,p=o(n(this.hash,0),0,15,10,25),d=h(p),g=3*p*.943;for(this.svg.setWidth(3*g),this.svg.setHeight(3*g),i=0,f=0;6>f;f++)for(u=0;6>u;u++)c=n(this.hash,i),a=s(c),t=u%2===0?f*g-.5*g:f*g-.5*g+g/4,e=r(c),l={fill:e,opacity:a},this.svg.group(l).transform({translate:[u*g/2-g/2,t-f*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),0===u&&this.svg.group(l).transform({translate:[6*g/2-g/2,t-f*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),0===f&&(t=u%2===0?6*g-g/2:6*g-g/2+g/4,this.svg.group(l).transform({translate:[u*g/2-g/2,t-6*g/2],rotate:[45,g/2,g/2]}).rect(d).end()),5===f&&this.svg.group(l).transform({translate:[u*g/2-g/2,t-11*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),0===u&&0===f&&this.svg.group(l).transform({translate:[6*g/2-g/2,t-6*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),i++},A.prototype.geoOverlappingCircles=function(){var t,e,i,a,l,h,c,u=n(this.hash,0),f=o(u,0,15,25,200),p=f/2;for(this.svg.setWidth(6*p),this.svg.setHeight(6*p),e=0,c=0;6>c;c++)for(h=0;6>h;h++)l=n(this.hash,e),i=s(l),t=r(l),a={fill:t,opacity:i},this.svg.circle(h*p,c*p,p,a),0===h&&this.svg.circle(6*p,c*p,p,a),0===c&&this.svg.circle(h*p,6*p,p,a),0===h&&0===c&&this.svg.circle(6*p,6*p,p,a),e++},A.prototype.geoOctogons=function(){var t,e,i,a,l,h,u=o(n(this.hash,0),0,15,10,60),f=c(u);for(this.svg.setWidth(6*u),this.svg.setHeight(6*u),e=0,h=0;6>h;h++)for(l=0;6>l;l++)a=n(this.hash,e),i=s(a),t=r(a),this.svg.polyline(f,{fill:t,\"fill-opacity\":i,stroke:E,\"stroke-opacity\":x}).transform({translate:[l*u,h*u]}),e+=1},A.prototype.geoSquares=function(){var t,e,i,a,l,h,c=o(n(this.hash,0),0,15,10,60);for(this.svg.setWidth(6*c),this.svg.setHeight(6*c),e=0,h=0;6>h;h++)for(l=0;6>l;l++)a=n(this.hash,e),i=s(a),t=r(a),this.svg.rect(l*c,h*c,c,c,{fill:t,\"fill-opacity\":i,stroke:E,\"stroke-opacity\":x}),e+=1},A.prototype.geoConcentricCircles=function(){var t,e,i,a,l,h,c=n(this.hash,0),u=o(c,0,15,10,60),f=u/5;for(this.svg.setWidth(6*(u+f)),this.svg.setHeight(6*(u+f)),e=0,h=0;6>h;h++)for(l=0;6>l;l++)a=n(this.hash,e),i=s(a),t=r(a),this.svg.circle(l*u+l*f+(u+f)/2,h*u+h*f+(u+f)/2,u/2,{fill:\"none\",stroke:t,opacity:i,\"stroke-width\":f+\"px\"}),a=n(this.hash,39-e),i=s(a),t=r(a),this.svg.circle(l*u+l*f+(u+f)/2,h*u+h*f+(u+f)/2,u/4,{fill:t,\"fill-opacity\":i}),e+=1},A.prototype.geoOverlappingRings=function(){var t,e,i,a,l,h,c,u=n(this.hash,0),f=o(u,0,15,10,60),p=f/4;for(this.svg.setWidth(6*f),this.svg.setHeight(6*f),e=0,c=0;6>c;c++)for(h=0;6>h;h++)l=n(this.hash,e),i=s(l),t=r(l),a={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":p+\"px\"},this.svg.circle(h*f,c*f,f-p/2,a),0===h&&this.svg.circle(6*f,c*f,f-p/2,a),0===c&&this.svg.circle(h*f,6*f,f-p/2,a),0===h&&0===c&&this.svg.circle(6*f,6*f,f-p/2,a),e+=1},A.prototype.geoTriangles=function(){var t,e,i,a,l,h,c,f,p=n(this.hash,0),d=o(p,0,15,15,80),g=d/2*Math.sqrt(3),v=u(d,g);for(this.svg.setWidth(3*d),this.svg.setHeight(6*g),e=0,f=0;6>f;f++)for(c=0;6>c;c++)h=n(this.hash,e),i=s(h),t=r(h),l={fill:t,\"fill-opacity\":i,stroke:E,\"stroke-opacity\":x},a=f%2===0?c%2===0?180:0:c%2!==0?180:0,this.svg.polyline(v,l).transform({translate:[c*d*.5-d/2,g*f],rotate:[a,d/2,g/2]}),0===c&&this.svg.polyline(v,l).transform({translate:[6*d*.5-d/2,g*f],rotate:[a,d/2,g/2]}),e+=1},A.prototype.geoDiamonds=function(){var t,e,i,a,l,h,c,u,p=o(n(this.hash,0),0,15,10,50),d=o(n(this.hash,1),0,15,10,50),g=f(p,d);for(this.svg.setWidth(6*p),this.svg.setHeight(3*d),i=0,u=0;6>u;u++)for(c=0;6>c;c++)h=n(this.hash,i),a=s(h),e=r(h),l={fill:e,\"fill-opacity\":a,stroke:E,\"stroke-opacity\":x},t=u%2===0?0:p/2,this.svg.polyline(g,l).transform({translate:[c*p-p/2+t,d/2*u-d/2]}),0===c&&this.svg.polyline(g,l).transform({translate:[6*p-p/2+t,d/2*u-d/2]}),0===u&&this.svg.polyline(g,l).transform({translate:[c*p-p/2+t,d/2*6-d/2]}),0===c&&0===u&&this.svg.polyline(g,l).transform({translate:[6*p-p/2+t,d/2*6-d/2]}),i+=1},A.prototype.geoNestedSquares=function(){var t,e,i,a,l,h,c,u=o(n(this.hash,0),0,15,4,12),f=7*u;for(this.svg.setWidth(6*(f+u)+6*u),this.svg.setHeight(6*(f+u)+6*u),e=0,c=0;6>c;c++)for(h=0;6>h;h++)l=n(this.hash,e),i=s(l),t=r(l),a={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":u+\"px\"},this.svg.rect(h*f+h*u*2+u/2,c*f+c*u*2+u/2,f,f,a),l=n(this.hash,39-e),i=s(l),t=r(l),a={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":u+\"px\"},this.svg.rect(h*f+h*u*2+u/2+2*u,c*f+c*u*2+u/2+2*u,3*u,3*u,a),e+=1},A.prototype.geoMosaicSquares=function(){var t,e,i,r=o(n(this.hash,0),0,15,15,50);for(this.svg.setWidth(8*r),this.svg.setHeight(8*r),t=0,i=0;4>i;i++)for(e=0;4>e;e++)e%2===0?i%2===0?g(this.svg,e*r*2,i*r*2,r,n(this.hash,t)):d(this.svg,e*r*2,i*r*2,r,[n(this.hash,t),n(this.hash,t+1)]):i%2===0?d(this.svg,e*r*2,i*r*2,r,[n(this.hash,t),n(this.hash,t+1)]):g(this.svg,e*r*2,i*r*2,r,n(this.hash,t)),t+=1},A.prototype.geoPlaid=function(){var t,e,i,o,a,l,h,c=0,u=0;for(e=0;36>e;)o=n(this.hash,e),c+=o+5,h=n(this.hash,e+1),i=s(h),t=r(h),a=h+5,this.svg.rect(0,c,\"100%\",a,{opacity:i,fill:t}),c+=a,e+=2;for(e=0;36>e;)o=n(this.hash,e),u+=o+5,h=n(this.hash,e+1),i=s(h),t=r(h),l=h+5,this.svg.rect(u,0,l,\"100%\",{opacity:i,fill:t}),u+=l,e+=2;this.svg.setWidth(u),this.svg.setHeight(c)},A.prototype.geoTessellation=function(){var t,e,i,a,l,h=o(n(this.hash,0),0,15,5,40),c=h*Math.sqrt(3),u=2*h,f=h/2*Math.sqrt(3),p=v(h,f),d=3*h+2*f,g=2*c+2*h;for(this.svg.setWidth(d),this.svg.setHeight(g),e=0;20>e;e++)switch(l=n(this.hash,e),i=s(l),t=r(l),a={stroke:E,\"stroke-opacity\":x,fill:t,\"fill-opacity\":i,\"stroke-width\":1},e){case 0:this.svg.rect(-h/2,-h/2,h,h,a),this.svg.rect(d-h/2,-h/2,h,h,a),this.svg.rect(-h/2,g-h/2,h,h,a),this.svg.rect(d-h/2,g-h/2,h,h,a);break;case 1:this.svg.rect(u/2+f,c/2,h,h,a);break;case 2:this.svg.rect(-h/2,g/2-h/2,h,h,a),this.svg.rect(d-h/2,g/2-h/2,h,h,a);break;case 3:this.svg.rect(u/2+f,1.5*c+h,h,h,a);break;case 4:this.svg.polyline(p,a).transform({translate:[h/2,-h/2],rotate:[0,h/2,f/2]}),this.svg.polyline(p,a).transform({translate:[h/2,g- -h/2],rotate:[0,h/2,f/2],scale:[1,-1]});break;case 5:this.svg.polyline(p,a).transform({translate:[d-h/2,-h/2],rotate:[0,h/2,f/2],scale:[-1,1]}),this.svg.polyline(p,a).transform({translate:[d-h/2,g+h/2],rotate:[0,h/2,f/2],scale:[-1,-1]});break;case 6:this.svg.polyline(p,a).transform({translate:[d/2+h/2,c/2]});break;case 7:this.svg.polyline(p,a).transform({translate:[d-d/2-h/2,c/2],scale:[-1,1]});break;case 8:this.svg.polyline(p,a).transform({translate:[d/2+h/2,g-c/2],scale:[1,-1]});break;case 9:this.svg.polyline(p,a).transform({translate:[d-d/2-h/2,g-c/2],scale:[-1,-1]});break;case 10:this.svg.polyline(p,a).transform({translate:[h/2,g/2-h/2]});break;case 11:this.svg.polyline(p,a).transform({translate:[d-h/2,g/2-h/2],scale:[-1,1]});break;case 12:this.svg.rect(0,0,h,h,a).transform({translate:[h/2,h/2],rotate:[-30,0,0]});break;case 13:this.svg.rect(0,0,h,h,a).transform({scale:[-1,1],translate:[-d+h/2,h/2],rotate:[-30,0,0]});break;case 14:this.svg.rect(0,0,h,h,a).transform({translate:[h/2,g/2-h/2-h],rotate:[30,0,h]});break;case 15:this.svg.rect(0,0,h,h,a).transform({scale:[-1,1],translate:[-d+h/2,g/2-h/2-h],rotate:[30,0,h]});break;case 16:this.svg.rect(0,0,h,h,a).transform({scale:[1,-1],translate:[h/2,-g+g/2-h/2-h],rotate:[30,0,h]});break;case 17:this.svg.rect(0,0,h,h,a).transform({scale:[-1,-1],translate:[-d+h/2,-g+g/2-h/2-h],rotate:[30,0,h]});break;case 18:this.svg.rect(0,0,h,h,a).transform({scale:[1,-1],translate:[h/2,-g+h/2],rotate:[-30,0,0]});break;case 19:this.svg.rect(0,0,h,h,a).transform({scale:[-1,-1],translate:[-d+h/2,-g+h/2],rotate:[-30,0,0]})}}}).call(this,t(\"buffer\").Buffer)},{\"./color\":2,\"./sha1\":5,\"./svg\":6,buffer:8,extend:9}],5:[function(t,e){\"use strict\";function i(){function t(){for(var t=16;80>t;t++){var e=u[t-3]^u[t-8]^u[t-14]^u[t-16];u[t]=e>31}var i,n,o=s,r=a,p=l,d=h,g=c;for(t=0;80>t;t++){20>t?(i=d^r&(p^d),n=1518500249):40>t?(i=r^p^d,n=1859775393):60>t?(i=r&p|d&(r|p),n=2400959708):(i=r^p^d,n=3395469782);var v=(o>27)+i+g+n+(0|u[t]);g=d,d=p,p=r>2,r=o,o=v}for(s=s+o|0,a=a+r|0,l=l+p|0,h=h+d|0,c=c+g|0,f=0,t=0;16>t;t++)u[t]=0}function e(e){u[f]|=(255&e)o;o++)e(t[o])}function o(t){for(var e=\"\",i=28;i>=0;i-=4)e+=(t>>i&15).toString(16);return e}function r(){e(128),(f>14||14===f&&24>p)&&t(),f=14,p=24,e(0),e(0),e(d>0xffffffffff?d/1099511627776:0),e(d>4294967295?d/4294967296:0);for(var i=24;i>=0;i-=8)e(d>>i);return o(s)+o(a)+o(l)+o(h)+o(c)}var s=1732584193,a=4023233417,l=2562383102,h=271733878,c=3285377520,u=new Uint32Array(80),f=0,p=24,d=0;return{update:n,digest:r}}e.exports=function(t){if(void 0===t)return i();var e=i();return e.update(t),e.digest()}},{}],6:[function(t,e){\"use strict\";function i(){return this.width=100,this.height=100,this.svg=new o(\"svg\"),this.context=[],this.setAttributes(this.svg,{xmlns:\"http://www.w3.org/2000/svg\",width:this.width,height:this.height}),this}var n=t(\"extend\"),o=t(\"./xml\");e.exports=i,i.prototype.currentContext=function(){return this.context[this.context.length-1]||this.svg},i.prototype.end=function(){return this.context.pop(),this},i.prototype.currentNode=function(){var t=this.currentContext();return t.lastChild||t},i.prototype.transform=function(t){return this.currentNode().setAttribute(\"transform\",Object.keys(t).map(function(e){return e+\"(\"+t[e].join(\",\")+\")\"}).join(\" \")),this},i.prototype.setAttributes=function(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})},i.prototype.setWidth=function(t){this.svg.setAttribute(\"width\",Math.floor(t))},i.prototype.setHeight=function(t){this.svg.setAttribute(\"height\",Math.floor(t))},i.prototype.toString=function(){return this.svg.toString()},i.prototype.rect=function(t,e,i,r,s){var a=this;if(Array.isArray(t))return t.forEach(function(t){a.rect.apply(a,t.concat(s))}),this;var l=new o(\"rect\");return this.currentContext().appendChild(l),this.setAttributes(l,n({x:t,y:e,width:i,height:r},s)),this},i.prototype.circle=function(t,e,i,r){var s=new o(\"circle\");return this.currentContext().appendChild(s),this.setAttributes(s,n({cx:t,cy:e,r:i},r)),this},i.prototype.path=function(t,e){var i=new o(\"path\");return this.currentContext().appendChild(i),this.setAttributes(i,n({d:t},e)),this},i.prototype.polyline=function(t,e){var i=this;if(Array.isArray(t))return t.forEach(function(t){i.polyline(t,e)}),this;var r=new o(\"polyline\");return this.currentContext().appendChild(r),this.setAttributes(r,n({points:t},e)),this},i.prototype.group=function(t){var e=new o(\"g\");return this.currentContext().appendChild(e),this.context.push(e),this.setAttributes(e,n({},t)),this}},{\"./xml\":7,extend:9}],7:[function(t,e){\"use strict\";var i=e.exports=function(t){return this instanceof i?(this.tagName=t,this.attributes=Object.create(null),this.children=[],this.lastChild=null,this):new i(t)};i.prototype.appendChild=function(t){return this.children.push(t),this.lastChild=t,this},i.prototype.setAttribute=function(t,e){return this.attributes[t]=e,this},i.prototype.toString=function(){var t=this;return[\"\",t.children.map(function(t){return t.toString()}).join(\"\"),\"\"].join(\"\")}},{}],8:[function(){},{}],9:[function(t,e){function i(t){if(!t||\"[object Object]\"!==o.call(t)||t.nodeType||t.setInterval)return!1;var e=n.call(t,\"constructor\"),i=n.call(t.constructor.prototype,\"isPrototypeOf\");if(t.constructor&&!e&&!i)return!1;var r;for(r in t);return void 0===r||n.call(t,r)}var n=Object.prototype.hasOwnProperty,o=Object.prototype.toString;e.exports=function r(){var t,e,n,o,s,a,l=arguments[0]||{},h=1,c=arguments.length,u=!1;for(\"boolean\"==typeof l&&(u=l,l=arguments[1]||{},h=2),\"object\"!=typeof l&&\"function\"!=typeof l&&(l={});c>h;h++)if(null!=(t=arguments[h]))for(e in t)n=l[e],o=t[e],l!==o&&(u&&o&&(i(o)||(s=Array.isArray(o)))?(s?(s=!1,a=n&&Array.isArray(n)?n:[]):a=n&&i(n)?n:{},l[e]=r(u,a,o)):void 0!==o&&(l[e]=o));return l}},{}]},{},[1])(1)}),function(){\"use strict\";if(navigator.userAgent.match(/IEMobile\\/10\\.0/)){var t=document.createElement(\"style\");t.appendChild(document.createTextNode(\"@-ms-viewport{width:auto!important}\")),document.querySelector(\"head\").appendChild(t)}}(),function(t){\"function\"==typeof define&&define.amd?define([\"jquery\"],t):\"object\"==typeof module&&module.exports?module.exports=function(e,i){return void 0===i&&(i=\"undefined\"!=typeof window?require(\"jquery\"):require(\"jquery\")(e)),t(i),i}:t(jQuery)}(function(t){function e(e,i){var o=this;this.options=t.extend({},n,i),o.navigation=t(e),o.document=t(document),o.window=t(window),\"\"==this.options.parent?this.options.parent=o.navigation.parent():\"\",o.nav_open=!1,o.parent_full_width=0,o.radCoef=180/Math.PI,o.sTouch={x:0,y:0},o.cTouch={x:0,y:0},o.sTime=0,o.nav_position=0,o.percent_open=0,o.nav_moving=!1,o.init()}var i=\"okayNav\",n={parent:\"\",toggle_icon_class:\"okayNav__menu-toggle\",toggle_icon_content:\"\",align_right:!0,swipe_enabled:!0,threshold:50,resize_delay:10,beforeOpen:function(){},afterOpen:function(){},beforeClose:function(){},afterClose:function(){},itemHidden:function(){},itemDisplayed:function(){}};t.extend(e.prototype,{init:function(){var e=this;t(\"body\").addClass(\"okayNav-loaded\"),e.navigation.addClass(\"okayNav loaded\").children(\"ul\").addClass(\"okayNav__nav--visible\"),e.options.align_right?e.navigation.append('').append(''+e.options.toggle_icon_content+\"\"):e.navigation.prepend('').prepend(''+e.options.toggle_icon_content+\"\"),e.nav_visible=e.navigation.children(\".okayNav__nav--visible\"),e.nav_invisible=e.navigation.children(\".okayNav__nav--invisible\"),e.toggle_icon=e.navigation.children(\".\"+e.options.toggle_icon_class),e.toggle_icon_width=e.toggle_icon.outerWidth(!0),e.default_width=e.getChildrenWidth(e.navigation),e.parent_full_width=t(e.options.parent).outerWidth(!0),e.last_visible_child_width=0,e.initEvents(),e.nav_visible.contents().filter(function(){return this.nodeType=Node.TEXT_NODE&&/\\S/.test(this.nodeValue)===!1}).remove(),1==e.options.swipe_enabled&&e.initSwipeEvents()},initEvents:function(){var e=this;e.document.on(\"click.okayNav\",function(i){var n=t(i.target);e.nav_open===!0&&0==n.closest(\".okayNav\").length&&e.closeInvisibleNav(),i.target===e.toggle_icon.get(0)&&(i.preventDefault(),e.toggleInvisibleNav())});var i=e._debounce(function(){e.recalcNav()},e.options.resize_delay);e.window.on(\"load.okayNav resize.okayNav\",i)},initSwipeEvents:function(){var e=this;e.document.on(\"touchstart.okayNav\",function(i){if(e.nav_invisible.removeClass(\"transition-enabled\"),1==i.originalEvent.touches.length){var n=i.originalEvent.touches[0];(n.pageXt(e.options.parent).outerWidth(!0)-25&&1==e.options.align_right||e.nav_open===!0)&&(e.sTouch.x=e.cTouch.x=n.pageX,e.sTouch.y=e.cTouch.y=n.pageY,e.sTime=Date.now())}}).on(\"touchmove.okayNav\",function(t){var i=t.originalEvent.touches[0];e._triggerMove(i.pageX,i.pageY),e.nav_moving=!0}).on(\"touchend.okayNav\",function(t){e.sTouch={x:0,y:0},e.cTouch={x:0,y:0},e.sTime=0,e.percent_open>100-e.options.threshold?(e.nav_position=0,e.closeInvisibleNav()):1==e.nav_moving&&(e.nav_position=e.nav_invisible.width(),e.openInvisibleNav()),e.nav_moving=!1,e.nav_invisible.addClass(\"transition-enabled\")})},_getDirection:function(t){return this.options.align_right?t>0?-1:1:t=a||0>e||e>=a)&&s.isDark(t,e)}var s=t(n,i);s.addData(e),s.make(),o=o||0;var a=s.getModuleCount(),l=s.getModuleCount()+2*o,h=function(t,e,i,n){var o=this.isDark,r=1/l;this.isDark=function(s,a){var l=a*r,h=s*r,c=l+r,u=h+r;return o(s,a)&&(t>c||l>i||e>u||h>n)}};this.text=e,this.level=i,this.version=n,this.moduleCount=l,this.isDark=r,this.addBlank=h}function i(t,i,n,o,r){n=Math.max(1,n||1),o=Math.min(40,o||40);for(var s=n;o>=s;s+=1)try{return new e(t,i,s,r)}catch(t){}}function n(t,e,i){var n=i.size,o=\"bold \"+i.mSize*n+\"px \"+i.fontname,r=v(\"\")[0].getContext(\"2d\");r.font=o;var s=r.measureText(i.label).width,a=i.mSize,l=s/n,h=(1-l)*i.mPosX,c=(1-a)*i.mPosY,u=h+l,f=c+a,p=.01;1===i.mode?t.addBlank(0,c-p,n,f+p):t.addBlank(h-p,c-p,u+p,f+p),e.fillStyle=i.fontcolor,e.font=o,e.fillText(i.label,h*n,c*n+.75*i.mSize*n)}function o(t,e,i){var n=i.size,o=i.image.naturalWidth||1,r=i.image.naturalHeight||1,s=i.mSize,a=s*o/r,l=(1-a)*i.mPosX,h=(1-s)*i.mPosY,c=l+a,u=h+s,f=.01;3===i.mode?t.addBlank(0,h-f,n,u+f):t.addBlank(l-f,h-f,c+f,u+f),e.drawImage(i.image,l*n,h*n,a*n,s*n)}function r(t,e,i){v(i.background).is(\"img\")?e.drawImage(i.background,0,0,i.size,i.size):i.background&&(e.fillStyle=i.background,e.fillRect(i.left,i.top,i.size,i.size));var r=i.mode;1===r||2===r?n(t,e,i):(3===r||4===r)&&o(t,e,i)}function s(t,e,i,n,o,r,s,a){t.isDark(s,a)&&e.rect(n,o,r,r)}function a(t,e,i,n,o,r,s,a,l,h){s?t.moveTo(e+r,i):t.moveTo(e,i),a?(t.lineTo(n-r,i),t.arcTo(n,i,n,o,r)):t.lineTo(n,i),l?(t.lineTo(n,o-r),t.arcTo(n,o,e,o,r)):t.lineTo(n,o),h?(t.lineTo(e+r,o),t.arcTo(e,o,e,i,r)):t.lineTo(e,o),s?(t.lineTo(e,i+r),t.arcTo(e,i,n,i,r)):t.lineTo(e,i)}function l(t,e,i,n,o,r,s,a,l,h){s&&(t.moveTo(e+r,i),t.lineTo(e,i),t.lineTo(e,i+r),t.arcTo(e,i,e+r,i,r)),a&&(t.moveTo(n-r,i),t.lineTo(n,i),t.lineTo(n,i+r),t.arcTo(n,i,n-r,i,r)),l&&(t.moveTo(n-r,o),t.lineTo(n,o),t.lineTo(n,o-r), t.arcTo(n,o,n-r,o,r)),h&&(t.moveTo(e+r,o),t.lineTo(e,o),t.lineTo(e,o-r),t.arcTo(e,o,e+r,o,r))}function h(t,e,i,n,o,r,s,h){var c=t.isDark,u=n+r,f=o+r,p=i.radius*r,d=s-1,g=s+1,v=h-1,m=h+1,y=c(s,h),b=c(d,v),w=c(d,h),T=c(d,m),C=c(s,m),_=c(g,m),k=c(g,h),E=c(g,v),x=c(s,v);y?a(e,n,o,u,f,p,!w&&!x,!w&&!C,!k&&!C,!k&&!x):l(e,n,o,u,f,p,w&&x&&b,w&&C&&T,k&&C&&_,k&&x&&E)}function c(t,e,i){var n,o,r=t.moduleCount,a=i.size/r,l=s;for(y&&i.radius>0&&i.radiusn;n+=1)for(o=0;r>o;o+=1){var c=i.left+o*a,u=i.top+n*a,f=a;l(t,e,i,c,u,f,n,o)}if(v(i.fill).is(\"img\")){e.strokeStyle=\"rgba(0,0,0,0.5)\",e.lineWidth=2,e.stroke();var p=e.globalCompositeOperation;e.globalCompositeOperation=\"destination-out\",e.fill(),e.globalCompositeOperation=p,e.clip(),e.drawImage(i.fill,0,0,i.size,i.size),e.restore()}else e.fillStyle=i.fill,e.fill()}function u(t,e){var n=i(e.text,e.ecLevel,e.minVersion,e.maxVersion,e.quiet);if(!n)return null;var o=v(t).data(\"qrcode\",n),s=o[0].getContext(\"2d\");return r(n,s,e),c(n,s,e),o}function f(t){var e=v(\"\").attr(\"width\",t.size).attr(\"height\",t.size);return u(e,t)}function p(t){return v(\"\").attr(\"src\",f(t)[0].toDataURL(\"image/png\"))}function d(t){var e=i(t.text,t.ecLevel,t.minVersion,t.maxVersion,t.quiet);if(!e)return null;var n,o,r=t.size,s=t.background,a=Math.floor,l=e.moduleCount,h=a(r/l),c=a(.5*(r-h*l)),u={position:\"relative\",left:0,top:0,padding:0,margin:0,width:r,height:r},f={position:\"absolute\",padding:0,margin:0,width:h,height:h,\"background-color\":t.fill},p=v(\"\").data(\"qrcode\",e).css(u);for(s&&p.css(\"background-color\",s),n=0;l>n;n+=1)for(o=0;l>o;o+=1)e.isDark(n,o)&&v(\"\").css(f).css({left:c+o*h,top:c+n*h}).appendTo(p);return p}function g(t){return m&&\"canvas\"===t.render?f(t):m&&\"image\"===t.render?p(t):d(t)}var v=jQuery,m=function(){var t=document.createElement(\"canvas\");return Boolean(t.getContext&&t.getContext(\"2d\"))}(),y=\"[object Opera]\"!==Object.prototype.toString.call(window.opera),b={render:\"canvas\",minVersion:1,maxVersion:40,ecLevel:\"L\",left:0,top:0,size:200,fill:\"#000\",background:null,text:\"no text\",radius:0,quiet:0,mode:0,mSize:.1,mPosX:.5,mPosY:.5,label:\"no label\",fontname:\"sans\",fontcolor:\"#000\",image:null};v.fn.qrcode=function(t){var e=v.extend({},b,t);return this.each(function(){\"canvas\"===this.nodeName.toLowerCase()?u(this,e):v(this).append(g(e))})}}(function(){var t=function(){function t(e,i){if(\"undefined\"==typeof e.length)throw new Error(e.length+\"/\"+i);var n=function(){for(var t=0;t=n;n+=1)-1>=e+n||e+n>=p||(i>=0&&6>=i&&(0==n||6==n)||n>=0&&6>=n&&(0==i||6==i)||i>=2&&4>=i&&n>=2&&4>=n?f[t+i][e+n]=!0:f[t+i][e+n]=!1)},w=function(){for(var t=0,e=0,i=0;8>i;i+=1){y(!0,i);var n=r.getLostPoint(m);(0==i||t>n)&&(t=n,e=i)}return e},T=function(){for(var t=8;p-8>t;t+=1)null==f[t][6]&&(f[t][6]=t%2==0);for(var e=8;p-8>e;e+=1)null==f[6][e]&&(f[6][e]=e%2==0)},C=function(){for(var t=r.getPatternPosition(c),e=0;e=a;a+=1)-2==s||2==s||-2==a||2==a||0==s&&0==a?f[n+s][o+a]=!0:f[n+s][o+a]=!1}},_=function(t){for(var e=r.getBCHTypeNumber(c),i=0;18>i;i+=1){var n=!t&&1==(e>>i&1);f[Math.floor(i/3)][i%3+p-8-3]=n}for(var i=0;18>i;i+=1){var n=!t&&1==(e>>i&1);f[i%3+p-8-3][Math.floor(i/3)]=n}},k=function(t,e){for(var i=u>o&1);6>o?f[o][8]=s:8>o?f[o+1][8]=s:f[p-15+o][8]=s}for(var o=0;15>o;o+=1){var s=!t&&1==(n>>o&1);8>o?f[8][p-o-1]=s:9>o?f[8][15-o-1+1]=s:f[8][15-o-1]=s}f[p-8][8]=!t},E=function(t,e){for(var i=-1,n=p-1,o=7,s=0,a=r.getMaskFunction(e),l=p-1;l>0;l-=2)for(6==l&&(l-=1);;){for(var h=0;2>h;h+=1)if(null==f[n][l-h]){var c=!1;s>>o&1));var u=a(n,l-h);u&&(c=!c),f[n][l-h]=c,o-=1,-1==o&&(s+=1,o=7)}if(n+=i,0>n||n>=p){n-=i,i=-i;break}}},x=function(e,i){for(var n=0,o=0,s=0,a=new Array(i.length),l=new Array(i.length),h=0;h=n&&o>i){var r=Math.floor((e-n)/t),s=Math.floor((i-n)/t);return m.isDark(s,r)?0:1}return 1})},m};e.stringToBytes=function(t){for(var e=new Array,i=0;i>=1;return e};return l.getBCHTypeInfo=function(t){for(var e=t=e))for(var l=-1;1>=l;l+=1)0>o+l||o+l>=e||(0!=a||0!=l)&&s==t.isDark(n+a,o+l)&&(r+=1);r>5&&(i+=3+r-5)}for(var n=0;e-1>n;n+=1)for(var o=0;e-1>o;o+=1){var h=0;t.isDark(n,o)&&(h+=1),t.isDark(n+1,o)&&(h+=1),t.isDark(n,o+1)&&(h+=1),t.isDark(n+1,o+1)&&(h+=1),(0==h||4==h)&&(i+=3)}for(var n=0;e>n;n+=1)for(var o=0;e-6>o;o+=1)t.isDark(n,o)&&!t.isDark(n,o+1)&&t.isDark(n,o+2)&&t.isDark(n,o+3)&&t.isDark(n,o+4)&&!t.isDark(n,o+5)&&t.isDark(n,o+6)&&(i+=40);for(var o=0;e>o;o+=1)for(var n=0;e-6>n;n+=1)t.isDark(n,o)&&!t.isDark(n+1,o)&&t.isDark(n+2,o)&&t.isDark(n+3,o)&&t.isDark(n+4,o)&&!t.isDark(n+5,o)&&t.isDark(n+6,o)&&(i+=40);for(var c=0,o=0;e>o;o+=1)for(var n=0;e>n;n+=1)t.isDark(n,o)&&(c+=1);var u=Math.abs(100*c/e/e-50)/5;return i+=10*u},l}(),s=function(){for(var t=new Array(256),e=new Array(256),i=0;8>i;i+=1)t[i]=1i;i+=1)e[t[i]]=i;var n={};return n.glog=function(t){if(1>t)throw new Error(\"glog(\"+t+\")\");return e[t]},n.gexp=function(e){for(;0>e;)e+=255;for(;e>=256;)e-=255;return t[e]},n}(),a=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],e=function(t,e){var i={};return i.totalCount=t,i.dataCount=e,i},i={},o=function(e,i){switch(i){case n.L:return t[4*(e-1)+0];case n.M:return t[4*(e-1)+1];case n.Q:return t[4*(e-1)+2];case n.H:return t[4*(e-1)+3];default:return}};return i.getRSBlocks=function(t,i){var n=o(t,i);if(\"undefined\"==typeof n)throw new Error(\"bad rs block @ typeNumber:\"+t+\"/errorCorrectLevel:\"+i);for(var r=n.length/3,s=new Array,a=0;r>a;a+=1)for(var l=n[3*a+0],h=n[3*a+1],c=n[3*a+2],u=0;l>u;u+=1)s.push(e(h,c));return s},i}(),l=function(){var t=new Array,e=0,i={};return i.getBuffer=function(){return t},i.getAt=function(e){var i=Math.floor(e/8);return 1==(t[i]>>>7-e%8&1)},i.put=function(t,e){for(var n=0;e>n;n+=1)i.putBit(1==(t>>>e-n-1&1))},i.getLengthInBits=function(){return e},i.putBit=function(i){var n=Math.floor(e/8);t.length>>e%8),e+=1},i},h=function(t){var n=i.MODE_8BIT_BYTE,o=e.stringToBytes(t),r={};return r.getMode=function(){return n},r.getLength=function(t){return o.length},r.write=function(t){for(var e=0;e>>8)},e.writeBytes=function(t,i,n){i=i||0,n=n||t.length;for(var o=0;n>o;o+=1)e.writeByte(t[o+i])},e.writeString=function(t){for(var i=0;it);else{if(26>t)return 65+t;if(52>t)return 97+(t-26);if(62>t)return 48+(t-52);if(62==t)return 43;if(63==t)return 47}throw new Error(\"n:\"+t)};return o.writeByte=function(n){for(t=t>>e-6),e-=6},o.flush=function(){if(e>0&&(r(to;){if(i>=e.length){if(0==o)return-1;throw new Error(\"unexpected end of file./\"+o)}var t=e.charAt(i);if(i+=1,\"=\"==t)return o=0,-1;t.match(/^\\s$/)||(n=n>o-8&255;return o-=8,r};var s=function(t){if(t>=65&&90>=t)return t-65;if(t>=97&&122>=t)return t-97+26;if(t>=48&&57>=t)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error(\"c:\"+t)};return r},p=function(t,e){var i=t,n=e,o=new Array(t*e),r={};r.setPixel=function(t,e,n){o[e*i+t]=n},r.write=function(t){t.writeString(\"GIF87a\"),t.writeShort(i),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(\",\"),t.writeShort(0),t.writeShort(0),t.writeShort(i),t.writeShort(n),t.writeByte(0);var e=2,o=a(e);t.writeByte(e);for(var r=0;o.length-r>255;)t.writeByte(255),t.writeBytes(o,r,255),r+=255;t.writeByte(o.length-r),t.writeBytes(o,r,o.length-r),t.writeByte(0),t.writeString(\";\")};var s=function(t){var e=t,i=0,n=0,o={};return o.write=function(t,o){if(t>>>o!=0)throw new Error(\"length over\");for(;i+o>=8;)e.writeByte(255&(t>=8-i,n=0,i=0;n|=t12,128|n>>6&63,128|63&n):(i++,n=65536+((1023&n)18,128|n>>12&63,128|n>>6&63,128|63&n))}return e}return e(t)}}(t),t}()),function(t){t.fn.share=function(e){function i(e,i){var n=o(i);\"prepend\"==i.mode?n.reverse():n,n.length&&t.each(n,function(n,o){var s=r(o,i),a=i.initialized?e.find(\".icon-\"+o):t('');return!a.length||(a.prop(\"aria-label\",\"分享到 \"+f[o]),a.prop(\"href\",s),\"wechat\"===o?a.prop(\"tabindex\",-1):a.prop(\"target\",\"_blank\"),void(i.initialized||(\"prepend\"==i.mode?e.prepend(a):e.append(a))))})}function n(t,e){var i=t.find(\"a.icon-wechat\");i.length&&(i.append(''+e.wechatQrcodeTitle+''+e.wechatQrcodeHelper+\"\"),i.find(\".qrcode\").qrcode({render:\"image\",size:e.wechatQrcodeSize,text:e.url}),i.offset().top"},{"title":"","date":"2022-06-24T18:07:49.466Z","updated":"2022-06-24T18:07:49.466Z","comments":true,"path":"js/plugin.js","permalink":"http://fyupeng.github.io/js/plugin.js","excerpt":"","text":"/** * baiduTemplate简单好用的Javascript模板引擎 1.0.6 版本 * http://baidufe.github.com/BaiduTemplate * 开源协议：BSD License * 浏览器环境占用命名空间 baidu.template ，nodejs环境直接安装 npm install baidutemplate * @param str{String} dom结点ID，或者模板string * @param data{Object} 需要渲染的json对象，可以为空。当data为{}时，仍然返回html。 * @return 如果无data，直接返回编译后的函数；如果有data，返回html。 * @author wangxiao * @email 1988wangxiao@gmail.com */ ;(function(window){ //取得浏览器环境的baidu命名空间，非浏览器环境符合commonjs规范exports出去 //修正在nodejs环境下，采用baidu.template变量名 var baidu = typeof module === 'undefined' ? (window.baidu = window.baidu || {}) : module.exports; //模板函数（放置于baidu.template命名空间下） baidu.template = function(str, data){ //检查是否有该id的元素存在，如果有元素则获取元素的innerHTML/value，否则认为字符串为模板 var fn = (function(){ //判断如果没有document，则为非浏览器环境 if(!window.document){ return bt._compile(str); }; //HTML5规定ID可以由任何不包含空格字符的字符串组成 var element = document.getElementById(str); if (element) { //取到对应id的dom，缓存其编译后的HTML模板函数 if (bt.cache[str]) { return bt.cache[str]; }; //textarea或input则取value，其它情况取innerHTML var html = /^(textarea|input)$/i.test(element.nodeName) ? element.value : element.innerHTML; return bt._compile(html); }else{ //是模板字符串，则生成一个函数 //如果直接传入字符串作为模板，则可能变化过多，因此不考虑缓存 return bt._compile(str); }; })(); //有数据则返回HTML字符串，没有数据则返回函数 支持data={}的情况 var result = bt._isObject(data) ? fn( data ) : fn; fn = null; return result; }; //取得命名空间 baidu.template var bt = baidu.template; //标记当前版本 bt.versions = bt.versions || []; bt.versions.push('1.0.6'); //缓存 将对应id模板生成的函数缓存下来。 bt.cache = {}; //自定义分隔符，可以含有正则中的字符，可以是HTML注释开头 bt.LEFT_DELIMITER = bt.LEFT_DELIMITER||'{ %'; bt.RIGHT_DELIMITER = bt.RIGHT_DELIMITER||'% }'; //自定义默认是否转义，默认为默认自动转义 bt.ESCAPE = true; //HTML转义 bt._encodeHTML = function (source) { return String(source) .replace(/&/g,'&amp;') .replace(//g,'&gt;') .replace(/\\\\/g,'&#92;') .replace(/\"/g,'&quot;') .replace(/'/g,'&#39;'); }; //转义影响正则的字符 bt._encodeReg = function (source) { return String(source).replace(/([.*+?^=!:${}()|[\\]/\\\\])/g,'\\\\$1'); }; //转义UI UI变量使用在HTML页面标签onclick等事件函数参数中 bt._encodeEventHTML = function (source) { return String(source) .replace(/&/g,'&amp;') .replace(//g,'&gt;') .replace(/\"/g,'&quot;') .replace(/'/g,'&#39;') .replace(/\\\\\\\\/g,'\\\\') .replace(/\\\\\\//g,'\\/') .replace(/\\\\n/g,'\\n') .replace(/\\\\r/g,'\\r'); }; //将字符串拼接生成函数，即编译过程(compile) bt._compile = function(str){ var funBody = \"var _template_fun_array=[];\\nvar fn=(function(__data__){\\nvar _template_varName='';\\nfor(name in __data__){\\n_template_varName+=('var '+name+'=__data__[\\\"'+name+'\\\"];');\\n};\\neval(_template_varName);\\n_template_fun_array.push('\"+bt._analysisStr(str)+\"');\\n_template_varName=null;\\n})(_template_object);\\nfn = null;\\nreturn _template_fun_array.join('');\\n\"; return new Function(\"_template_object\",funBody); }; //判断是否是Object类型 bt._isObject = function (source) { return 'function' === typeof source || !!(source && 'object' === typeof source); }; //解析模板字符串 bt._analysisStr = function(str){ //取得分隔符 var _left_ = bt.LEFT_DELIMITER; var _right_ = bt.RIGHT_DELIMITER; //对分隔符进行转义，支持正则中的元字符，可以是HTML注释 var _left = bt._encodeReg(_left_); var _right = bt._encodeReg(_right_); str = String(str) //去掉分隔符中js注释 .replace(new RegExp(\"(\"+_left+\"[^\"+_right+\"]*)//.*\\n\",\"g\"), \"$1\") //去掉注释内容 //默认支持HTML注释，将HTML注释匹配掉的原因是用户有可能用 来做分割符 .replace(new RegExp(\"\", \"g\"),\"\") .replace(new RegExp(_left+\"\\\\*.*?\\\\*\"+_right, \"g\"),\"\") //把所有换行去掉 \\r回车符 \\t制表符 \\n换行符 .replace(new RegExp(\"[\\\\r\\\\t\\\\n]\",\"g\"), \"\") //用来处理非分隔符内部的内容中含有 斜杠 \\ 单引号 ‘ ，处理办法为HTML转义 .replace(new RegExp(_left+\"(?:(?!\"+_right+\")[\\\\s\\\\S])*\"+_right+\"|((?:(?!\"+_left+\")[\\\\s\\\\S])+)\",\"g\"),function (item, $1) { var str = ''; if($1){ //将 斜杠 单引 HTML转义 str = $1.replace(/\\\\/g,\"&#92;\").replace(/'/g,'&#39;'); while(/\"+8*h+\")\");for(c.getLengthInBits()+4=8*h)&&(c.put(o,8),!(c.getLengthInBits()>=8*h));)c.put(a,8);return C(c,n)};return w.addData=function(r){var t=c(r);p.push(t),v=null},w.isDark=function(r,t){if(0>r||r>=d||0>t||t>=d)throw new Error(r+\",\"+t);return h[r][t]},w.getModuleCount=function(){return d},w.make=function(){m(!1,y())},w.createTableTag=function(r,t){r=r||2,t=\"undefined\"==typeof t?4*r:t;var e=\"\";e+='',e+=\"\";for(var n=0;nt&&e>=n&&o>e){var i=Math.floor((t-n)/r),a=Math.floor((e-n)/r);return w.isDark(a,i)?0:1}return 1})},w};t.stringToBytes=function(r){for(var t=new Array,e=0;e>=1;return t};return f.getBCHTypeInfo=function(r){for(var t=r=t))for(var f=-1;1>=f;f+=1)0>o+f||o+f>=t||(0!=u||0!=f)&&a==r.isDark(n+u,o+f)&&(i+=1);i>5&&(e+=3+i-5)}for(var n=0;t-1>n;n+=1)for(var o=0;t-1>o;o+=1){var c=0;r.isDark(n,o)&&(c+=1),r.isDark(n+1,o)&&(c+=1),r.isDark(n,o+1)&&(c+=1),r.isDark(n+1,o+1)&&(c+=1),(0==c||4==c)&&(e+=3)}for(var n=0;t>n;n+=1)for(var o=0;t-6>o;o+=1)r.isDark(n,o)&&!r.isDark(n,o+1)&&r.isDark(n,o+2)&&r.isDark(n,o+3)&&r.isDark(n,o+4)&&!r.isDark(n,o+5)&&r.isDark(n,o+6)&&(e+=40);for(var o=0;t>o;o+=1)for(var n=0;t-6>n;n+=1)r.isDark(n,o)&&!r.isDark(n+1,o)&&r.isDark(n+2,o)&&r.isDark(n+3,o)&&r.isDark(n+4,o)&&!r.isDark(n+5,o)&&r.isDark(n+6,o)&&(e+=40);for(var s=0,o=0;t>o;o+=1)for(var n=0;t>n;n+=1)r.isDark(n,o)&&(s+=1);var l=Math.abs(100*s/t/t-50)/5;return e+=10*l},f}(),a=function(){for(var r=new Array(256),t=new Array(256),e=0;8>e;e+=1)r[e]=1e;e+=1)t[r[e]]=e;var n={};return n.glog=function(r){if(1>r)throw new Error(\"glog(\"+r+\")\");return t[r]},n.gexp=function(t){for(;0>t;)t+=255;for(;t>=256;)t-=255;return r[t]},n}(),u=function(){var r=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],t=function(r,t){var e={};return e.totalCount=r,e.dataCount=t,e},e={},o=function(t,e){switch(e){case n.L:return r[4*(t-1)+0];case n.M:return r[4*(t-1)+1];case n.Q:return r[4*(t-1)+2];case n.H:return r[4*(t-1)+3];default:return}};return e.getRSBlocks=function(r,e){var n=o(r,e);if(\"undefined\"==typeof n)throw new Error(\"bad rs block @ typeNumber:\"+r+\"/errorCorrectLevel:\"+e);for(var i=n.length/3,a=new Array,u=0;i>u;u+=1)for(var f=n[3*u+0],c=n[3*u+1],s=n[3*u+2],l=0;f>l;l+=1)a.push(t(c,s));return a},e}(),f=function(){var r=new Array,t=0,e={};return e.getBuffer=function(){return r},e.getAt=function(t){var e=Math.floor(t/8);return 1==(r[e]>>>7-t%8&1)},e.put=function(r,t){for(var n=0;t>n;n+=1)e.putBit(1==(r>>>t-n-1&1))},e.getLengthInBits=function(){return t},e.putBit=function(e){var n=Math.floor(t/8);r.length>>t%8),t+=1},e},c=function(r){var n=e.MODE_8BIT_BYTE,o=t.stringToBytes(r),i={};return i.getMode=function(){return n},i.getLength=function(r){return o.length},i.write=function(r){for(var t=0;t>>8)},t.writeBytes=function(r,e,n){e=e||0,n=n||r.length;for(var o=0;n>o;o+=1)t.writeByte(r[o+e])},t.writeString=function(r){for(var e=0;er);else{if(26>r)return 65+r;if(52>r)return 97+(r-26);if(62>r)return 48+(r-52);if(62==r)return 43;if(63==r)return 47}throw new Error(\"n:\"+r)};return o.writeByte=function(n){for(r=r>>t-6),t-=6},o.flush=function(){if(t>0&&(i(ro;){if(e>=t.length){if(0==o)return-1;throw new Error(\"unexpected end of file./\"+o)}var r=t.charAt(e);if(e+=1,\"=\"==r)return o=0,-1;r.match(/^\\s$/)||(n=n>o-8&255;return o-=8,i};var a=function(r){if(r>=65&&90>=r)return r-65;if(r>=97&&122>=r)return r-97+26;if(r>=48&&57>=r)return r-48+52;if(43==r)return 62;if(47==r)return 63;throw new Error(\"c:\"+r)};return i},d=function(r,t){var e=r,n=t,o=new Array(r*t),i={};i.setPixel=function(r,t,n){o[t*e+r]=n},i.write=function(r){r.writeString(\"GIF87a\"),r.writeShort(e),r.writeShort(n),r.writeByte(128),r.writeByte(0),r.writeByte(0),r.writeByte(0),r.writeByte(0),r.writeByte(0),r.writeByte(255),r.writeByte(255),r.writeByte(255),r.writeString(\",\"),r.writeShort(0),r.writeShort(0),r.writeShort(e),r.writeShort(n),r.writeByte(0);var t=2,o=u(t);r.writeByte(t);for(var i=0;o.length-i>255;)r.writeByte(255),r.writeBytes(o,i,255),i+=255;r.writeByte(o.length-i),r.writeBytes(o,i,o.length-i),r.writeByte(0),r.writeString(\";\")};var a=function(r){var t=r,e=0,n=0,o={};return o.write=function(r,o){if(r>>>o!=0)throw new Error(\"length over\");for(;e+o>=8;)t.writeByte(255&(r>=8-e,n=0,e=0;n|=r12,128|n>>6&63,128|63&n):(e++,n=65536+((1023&n)18,128|n>>12&63,128|n>>6&63,128|63&n))}return t}return t(r)}}(r),r}()),function(r){r.fn.share=function(t){function e(t,e){var n=o(e);\"prepend\"==e.mode?n.reverse():n,n.length&&r.each(n,function(n,o){var a=i(o,e),u=e.initialized?t.find(\".icon-\"+o):r('');return!u.length||(u.prop(\"aria-label\",\"分享到 \"+h[o]),u.prop(\"href\",a),\"wechat\"===o?u.prop(\"tabindex\",-1):u.prop(\"target\",\"_blank\"),void(e.initialized||(\"prepend\"==e.mode?t.prepend(u):t.append(u))))})}function n(r,t){var e=r.find(\"a.icon-wechat\");e.length&&(e.append(''+t.wechatQrcodeTitle+''+t.wechatQrcodeHelper+\"\"),e.find(\".qrcode\").qrcode({render:\"image\",size:t.wechatQrcodeSize,text:t.url}),e.offset().top"},{"title":"Repositories","date":"2022-06-25T04:52:51.994Z","updated":"2022-06-25T04:52:51.994Z","comments":false,"path":"repository/index.html","permalink":"http://fyupeng.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-06-25T05:51:47.109Z","updated":"2022-06-25T05:51:47.109Z","comments":false,"path":"tags/index.html","permalink":"http://fyupeng.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Netty 入门 - 03","slug":"netty-03","date":"2022-06-25T07:04:15.000Z","updated":"2022-06-25T07:09:42.295Z","comments":true,"path":"2022/06/25/netty-03/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/netty-03/","excerpt":"","text":"一、google-protobuf1. 编码和解码的基本介绍 编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码[示意图] codec（编解码器）的组成部分有两个：decoder（解码器）和 encoder（编码器）。encoder 负责把业务数据转换成字节码数据，decoder 负责把字节码数据转换成业务数据 2. Netty 本身的编码解码的机制和问题分析 Netty 自身提供了一些 codec(编解码器) Netty提供的编码器 StringEncoder：对字符串数据进行编码。 ObjectEncoder：对Java对象进行编码。 Netty提供的解码器 StringDecoder,对字符串数据进行解码 ObjectDecoder，对 Java 对象进行解码 Netty本身自带的ObjectDecoder和ObjectEncoder可以用来实现POJO对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术,而Java序列化技术本身效率就不高，存在如下问题 无法跨语言 序列化后的体积太大，是二进制编码的5倍多。 序列化性能太低 引出新的解决方案[Google 的 Protobuf] 3. Protobuf Protobuf 基本介绍和使用示意图, protoc下载https://developer.aliyun.com/article/710477 Protobuf 是 Google 发布的开源项目，全称 Google Protocol Buffers，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC [远程过程调用 remote procedure call ]数据交换格式。目前很多公司 从http + json 转向tcp + protobuf，效率会更高。 参考文档：https://developers.google.com/protocol-buffers/docs/proto 语言指南 Protobuf 是以 message 的方式来管理数据的. 支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，例如 C++、C#、Java、python 等） 高性能，高可靠性 使用 protobuf 编译器能自动生成代码，Protobuf 是将类的定义使用 .proto 文件进行描述。说明，在 idea 中编写 .proto 文件时，会自动提示是否下载 .ptoto 编写插件.可以让语法高亮。 然后通过 protoc.exe 编译器根据 .proto 自动生成 .java 文件 protobuf 使用示意图 4. Protobuf 快速入门实例1编写程序，使用 Protobuf 完成如下功能 客户端可以发送一个 StudentPoJo 对象到服务器(通过 Protobuf 编码) 服务端能接收 StudentPoJo 对象，并显示信息(通过 Protobuf 解码) 12345&lt;dependency&gt; &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt; &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt; &lt;version&gt;3.6.1&lt;/version&gt;&lt;/dependency&gt; Student.proto 1234567syntax = &quot;proto3&quot;; //版本option java_outer_classname = &quot;StudentPOJO&quot;; // 生成的外部类名，同时也是文件名// protobuf 使用message 管理数据message Student &#123; // 会在 StudentPOJO 外部类生成一个内部类 Student, 它是真正发送的 POJO对象 int32 id = 1; // Student 类中有一个 属性 名字为 id类型为 int32(protobuf类型) 1 表示属性序号 string name = 2;&#125; 编译 protoc.exe –java_out=.Student.proto 将生成的 StudentPOJO 放入到项目使用 NettyServer 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package com.fyp.netty.codec;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.protobuf.ProtobufDecoder;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty服务端 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyServer &#123; public static void main(String[] args) throws InterruptedException &#123; // 创建 BossGroup 和 WorkGroup /* 说明： 1. 创建两个线程组 bossGroup 和 workGroup 2. bossGroup 只是 处理 连接请求， 真正的 和客户端 业务处理， 会交给 workGroup 来完成 3. 两个都是 无限循环 4. bossGroup 和 workerGroup 含有的 子线程 （NioEventLoop）的个数 默认实际 cpu核数 * 2 */ EventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; // 创建 服务器端的 启动对象， 配置参数 ServerBootstrap bootstrap = new ServerBootstrap(); // 使用 链式编程 来 进行设置 bootstrap.group(bossGroup, workerGroup) // 设置两个 线程组 .channel(NioServerSocketChannel.class) // 使用 NioSocketChannel 作为 服务器的 通道实现 .option(ChannelOption.SO_BACKLOG, 128) // 设置 线程队列 得到 连接个数 .childOption(ChannelOption.SO_KEEPALIVE, true) // 设置 保持活动 连接状态 .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 创建一个 通道 测试对象 @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); // 在 pipeline 中加入 ProtobufDecoder // 指定对 哪种对象 进行解码 pipeline.addLast(&quot;decoder&quot;, new ProtobufDecoder(StudentPOJO.Student.getDefaultInstance())); pipeline.addLast(new NettyServerHandler()); &#125; &#125;); // 给我们的 workerGroup 的 EventLoop 对应的管道 设置处理器 System.out.println(&quot;... 服务器 is ready...&quot;); // 绑定一个 端口， 并且同步，生成 一个 ChannelFuture 对象 // 启动 服务器并绑定端口 ChannelFuture cf = bootstrap.bind(6667).sync(); // 对 关闭通道 进行监听 cf.channel().closeFuture().sync(); &#125;finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; NettyServerHandler 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.fyp.netty.codec;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.channel.SimpleChannelInboundHandler;import io.netty.util.CharsetUtil;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: nettty服务端处理器 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyServerHandler extends SimpleChannelInboundHandler&lt;StudentPOJO.Student&gt; &#123; /** * 读取数据 * @param ctx 上下文对象，含有 管道 pipeline, 通道 channel, 地址 * @param msg 客户端发送的 数据， 默认类型 Object * @throws Exception */ @Override public void channelRead0(ChannelHandlerContext ctx, StudentPOJO.Student msg) throws Exception &#123; System.out.println(&quot;客户端发送的数据 id &quot; + msg.getId() + &quot; name &quot; + msg.getName()); &#125; // 处理读取完毕 @Override public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123; super.channelReadComplete(ctx); // 将数据 写入到 缓存 并 刷新 ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端: 狗&quot;, CharsetUtil.UTF_8)); &#125; // 处理异常， 要关闭 通道 @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; super.exceptionCaught(ctx, cause); ctx.close(); &#125;&#125; NerttyClient 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.fyp.netty.codec;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.protobuf.ProtobufEncoder;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty客户端 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyClient &#123; public static void main(String[] args) throws InterruptedException &#123; // 客户端 需要 一个 事件循环组 NioEventLoopGroup group = new NioEventLoopGroup(); try &#123; // 创建 客户端 启动对象 // 注意客户端 使用的不是 ServerBootStrap, 而是BootStrap Bootstrap bootstrap = new Bootstrap(); // 设置相关 参数 bootstrap.group(group) // 设置 线程组 .channel(NioSocketChannel.class) // 设置 客户端 通道的 实现类（反射) .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; // 在 pipeline 中 加入 ProtobufEncoder ch.pipeline().addLast(&quot;encoder&quot;, new ProtobufEncoder()); ch.pipeline().addLast(new NettyClientHandler()); // 加入自己的 处理器 &#125; &#125;); System.out.println(&quot;客户端 ok...&quot;); // 启动客户端 去连接 服务器端 // 关于 ChannelFuture 要分析， 涉及到 netty 的异步模型 ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 6667).sync(); // 对关闭 通道 进行监听 channelFuture.channel().closeFuture().sync(); &#125; finally &#123; group.shutdownGracefully(); &#125; &#125;&#125; NettyClientHandler 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.fyp.netty.codec;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.util.CharsetUtil;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty客户端处理器 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyClientHandler extends ChannelInboundHandlerAdapter &#123; @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; // 发送一个 Student对象 到服务器 StudentPOJO.Student student = StudentPOJO.Student.newBuilder().setId(4).setName(&quot;豹子头 林冲&quot;).build(); ctx.writeAndFlush(student); &#125; // 当通道 有读取事件 时 ，会触发 @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123; ByteBuf buf = (ByteBuf) msg; System.out.println(&quot;服务器回复的消息:&quot; + buf.toString(CharsetUtil.UTF_8)); System.out.println(&quot;服务器的地址： &quot;+ ctx.channel().remoteAddress()); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; cause.printStackTrace(); ctx.close(); &#125;&#125; 5. Protobuf 快速入门实例 2 编写程序，使用 Protobuf 完成如下功能 客户端可以随机发送 StudentPoJo / WorkerPoJo 对象到服务器(通过 Protobuf 编码) 服务端能接收 StudentPoJo / WorkerPoJo 对象(需要判断是哪种类型)，并显示信息(通过 Protobuf 解码) 12345&lt;dependency&gt; &lt;groupId&gt;com.google.protobuf&lt;/groupId&gt; &lt;artifactId&gt;protobuf-java&lt;/artifactId&gt; &lt;version&gt;3.6.1&lt;/version&gt;&lt;/dependency&gt; Student.proto 123456789101112131415161718192021222324252627282930syntax = &quot;proto3&quot;;option optimize_for = SPEED; //加快解析option java_package = &quot;com.fyp.netty.codec2&quot;; // 指定生成到哪个包option java_outer_classname = &quot;MyDataInfo&quot;; // 外部类名// protobuf 可以使用 message 管理其他的messagemessage MyMessage &#123; enum DataType &#123; StudentType = 0; // 在 proto3 要求 enum 的编号 从0 开始 WorkerType = 1; &#125; //用 data_type 来标识 传的是 哪一个 枚举类型 DataType data_type = 1; // 表示 每次 枚举类型 最多 只能出现 其中一个，节省空间 oneof dataBody &#123; Student student = 2; Worker worker = 3; &#125;&#125;message Student &#123; int32 id = 1; string name = 2;&#125;message Worker &#123; string name = 1; int32 age = 2;&#125; NettyServer 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.fyp.netty.codec2;import com.fyp.netty.codec.StudentPOJO;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.protobuf.ProtobufDecoder;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty服务端 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyServer &#123; public static void main(String[] args) throws InterruptedException &#123; // 创建 BossGroup 和 WorkGroup /* 说明： 1. 创建两个线程组 bossGroup 和 workGroup 2. bossGroup 只是 处理 连接请求， 真正的 和客户端 业务处理， 会交给 workGroup 来完成 3. 两个都是 无限循环 4. bossGroup 和 workerGroup 含有的 子线程 （NioEventLoop）的个数 默认实际 cpu核数 * 2 */ EventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; // 创建 服务器端的 启动对象， 配置参数 ServerBootstrap bootstrap = new ServerBootstrap(); // 使用 链式编程 来 进行设置 bootstrap.group(bossGroup, workerGroup) // 设置两个 线程组 .channel(NioServerSocketChannel.class) // 使用 NioSocketChannel 作为 服务器的 通道实现 .option(ChannelOption.SO_BACKLOG, 128) // 设置 线程队列 得到 连接个数 .childOption(ChannelOption.SO_KEEPALIVE, true) // 设置 保持活动 连接状态 .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 创建一个 通道 测试对象 @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); // 在 pipeline 中加入 ProtobufDecoder // 指定对 哪种对象 进行解码 pipeline.addLast(&quot;decoder&quot;, new ProtobufDecoder(MyDataInfo.MyMessage.getDefaultInstance())); pipeline.addLast(new NettyServerHandler()); &#125; &#125;); // 给我们的 workerGroup 的 EventLoop 对应的管道 设置处理器 System.out.println(&quot;... 服务器 is ready...&quot;); // 绑定一个 端口， 并且同步，生成 一个 ChannelFuture 对象 // 启动 服务器并绑定端口 ChannelFuture cf = bootstrap.bind(6667).sync(); // 对 关闭通道 进行监听 cf.channel().closeFuture().sync(); &#125;finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; NettyServerHandler 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package com.fyp.netty.codec2;import com.fyp.netty.codec.StudentPOJO;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import io.netty.util.CharsetUtil;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: nettty服务端处理器 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyServerHandler extends SimpleChannelInboundHandler&lt;MyDataInfo.MyMessage&gt; &#123; /** * 读取数据 * @param ctx 上下文对象，含有 管道 pipeline, 通道 channel, 地址 * @param msg 客户端发送的 数据， 默认类型 Object * @throws Exception */ @Override public void channelRead0(ChannelHandlerContext ctx, MyDataInfo.MyMessage msg) throws Exception &#123; // 根据 dataType 来显示 不同的信息 MyDataInfo.MyMessage.DataType dataType = msg.getDataType(); if (dataType == MyDataInfo.MyMessage.DataType.StudentType) &#123; MyDataInfo.Student student = msg.getStudent(); System.out.println(&quot;学生id &quot; + student.getId() + &quot;学生名字 &quot; + student.getName()); &#125; else if (dataType == MyDataInfo.MyMessage.DataType.WorkerType) &#123; MyDataInfo.Worker worker = msg.getWorker(); System.out.println(&quot;工人名字&quot; + worker.getName() + &quot;工人年龄&quot; + worker.getAge()); &#125; else &#123; System.out.println(&quot;传输的类型不正确&quot;); &#125; &#125; // 处理读取完毕 @Override public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123; super.channelReadComplete(ctx); // 将数据 写入到 缓存 并 刷新 ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端: 狗&quot;, CharsetUtil.UTF_8)); &#125; // 处理异常， 要关闭 通道 @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; super.exceptionCaught(ctx, cause); ctx.close(); &#125;&#125; NettyClient 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.fyp.netty.codec2;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.protobuf.ProtobufEncoder;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty客户端 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyClient &#123; public static void main(String[] args) throws InterruptedException &#123; // 客户端 需要 一个 事件循环组 NioEventLoopGroup group = new NioEventLoopGroup(); try &#123; // 创建 客户端 启动对象 // 注意客户端 使用的不是 ServerBootStrap, 而是BootStrap Bootstrap bootstrap = new Bootstrap(); // 设置相关 参数 bootstrap.group(group) // 设置 线程组 .channel(NioSocketChannel.class) // 设置 客户端 通道的 实现类（反射) .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; // 在 pipeline 中 加入 ProtobufEncoder ch.pipeline().addLast(&quot;encoder&quot;, new ProtobufEncoder()); ch.pipeline().addLast(new NettyClientHandler()); // 加入自己的 处理器 &#125; &#125;); System.out.println(&quot;客户端 ok...&quot;); // 启动客户端 去连接 服务器端 // 关于 ChannelFuture 要分析， 涉及到 netty 的异步模型 ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 6667).sync(); // 对关闭 通道 进行监听 channelFuture.channel().closeFuture().sync(); &#125; finally &#123; group.shutdownGracefully(); &#125; &#125;&#125; NettyClientHandler 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.fyp.netty.codec2;import com.fyp.netty.codec.StudentPOJO;import com.fyp.netty.heartbeat.MyServer;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.util.CharsetUtil;import java.util.Random;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty客户端处理器 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyClientHandler extends ChannelInboundHandlerAdapter &#123; @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; // 随机的 发送 Student 或者 Worker 对象 int random = new Random().nextInt(3); MyDataInfo.MyMessage myMessage = null; if (0 == random) &#123; // 发送 student 对象 myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.StudentType).setStudent(MyDataInfo.Student.newBuilder().setId(5).setName(&quot;玉麒麟 卢俊义&quot;).build()).build(); &#125; else &#123; myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.WorkerType).setWorker(MyDataInfo.Worker.newBuilder().setName(&quot;老李&quot;).setAge(20).build()).build(); &#125; ctx.writeAndFlush(myMessage); &#125; // 当通道 有读取事件 时 ，会触发 @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123; ByteBuf buf = (ByteBuf) msg; System.out.println(&quot;服务器回复的消息:&quot; + buf.toString(CharsetUtil.UTF_8)); System.out.println(&quot;服务器的地址： &quot;+ ctx.channel().remoteAddress()); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; cause.printStackTrace(); ctx.close(); &#125;&#125; 二、Netty出入站和调用机制1. 基本说明 Netty 的组件设计：Netty 的主要组件有 Channel、EventLoop、ChannelFuture、ChannelHandler、ChannelPipe 等 ChannelHandler 充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现 ChannelInboundHandler 接口（或 ChannelInboundHandlerAdapter），你就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从 ChannelInboundHandler 冲刷数据。业务逻辑通常写在一个或者多个 ChannelInboundHandler 中。ChannelOutboundHandler 原理一样，只不过它是用来处理出站数据的 ChannelPipeline 提供了 ChannelHandler 链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过 pipeline 中的一系列 ChannelOutboundHandler，并被这些 Handler 处理，反之则称为入站的 2. 编码解码器 当 Netty 发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如 java 对象）；如果是出站消息，它会被编码成字节。 Netty 提供一系列实用的编解码器，他们都实现了 ChannelInboundHadnler 或者 ChannelOutboundHandler 接口。在这些类中，channelRead 方法已经被重写了。以入站为例，对于每个从入站 Channel 读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的 decode() 方法进行解码，并将已经解码的字节转发给 ChannelPipeline 中的下一个 ChannelInboundHandler。 3. 解码器 - ByteToMessageDecoder 关系继承图 由于不可能知道远程节点是否会一次性发送一个完整的信息，tcp 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理.【后面有说TCP的粘包和拆包问题】 一个关于 ByteToMessageDecoder 实例分析 4. Netty的handler链的调用机制实例要求: 使用自定义的编码器和解码器来说明 Netty 的 handler 调用机制 客户端发送 long -&gt; 服务器 服务端发送 long -&gt; 客户端 代码演示MyServer 12345678910111213141516171819202122232425262728293031323334353637package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: 我的服务端 * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyServer &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(); EventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new MyServerInitializer()); // 自定义一个 初始化类 ChannelFuture channelFuture = serverBootstrap.bind(7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; MyServerHandler 123456789101112131415161718192021222324252627282930package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: 我的服务端处理器 * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyServerHandler extends SimpleChannelInboundHandler&lt;Long&gt; &#123; @Override protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception &#123; System.out.println(&quot;从客户端&quot; + ctx.channel().remoteAddress() + &quot;读取到的long &quot; + msg); ctx.writeAndFlush(98765L); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; cause.printStackTrace(); ctx.close(); &#125;&#125; MyServerInitializer 1234567891011121314151617181920212223242526272829package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: 服务器初始化类 * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); // 入站的 handler 进行解码 MyByteToLongDecoder pipeline.addLast(new MyByteToLongDecoder()); // 出站的 handler 进行编码 MyLongToByteEncoder pipeline.addLast(new MyLongToByteEncoder()); // 自定义的 handler 处理业务逻辑 pipeline.addLast(new MyServerHandler()); &#125;&#125; MyClient 12345678910111213141516171819202122232425262728293031323334353637383940package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioSocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyClient &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup group = new NioEventLoopGroup(); try &#123; Bootstrap bootstrap = new Bootstrap(); bootstrap.group(group) .channel(NioSocketChannel.class) .handler(new MyClientInitializer()); // 自定义一个 初始化类 ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;, 7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; group.shutdownGracefully(); &#125; &#125;&#125; MyClientHandler 1234567891011121314151617181920212223242526272829package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandler;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyClientHandler extends SimpleChannelInboundHandler&lt;Long&gt; &#123; @Override protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception &#123; System.out.println(&quot;服务器端发回的消息：&quot; + msg); &#125; // 发送数据 @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; System.out.println(&quot;MyClientHandler 发送数据&quot;); //ctx.writeAndFlush(Unpooled.copiedBuffer()) ctx.writeAndFlush(123456L); // 发送的是 一个 Long &#125;&#125; MyClientInitializer 1234567891011121314151617181920212223242526272829package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: 客户端初始化类 * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyClientInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); // 加入 一个 入站的 handler 对数据 进行 解码 pipeline.addLast(new MyByteToLongDecoder()); // 加入 一个 出站的 handler 对数据 进行 编码 pipeline.addLast(new MyLongToByteEncoder()); // 加入 一个自定义的 handler 处理业务 pipeline.addLast(new MyClientHandler()); &#125;&#125; MyByteToLongDecoder 1234567891011121314151617181920212223242526272829303132333435363738394041package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandler;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.ByteToMessageDecoder;import java.util.List;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyByteToLongDecoder extends ByteToMessageDecoder &#123; /** * decode 会根据接受的数据，调用多次，直到 确定没有 新的元素 添加到 list， * 或者是 ByteBuf 没有更多的 可读字节为止 * 如果list out 不为空， 就会将 list 的内容 传递给 下一个 ChannelInBoundHandler * 处理，该处理器的 方法也会被 调用多次 * @param ctx 上下文对象 * @param in 入站的 ByteBuf * @param out list 集合，将解码后的 数据 传给下一个 handler * @throws Exception */ @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception &#123; System.out.println(&quot;MyByteToLongDecoder decoder 被调用&quot;); // 因为 long 8个字节 if (in.readableBytes() &gt;= 8) &#123; out.add(in.readLong()); &#125; &#125;&#125; MyLongToByteEncoder 123456789101112131415161718192021222324package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.MessageToByteEncoder;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyLongToByteEncoder extends MessageToByteEncoder&lt;Long&gt; &#123; @Override protected void encode(ChannelHandlerContext ctx, Long msg, ByteBuf out) throws Exception &#123; System.out.println(&quot;MyLongToByteEncoder encode 被调用&quot;); System.out.println(&quot;msg &quot; + msg); out.writeLong(msg); &#125;&#125; 效果服务端：handler调用顺序：MyByteToLongDecoder -&gt; MyServerHandler-&gt; MyLongToByteEncoder 客户端：handler调用顺序：MyClientHandler-&gt; MyLongToByteEncoder -&gt; MyByteToLongDecoder 出站入站关于出站入站，很多人可能有点迷糊 1）客户端有出站入站，服务端也有出站入站 2）以客户端为例，如果有服务端传送的数据到达客户端，那么对于客户端来说就是入站； 如果客户端传送数据到服务端，那么对于客户端来说就是出站； 同理，对于服务端来说，也是一样的，有数据来就是入站，有数据输出就是出站 3）为什么服务端和客户端的Serverhandler都是继承SimpleChannelInboundHandler，而没有ChannelOutboundHandler出站类？ 实际上当我们在handler中调用ctx.writeAndFlush()方法后，就会将数据交给ChannelOutboundHandler进行出站处理，只是我们没有去定义出站类而已，若有需求可以自己去实现ChannelOutboundHandler出站类 4）总结就是客户端和服务端都有出站和入站的操作 服务端发数据给客户端：服务端—&gt;出站—&gt;Socket通道—&gt;入站—&gt;客户端 客户端发数据给服务端：客户端—&gt;出站—&gt;Socket通道—&gt;入站—&gt;服务端 理透handler链执行入站出站原理（双链结构）理解：通过对继承的类来过滤是出站的还是入站的，然后再去执行该类的实现方法 head ↔ ServerInitializer(服务端初始化器) ↔ decoder(解码器) ↔ encoder(编码器) ↔ ServerHandler(自定义处理器)↔ tail 通过以下的代码： 过滤后得到： 入站(head-&gt;tail方向)：decoder(解码器) -&gt; ServerHandler(自定义处理器) 出站(tail-&gt;head方向)：ServerHandler(自定义处理器) -&gt; encoder(编码器) 123456789101112131415161718private AbstractChannelHandlerContext findContextInbound(int mask) &#123; AbstractChannelHandlerContext ctx = this; EventExecutor currentExecutor = executor(); do &#123; ctx = ctx.next; &#125; while (skipContext(ctx, currentExecutor, mask, MASK_ONLY_INBOUND)); return ctx;&#125;private AbstractChannelHandlerContext findContextOutbound(int mask) &#123; AbstractChannelHandlerContext ctx = this; EventExecutor currentExecutor = executor(); do &#123; ctx = ctx.prev; // 会跳过只处理那些入站的 handler &#125; while (skipContext(ctx, currentExecutor, mask, MASK_ONLY_OUTBOUND)); return ctx;&#125; 5. ByteToMessageDecoder 不论解码器 handler 还是编码器 handler 即接收的消息类型必须与待处理的消息类型一致，否则该 handler 不会被执行 在解码器进行数据解码时，需要判断缓存区（ByteBuf）的数据是否足够，否则接收到的结果会期望结果可能不一致。 6. 解码器 - ReplayingDecoder public abstract class ReplayingDecoder&lt;S&gt; extends ByteToMessageDecoder ReplayingDecoder 扩展了 ByteToMessageDecoder 类，使用这个类，我们不必调用 readableBytes() 方法，也就不用判断还有没有足够的数据来读取。参数 S 指定了用户状态管理的类型，其中 Void 代表不需要状态管理 应用实例：使用 ReplayingDecoder 编写解码器，对前面的案例进行简化[案例演示] 1234567891011121314151617181920212223242526package com.fyp.netty.inboundhandlerandoutboundhandler;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.ByteToMessageDecoder;import io.netty.handler.codec.ReplayingDecoder;import java.util.List;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyByteToLongDecoder2 extends ReplayingDecoder&lt;Void&gt; &#123; @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception &#123; System.out.println(&quot;MyByteToLongDecoder2 被调用&quot;); // 在 ReplayingDecoder 不需要 判断 数据 是否足够 读取，内部会进行 处理判断 out.add(in.readLong()); &#125;&#125; ReplayingDecoder使用方便，但它也有一些局限性： 并不是所有的 ByteBuf 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个 UnsupportedOperationException。 ReplayingDecoder 在某些情况下可能稍慢于 ByteToMessageDecoder，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢 7. 其它编解码器 LineBasedFrameDecoder：这个类在 Netty 内部也有使用，它使用行尾控制字符（\\n或者\\r\\n）作为分隔符来解析数据。 DelimiterBasedFrameDecoder：使用自定义的特殊字符作为消息的分隔符。 HttpObjectDecoder：一个 HTTP 数据的解码器 LengthFieldBasedFrameDecoder：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。 8. Log4j 整合到 Netty 在 Maven 中添加对 Log4j 的依赖在 pom.xml 12345678910111213141516171819202122&lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt; 配置 Log4j，在 resources/log4j.properties 1234log4j.rootLogger=DEBUG,stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=[%p]%C&#123;1&#125;-%m%n 三、TCP粘包和拆包1. TCP 粘包和拆包基本介绍 TCP 是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的 socket，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法（Nagle 算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为面向流的通信是无消息保护边界的 由于 TCP 无消息保护边界,需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题,看一张图 TCP 粘包、拆包图解 假设客户端分别发送了两个数据包 D1 和 D2 给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况： 服务端分两次读取到了两个独立的数据包，分别是 D1 和 D2，没有粘包和拆包 服务端一次接受到了两个数据包，D1 和 D2 粘合在一起，称之为 TCP 粘包 服务端分两次读取到了数据包，第一次读取到了完整的 D1 包和 D2 包的部分内容，第二次读取到了 D2 包的剩余内容，这称之为 TCP 拆包 服务端分两次读取到了数据包，第一次读取到了 D1 包的部分内容 D1_1，第二次读取到了 D1 包的剩余部分内容 D1_2 和完整的 D2 包。 2. TCP 粘包和拆包现象实例在编写 Netty 程序时，如果没有做处理，就会发生粘包和拆包的问题 看一个具体的实例： MyServer 12345678910111213141516171819202122232425262728293031323334353637package com.fyp.netty.tcp;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: 我的服务端 * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyServer &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(); EventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new MyServerInitializer()); // 自定义一个 初始化类 ChannelFuture channelFuture = serverBootstrap.bind(7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; MyServerInitializer 123456789101112131415161718192021package com.fyp.netty.tcp;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new MyServerHandler()); &#125;&#125; MyServerHandler 1234567891011121314151617181920212223242526272829303132333435363738package com.fyp.netty.tcp;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandler;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import java.nio.charset.Charset;import java.util.UUID;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyServerHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123; private int count; @Override protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception &#123; byte[] buffer = new byte[msg.readableBytes()]; msg.readBytes(buffer); // 将 buffer 转成 字符串 String message = new String(buffer, Charset.forName(&quot;UTF-8&quot;)); System.out.println(&quot;服务器接收到数据 &quot; + message); System.out.println(&quot;服务器接收到数据量= &quot; + (++this.count)); // 服务端 回送数据 给客户端 ，回送一个 随机 id ByteBuf responseByteBuf = Unpooled.copiedBuffer(UUID.randomUUID().toString() + &quot;\\n&quot;, Charset.forName(&quot;utf-8&quot;)); ctx.writeAndFlush(responseByteBuf); &#125;&#125; MyClient 1234567891011121314151617181920212223242526272829303132333435363738package com.fyp.netty.tcp;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioSocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyClient &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup group = new NioEventLoopGroup(); try &#123; Bootstrap bootstrap = new Bootstrap(); bootstrap.group(group) .channel(NioSocketChannel.class) .handler(new MyClientInitializer()); // 自定义一个 初始化类 ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;, 7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; group.shutdownGracefully(); &#125; &#125;&#125; MyClientInitializer 1234567891011121314151617181920212223package com.fyp.netty.tcp;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyClientInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new MyClientHandler()); &#125;&#125; MyClientHandler 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.fyp.netty.tcp;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandler;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import io.netty.util.CharsetUtil;import java.nio.charset.Charset;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyClientHandler extends SimpleChannelInboundHandler&lt;ByteBuf&gt; &#123; private int count; @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; // 使用 客户端 发送 十条 数据，从而模拟 tcp 的 粘包和拆包 for (int i = 0; i &lt;10; i++) &#123; ByteBuf buffer = Unpooled.copiedBuffer(&quot;hello,server&quot; + i, Charset.forName(&quot;utf-8&quot;)); ctx.writeAndFlush(buffer); &#125; &#125; @Override protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception &#123; byte[] buffer = new byte[msg.readableBytes()]; msg.readBytes(buffer); String message = new String(buffer, Charset.forName(&quot;utf-8&quot;)); System.out.println(&quot;客户端接收到消息=&quot; + message); System.out.println(&quot;客户端接受消息数据= &quot; + (++this.count)); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; cause.printStackTrace(); ctx.close(); &#125;&#125; 3. TCP 粘包和拆包解决方案 常用方案：使用自定义协议+编解码器来解决 关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免的 TCP 粘包、拆包。 看一个具体的实例 要求客户端发送 5 个 Message 对象，客户端每次发送一个 Message 对象 服务器端每次接收一个 Message，分 5 次进行解码，每读取到一个 Message，会回复一个 Message 对象给客户端。 MessageProtoco 123456789101112131415161718192021222324252627282930package com.fyp.netty.protocoltcp;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: 协议包 * @Package: com.fyp.netty.protocoltcp * @Version: 1.0 */public class MessageProtocol &#123; private int len; private byte[] content; public int getLen() &#123; return len; &#125; public void setLen(int len) &#123; this.len = len; &#125; public byte[] getContent() &#123; return content; &#125; public void setContent(byte[] content) &#123; this.content = content; &#125;&#125; MyServer 12345678910111213141516171819202122232425262728293031323334353637package com.fyp.netty.protocoltcp;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: 我的服务端 * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyServer &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(); EventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new MyServerInitializer()); // 自定义一个 初始化类 ChannelFuture channelFuture = serverBootstrap.bind(7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; MyServerInitializer 123456789101112131415161718192021222324package com.fyp.netty.protocoltcp;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new MyMessageDecoder()); pipeline.addLast(new MyMessageEncoder()); pipeline.addLast(new MyServerHandler()); &#125;&#125; MyServerHandler 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.fyp.netty.protocoltcp;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import java.nio.charset.Charset;import java.util.UUID;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyServerHandler extends SimpleChannelInboundHandler&lt;MessageProtocol&gt; &#123; private int count; @Override protected void channelRead0(ChannelHandlerContext ctx, MessageProtocol msg) throws Exception &#123; //接收到数据，并处理 int len = msg.getLen(); byte[] content = msg.getContent(); System.out.println(&quot;服务器接收到信息如下&quot;); System.out.println(&quot;长度=&quot; + len); System.out.println(&quot;内容=&quot; + new String(content, Charset.forName(&quot;utf-8&quot;))); System.out.println(&quot;服务器接收到消息包数量=&quot; + (++this.count)); //回复消息 System.out.println(&quot;服务端开始回复消息------&quot;); String responseContent = UUID.randomUUID().toString(); int responseLen = responseContent.getBytes(&quot;utf-8&quot;).length; byte[] responseContent2 = responseContent.getBytes(&quot;utf-8&quot;); //构建一个协议包 MessageProtocol messageProtocol = new MessageProtocol(); messageProtocol.setLen(responseLen); messageProtocol.setContent(responseContent2); ctx.writeAndFlush(messageProtocol); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; //cause.printStackTrace(); ctx.close(); &#125;&#125; MyMessageDecoder 123456789101112131415161718192021222324252627282930313233343536373839package com.fyp.netty.protocoltcp;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.ReplayingDecoder;import java.util.List;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.protocoltcp * @Version: 1.0 */public class MyMessageDecoder extends ReplayingDecoder&lt;Void&gt; &#123; @Override protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception &#123; System.out.println(&quot;MyMessageDecoder decode 被调用&quot;); // 需要 将 二进制 字节码 -&gt; MessageProtocol 数据包（对象） /** * 获取 是 在 之前的 编码器写入的 int 和 byte 类型数据 * out.writeInt(msg.getLen()); * out.writeBytes(msg.getContent()); */ int length = in.readInt(); byte[] content = new byte[length]; in.readBytes(content); MessageProtocol messageProtocol = new MessageProtocol(); messageProtocol.setLen(length); messageProtocol.setContent(content); out.add(messageProtocol); &#125;&#125; MyClient 1234567891011121314151617181920212223242526272829303132333435363738package com.fyp.netty.protocoltcp;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioSocketChannel;/** * @Auther: fyp * @Date: 2022/2/16 * @Description: * @Package: com.fyp.netty.inboundhandlerandoutboundhandler * @Version: 1.0 */public class MyClient &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup group = new NioEventLoopGroup(); try &#123; Bootstrap bootstrap = new Bootstrap(); bootstrap.group(group) .channel(NioSocketChannel.class) .handler(new MyClientInitializer()); // 自定义一个 初始化类 ChannelFuture channelFuture = bootstrap.connect(&quot;localhost&quot;, 7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; group.shutdownGracefully(); &#125; &#125;&#125; MyClientInitializer 1234567891011121314151617181920212223242526package com.fyp.netty.protocoltcp;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyClientInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new MyMessageEncoder()); pipeline.addLast(new MyMessageDecoder()); pipeline.addLast(new MyClientHandler()); &#125;&#125; MyClientHandler 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.fyp.netty.protocoltcp;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import java.nio.charset.Charset;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.tcp * @Version: 1.0 */public class MyClientHandler extends SimpleChannelInboundHandler&lt;MessageProtocol&gt; &#123; private int count; @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; // 使用客户端 发送十条数据，今天天气冷，吃火锅 for (int i = 0; i &lt; 5; i++) &#123; String mes = &quot;abc&quot;; byte[] content = mes.getBytes(Charset.forName(&quot;utf-8&quot;)); int length = content.length; // 创建 协议包 对象 MessageProtocol messageProtocol = new MessageProtocol(); messageProtocol.setLen(length); messageProtocol.setContent(content); ctx.writeAndFlush(messageProtocol); &#125; &#125; @Override protected void channelRead0(ChannelHandlerContext ctx, MessageProtocol msg) throws Exception &#123; int len = msg.getLen(); byte[] content = msg.getContent(); System.out.println(&quot;客户端接收到消息如下&quot;); System.out.println(&quot;长度=&quot; + len); System.out.println(&quot;内容=&quot; + new String(content, Charset.forName(&quot;utf-8&quot;))); System.out.println(&quot;客户端接收消息数量=&quot; + (++this.count)); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; System.out.println(&quot;异常提醒=&quot; + cause.getMessage()); ctx.close(); &#125;&#125; MyMessageEncoder 1234567891011121314151617181920212223package com.fyp.netty.protocoltcp;import io.netty.buffer.ByteBuf;import io.netty.channel.ChannelHandlerContext;import io.netty.handler.codec.MessageToByteEncoder;/** * @Auther: fyp * @Date: 2022/2/17 * @Description: * @Package: com.fyp.netty.protocoltcp * @Version: 1.0 */public class MyMessageEncoder extends MessageToByteEncoder&lt;MessageProtocol&gt; &#123; @Override protected void encode(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out) throws Exception &#123; System.out.println(&quot;MyMessageEncoder encode 方法 被调用&quot;); out.writeInt(msg.getLen()); out.writeBytes(msg.getContent()); &#125;&#125; 四、Netty实现RPC1. RPC 基本介绍 RPC（Remote Procedure Call）—远程过程调用，是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程 两个或多个应用程序都分布在不同的服务器上，它们之间的调用都像是本地方法调用一样(如图) 过程： 调用者(Caller)，调用远程API(Remote API) 调用远程API会通过一个RPC代理(RpcProxy) RPC代理再去调用RpcInvoker(这个是PRC的调用者) RpcInvoker通过RPC连接器(RpcConnector) RPC连接器用两台机器规定好的PRC协议(RpcProtocol)把数据进行编码 接着RPC连接器通过RpcChannel通道发送到对方的PRC接收器(RpcAcceptor) PRC接收器通过PRC协议进行解码拿到数据 然后将数据传给RpcProcessor RpcProcessor再传给RpcInvoker RpcInvoker调用Remote API 最后推给被调用者(Callee) 常见的 RPC 框架有：比较知名的如阿里的 Dubbo、Google 的 gRPC、Go 语言的 rpcx、Apache 的 thrift，Spring 旗下的 SpringCloud。 2. 我们的RPC 调用流程图 RPC 调用流程说明 服务消费方（client）以本地调用方式调用服务 client stub 接收到调用后负责将方法、参数等封装成能够进行网络传输的消息体 client stub 将消息进行编码并发送到服务端 server stub 收到消息后进行解码 server stub 根据解码结果调用本地的服务 本地服务执行并将结果返回给 server stub server stub 将返回导入结果进行编码并发送至消费方 client stub 接收到消息并进行解码 服务消费方（client）得到结果 小结：RPC 的目标就是将 2 - 8 这些步骤都封装起来，用户无需关心这些细节，可以像调用本地方法一样即可完成远程服务调用 3. 己实现 Dubbo RPC（基于 Netty）需求说明 Dubbo 底层使用了 Netty 作为网络通讯框架，要求用 Netty 实现一个简单的 RPC 框架 模仿 Dubbo，消费者和提供者约定接口和协议，消费者远程调用提供者的服务，提供者返回一个字符串，消费者打印提供者返回的数据。底层网络通信使用 Netty 4.1.20 设计说明 创建一个接口，定义抽象方法。用于消费者和提供者之间的约定。 创建一个提供者，该类需要监听消费者的请求，并按照约定返回数据。 创建一个消费者，该类需要透明的调用自己不存在的方法，内部需要使用 Netty 请求提供者返回数据 开发的分析图 使用rpc框架打包时，如果是用的是全局库，打包会找不到netty的jar包，需要通过maven引入的方式打包","categories":[{"name":"Java框架","slug":"Java框架","permalink":"http://fyupeng.github.io/categories/Java%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"netty","slug":"netty","permalink":"http://fyupeng.github.io/tags/netty/"}],"author":"fyupeng"},{"title":"Netty 入门 - 02","slug":"netty-02","date":"2022-06-25T07:04:09.000Z","updated":"2022-06-25T07:09:33.572Z","comments":true,"path":"2022/06/25/netty-02/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/netty-02/","excerpt":"","text":"Netty入门02 一、Netty 概述1. 原生 NIO 存在的问题 NIO 的类库和 API 繁杂，使用麻烦：需要熟练掌握 Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。 需要具备其他的额外技能：要熟悉 Java 多线程编程，因为 NIO 编程涉及到 Reactor 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 NIO 程序。 开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。 JDK NIO 的 Bug：例如臭名昭著的 Epoll Bug，它会导致 Selector 空轮询，最终导致 CPU100%。直到 JDK1.7 版本该问题仍旧存在，没有被根本解决。 2. Netty 官网说明官网：https://netty.io/ Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients. 3. Netty 的优点Netty 对 JDK 自带的 NIO 的 API 进行了封装，解决了上述问题。 设计优雅：适用于各种传输类型的统一 API 阻塞和非阻塞 Socket；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池。 使用方便：详细记录的 Javadoc，用户指南和示例；没有其他依赖项，JDK5（Netty3.x）或 6（Netty4.x）就足够了。 高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。 安全：完整的 SSL/TLS 和 StartTLS 支持。 社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 Bug 可以被及时修复，同时，更多的新功能会被加入。 4. Netty 版本说明 Netty 版本分为 Netty 3.x 和 Netty 4.x、Netty 5.x 因为 Netty 5 出现重大 bug，已经被官网废弃了，目前推荐使用的是 Netty 4.x的稳定版本 目前在官网可下载的版本 Netty 3.x、Netty 4.0.x 和 Netty 4.1.x 在本套课程中，我们讲解 Netty4.1.x 版本 Netty 下载地址：https://bintray.com/netty/downloads/netty/ 5. Netty Maven 下载5.1 通过官网下载点击进入 Project Structure 点击Library 添加Library From Maven 输入 io.netty:netty-all:4.1.20.Final 后查找 5.2 通过 maven12345&lt;dependency&gt; &lt;groupId&gt;io.netty&lt;/groupId&gt; &lt;artifactId&gt;netty-all&lt;/artifactId&gt; &lt;version&gt;$&#123;netty.version&#125;&lt;/version&gt;&lt;/dependency&gt; 二、Netty 高性能架构设计1. 线程模型基本介绍 不同的线程模式，对程序的性能有很大影响，为了搞清 Netty 线程模式，我们来系统的讲解下各个线程模式，最后看看 Netty 线程模型有什么优越性。 目前存在的线程模型有：传统阻塞 I/O 服务模型 和Reactor 模式 根据Reactor的数量和处理资源池线程的数量不同，有3种典型的实现 单 Reactor 单线程； 单 Reactor多线程； 主从 Reactor多线程 Netty 线程模式（Netty 主要基于主从 Reactor 多线程模型做了一定的改进，其中主从 Reactor 多线程模型有多个 Reactor） 2. 传统阻塞 I/O 服务模型工作原理图 黄色的框表示对象，蓝色的框表示线程 白色的框表示方法（API） 模型特点 采用阻塞 IO 模式获取输入的数据 每个连接都需要独立的线程完成数据的输入，业务处理，数据返回 问题分析 当并发数很大，就会创建大量的线程，占用很大系统资源 连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在 Handler对象中的read 操作，导致上面的处理线程资源浪费 3. Reactor 模式针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：基于 I/O 复用模型：多个连接共用一个阻塞对象ServiceHandler，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。 Reactor 在不同书中的叫法： 反应器模式 分发者模式（Dispatcher） 通知者模式（notifier） 基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。（解决了当并发数很大时，会创建大量线程，占用很大系统资源） 基于 I/O 复用模型：多个客户端进行连接，先把连接请求给ServiceHandler。多个连接共用一个阻塞对象ServiceHandler。假设，当C1连接没有数据要处理时，C1客户端只需要阻塞于ServiceHandler，C1之前的处理线程便可以处理其他有数据的连接，不会造成线程资源的浪费。当C1连接再次有数据时，ServiceHandler根据线程池的空闲状态，将请求分发给空闲的线程来处理C1连接的任务。（解决了线程资源浪费的那个问题） I/O 复用结合线程池，就是 Reactor 模式基本设计思想，如图对上图说明： Reactor 模式，通过一个或多个输入同时传递给服务处理器（ServiceHandler）的模式（基于事件驱动） 服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程，因此 Reactor 模式也叫 Dispatcher 模式 Reactor 模式使用 IO 复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键 原先有多个Handler阻塞，现在只用一个ServiceHandler阻塞 Reactor 模式中核心组成 Reactor（也就是那个ServiceHandler）：Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理线程来对 IO 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人； Handlers（处理线程EventHandler）：处理线程执行 I/O 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor 通过调度适当的处理线程来响应 I/O 事件，处理程序执行非阻塞操作。 Reactor 模式分类根据 Reactor 的数量和处理资源池线程的数量不同，有 3 种典型的实现 单 Reactor 单线程 单 Reactor 多线程 主从 Reactor 多线程 4. 单 Reactor 单线程原理图，并使用 NIO 群聊系统验证 方案说明 Select 是前面 I/O 复用模型介绍的标准网络编程 API，可以实现应用程序通过一个阻塞对象监听多路连接请求 Reactor 对象通过 Select 监控客户端请求事件，收到事件后通过 Dispatch 进行分发 如果是建立连接请求事件，则由 Acceptor 通过 Accept 处理连接请求，然后创建一个 Handler 对象处理连接完成后的后续业务处理 如果不是建立连接事件，则 Reactor 会分发调用连接对应的 Handler 来响应 Handler 会完成 Read → 业务处理 → Send 的完整业务流程 结合实例：服务器端用一个线程通过多路复用搞定所有的 IO 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的 NIO 案例就属于这种模型。 方案优缺点分析 优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成 缺点：性能问题，只有一个线程，无法完全发挥多核 CPU 的性能。Handler在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈 缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障 使用场景：客户端的数量有限，业务处理非常快速，比如 Redis 在业务处理的时间复杂度 O(1) 的情况 5. 单 Reactor 多线程方案说明 Reactor 对象通过 Select 监控客户端请求事件，收到事件后，通过 Dispatch 进行分发 如果是建立连接请求，则由 Acceptor 通过 accept 处理连接请求，然后创建一个 Handler 对象处理完成连接后的各种事件 如果不是连接请求，则由 Reactor 分发调用连接对应的 handler 来处理（也就是说连接已经建立，后续客户端再来请求，那基本就是数据请求了，直接调用之前为这个连接创建好的handler来处理） handler 只负责响应事件，不做具体的业务处理（这样不会使handler阻塞太久），通过 read 读取数据后，会分发给后面的 worker 线程池的某个线程处理业务。【业务处理是最费时的，所以将业务处理交给线程池去执行】 worker 线程池会分配独立线程完成真正的业务，并将结果返回给 handler handler 收到响应后，通过 send 将结果返回给 client 方案优缺点分析 优点：可以充分的利用多核 cpu 的处理能力 缺点：多线程数据共享和访问比较复杂。Reactor 承担所有的事件的监听和响应，它是单线程运行，在高并发场景容易出现性能瓶颈。也就是说Reactor主线程承担了过多的事 6. 主从 Reactor 多线程工作原理图针对单 Reactor 多线程模型中，Reactor 在单线程中运行，高并发场景下容易成为性能瓶颈，可以让 Reactor 在多线程中运行 Reactor 主线程 MainReactor 对象通过 select 监听连接事件，收到事件后，通过 Acceptor 处理连接事件 当 Acceptor 处理连接事件后，MainReactor 将连接分配给 SubReactor subreactor 将连接加入到连接队列进行监听，并创建 handler 进行各种事件处理 当有新事件发生时，subreactor 就会调用对应的 handler 处理 handler 通过 read 读取数据，分发给后面的 worker 线程处理 worker 线程池分配独立的 worker 线程进行业务处理，并返回结果 handler 收到响应的结果后，再通过 send 将结果返回给 client Reactor 主线程可以对应多个 Reactor 子线程，即 MainRecator 可以关联多个 SubReactor 方案优缺点说明 优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。 优点：父线程与子线程的数据交互简单，Reactor 主线程只需要把新连接传给子线程，子线程无需返回数据。 缺点：编程复杂度较高 结合实例：这种模型在许多项目中广泛使用，包括 Nginx 主从 Reactor 多进程模型，Memcached 主从多线程，Netty 主从多线程模型的支持 7. Reactor 模式小结3 种模式用生活案例来理解 单 Reactor 单线程，前台接待员和服务员是同一个人，全程为顾客服务 单 Reactor 多线程，1 个前台接待员，多个服务员，接待员只负责接待 主从 Reactor 多线程，多个前台接待员，多个服务生 Reactor 模式具有如下的优点 响应快，不必为单个同步时间所阻塞，虽然 Reactor 本身依然是同步的（比如你第一个SubReactor阻塞了，我可以调下一个 SubReactor为客户端服务） 可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销 扩展性好，可以方便的通过增加 Reactor 实例个数来充分利用 CPU 资源 复用性好，Reactor 模型本身与具体事件处理逻辑无关，具有很高的复用性 8. Netty 模型 讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚 工作原理示意图1 - 简单版Netty主要基于主从 Reactors 多线程模型（如图）做了一定的改进，其中主从 Reactor 多线程模型有多个 Reactor 对上图说明 BossGroup 线程维护 Selector，只关注 Accept 当接收到 Accept 事件，获取到对应的 SocketChannel，封装成 NIOScoketChannel 并注册到 Worker 线程（事件循环），并进行维护 当 Worker 线程监听到 Selector 中通道发生自己感兴趣的事件后，就进行处理（就由 handler），注意 handler 已经加入到通道 工作原理示意图2 - 进阶版 BossGroup有点像主Reactor 可以有多个，WorkerGroup则像SubReactor一样可以有多个。 工作原理示意图3 - 详细版 Netty 抽象出两组线程池 ，BossGroup 专门负责接收客户端的连接，WorkerGroup 专门负责网络的读写 BossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup NioEventLoopGroup 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 NioEventLoop NioEventLoop 表示一个不断循环的执行处理任务的线程，每个 NioEventLoop 都有一个 Selector，用于监听绑定在其上的 socket 的网络通讯 NioEventLoopGroup 可以有多个线程，即可以含有多个 NioEventLoop 每个BossGroup下面的NioEventLoop循环执行的步骤有3步 轮询 accept 事件 处理 accept 事件，与 client 建立连接，生成 NioScocketChannel，并将其注册到某个 workerGroup NIOEventLoop 上的 Selector 继续处理任务队列的任务，即 runAllTasks 每个WorkerGroup、NIOEventLoop循环执行的步骤 轮询 read，write 事件 处理 I/O 事件，即 read，write 事件，在对应 NioScocketChannel 处理 处理任务队列的任务，即 runAllTasks 每个 Worker NIOEventLoop 处理业务时，会使用 pipeline（管道），pipeline 中包含了 channel（通道），即通过 pipeline 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说） Netty 快速入门实例 - TCP 服务实例要求：使用 IDEA 创建 Netty 项目 Netty 服务器在 6668 端口监听，客户端能发送消息给服务器”hello,服务器~” 服务器可以回复消息给客户端”hello,客户端~” 目的：对 Netty 线程模型有一个初步认识，便于理解 Netty 模型理论 编写服务端 编写客户端 对 netty 程序进行分析，看看 netty 模型特点 说明：创建 Maven 项目，并引入 Netty 包 代码如下 NettyServer 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.fyp.netty.simple;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty服务端 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyServer &#123; public static void main(String[] args) throws InterruptedException &#123; // 创建 BossGroup 和 WorkGroup /* 说明： 1. 创建两个线程组 bossGroup 和 workGroup 2. bossGroup 只是 处理 连接请求， 真正的 和客户端 业务处理， 会交给 workGroup 来完成 3. 两个都是 无限循环 4. bossGroup 和 workerGroup 含有的 子线程 （NioEventLoop）的个数 默认实际 cpu核数 * 2 */ EventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; // 创建 服务器端的 启动对象， 配置参数 ServerBootstrap bootstrap = new ServerBootstrap(); // 使用 链式编程 来 进行设置 bootstrap.group(bossGroup, workerGroup) // 设置两个 线程组 .channel(NioServerSocketChannel.class) // 使用 NioSocketChannel 作为 服务器的 通道实现 .option(ChannelOption.SO_BACKLOG, 128) // 设置 线程队列 得到 连接个数 .childOption(ChannelOption.SO_KEEPALIVE, true) // 设置 保持活动 连接状态 .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; // 创建一个 通道 测试对象 @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ch.pipeline().addLast(new NettyServerHandler()); &#125; &#125;); // 给我们的 workerGroup 的 EventLoop 对应的管道 设置处理器 System.out.println(&quot;... 服务器 is ready...&quot;); // 绑定一个 端口， 并且同步，生成 一个 ChannelFuture 对象 // 启动 服务器并绑定端口 ChannelFuture cf = bootstrap.bind(6667).sync(); // 对 关闭通道 进行监听 cf.channel().closeFuture().sync(); &#125;finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; NettyServerHandler 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.fyp.netty.simple;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.util.CharsetUtil;import java.nio.charset.Charset;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: nettty服务端处理器 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123; /** * 读取数据 * @param ctx 上下文对象，含有 管道 pipeline, 通道 channel, 地址 * @param msg 客户端发送的 数据， 默认类型 Object * @throws Exception */ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123; System.out.println(&quot;服务器读取线程 &quot; + Thread.currentThread().getName()); // 不能 调用 父类的 channelRead方法，否则 会报 以下异常： // An exceptionCaught() event was fired, and it reached at the tail of the pipeline. // It usually means the last handler in the pipeline did not handle the exception //super.channelRead(ctx, msg); System.out.println(&quot;server ctx = &quot; + ctx); // 将 msg 转成一个 ByteBuffer ByteBuf buf = (ByteBuf) msg; System.out.println(&quot;客户端发送消息是： &quot; + buf.toString(CharsetUtil.UTF_8)); System.out.println(&quot;客户端地址：&quot; + ctx.channel().remoteAddress()); &#125; // 处理读取完毕 @Override public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123; super.channelReadComplete(ctx); // 将数据 写入到 缓存 并 刷新 ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端: 狗&quot;, CharsetUtil.UTF_8)); &#125; // 处理异常， 要关闭 通道 @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; super.exceptionCaught(ctx, cause); ctx.close(); &#125;&#125; NettyClient 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package com.fyp.netty.simple;import io.netty.bootstrap.Bootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty客户端 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyClient &#123; public static void main(String[] args) throws InterruptedException &#123; // 客户端 需要 一个 事件循环组 NioEventLoopGroup group = new NioEventLoopGroup(); try &#123; // 创建 客户端 启动对象 // 注意客户端 使用的不是 ServerBootStrap, 而是BootStrap Bootstrap bootstrap = new Bootstrap(); // 设置相关 参数 bootstrap.group(group) // 设置 线程组 .channel(NioSocketChannel.class) // 设置 客户端 通道的 实现类（反射) .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ch.pipeline().addLast(new NettyClientHandler()); // 加入自己的 处理器 &#125; &#125;); System.out.println(&quot;客户端 ok...&quot;); // 启动客户端 去连接 服务器端 // 关于 ChannelFuture 要分析， 涉及到 netty 的异步模型 ChannelFuture channelFuture = bootstrap.connect(&quot;127.0.0.1&quot;, 6667).sync(); // 对关闭 通道 进行监听 channelFuture.channel().closeFuture().sync(); &#125; finally &#123; group.shutdownGracefully(); &#125; &#125;&#125; NettyClientHandler 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.fyp.netty.simple;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.Channel;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.util.CharsetUtil;/** * @Auther: fyp * @Date: 2022/2/11 * @Description: netty客户端处理器 * @Package: com.fyp.netty.simple * @Version: 1.0 */public class NettyClientHandler extends ChannelInboundHandlerAdapter &#123; @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; super.channelActive(ctx); System.out.println(&quot;client ctx = &quot; + ctx); ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello,server: (&gt;^ω^&lt;)喵&quot;, CharsetUtil.UTF_8)); &#125; // 当通道 有读取事件 时 ，会触发 @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123; ByteBuf buf = (ByteBuf) msg; System.out.println(&quot;服务端回复的消息： &quot; + buf.toString()); System.out.println(&quot;服务端的地址： &quot; + ctx.channel().remoteAddress()); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; cause.printStackTrace(); ctx.close(); &#125;&#125; 任务队列中的 Task 有 3 种典型使用场景 用户程序自定义的普通任务【举例说明】 用户自定义定时任务 非当前 Reactor 线程调用 Channel 的各种方法 ​ 例如在推送系统的业务线程里面，根据用户的标识，找到对应的 Channel 引用，然后调用 Write 类方法向该用户推送消息，就会进入到这种场景。最终的 Write 会提交到任务队列中后被异步消费 前两种的代码举例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.atguigu.netty.simple;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.util.CharsetUtil;import java.util.concurrent.TimeUnit;/** * 说明 * 1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范) * 2. 这时我们自定义一个Handler , 才能称为一个handler */public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123; //读取数据实际(这里我们可以读取客户端发送的消息) /** * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址 * 2. Object msg: 就是客户端发送的数据 默认Object */ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception &#123; // 比如这里我们有一个非常耗时长的业务-&gt; 异步执行 -&gt; 提交该channel 对应的 // NIOEventLoop 的 taskQueue中, // 解决方案1 用户程序自定义的普通任务 ctx.channel().eventLoop().execute(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(5 * 1000); ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵2&quot;, CharsetUtil.UTF_8)); System.out.println(&quot;channel code=&quot; + ctx.channel().hashCode()); &#125; catch (Exception ex) &#123; System.out.println(&quot;发生异常&quot; + ex.getMessage()); &#125; &#125; &#125;); ctx.channel().eventLoop().execute(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(5 * 1000); ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵3&quot;, CharsetUtil.UTF_8)); System.out.println(&quot;channel code=&quot; + ctx.channel().hashCode()); &#125; catch (Exception ex) &#123; System.out.println(&quot;发生异常&quot; + ex.getMessage()); &#125; &#125; &#125;); //解决方案2 : 用户自定义定时任务 -》 该任务是提交到 scheduleTaskQueue中 ctx.channel().eventLoop().schedule(new Runnable() &#123; @Override public void run() &#123; try &#123; Thread.sleep(5 * 1000); ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵4&quot;, CharsetUtil.UTF_8)); System.out.println(&quot;channel code=&quot; + ctx.channel().hashCode()); &#125; catch (Exception ex) &#123; System.out.println(&quot;发生异常&quot; + ex.getMessage()); &#125; &#125; &#125;, 5, TimeUnit.SECONDS); System.out.println(&quot;go on ...&quot;);// System.out.println(&quot;服务器读取线程 &quot; + Thread.currentThread().getName() + &quot; channle =&quot; + ctx.channel());// System.out.println(&quot;server ctx =&quot; + ctx);// System.out.println(&quot;看看channel 和 pipeline的关系&quot;);// Channel channel = ctx.channel();// ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站// // //将 msg 转成一个 ByteBuf// //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.// ByteBuf buf = (ByteBuf) msg;// System.out.println(&quot;客户端发送消息是:&quot; + buf.toString(CharsetUtil.UTF_8));// System.out.println(&quot;客户端地址:&quot; + channel.remoteAddress()); &#125; //数据读取完毕 @Override public void channelReadComplete(ChannelHandlerContext ctx) throws Exception &#123; //writeAndFlush 是 write + flush //将数据写入到缓存，并刷新 //一般讲，我们对这个发送的数据进行编码 ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;, CharsetUtil.UTF_8)); &#125; //处理异常, 一般是需要关闭通道 @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; ctx.close(); &#125;&#125; 方案再说明 Netty 抽象出两组线程池，BossGroup 专门负责接收客户端连接，WorkerGroup 专门负责网络读写操作。 NioEventLoop 表示一个不断循环执行处理任务的线程，每个 NioEventLoop 都有一个 Selector，用于监听绑定在其上的 socket网络通道。 NioEventLoop 内部采用串行化设计，从消息的 读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送，始终由 IO 线程 NioEventLoop 负责 NioEventLoopGroup 下包含多个 NioEventLoop 每个 NioEventLoop 中包含有一个 Selector，一个 taskQueue 每个 NioEventLoop 的 Selector 上可以注册监听多个 NioChannel 每个 NioChannel 只会绑定在唯一的 NioEventLoop 上 每个 NioChannel 都绑定有一个自己的 ChannelPipeline 9. 异步模型基本介绍 异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。 Netty 中的 I/O 操作是异步的，包括 Bind、Write、Connect 等操作会首先简单的返回一个 ChannelFuture。 调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果。 Netty 的异步模型是建立在 future 和 callback 的之上的。callback 就是回调。重点说 Future，它的核心思想是：假设一个方法 fun，计算过程可能非常耗时，等待 fun 返回显然不合适。那么可以在调用 fun 的时候，立马返回一个 Future，后续可以通过 Future 去监控方法 fun 的处理过程（即：Future-Listener 机制） Future 说明 表示异步的执行结果,可以通过它提供的方法来检测执行是否完成，比如检索计算等等。 ChannelFuture 是一个接口：public interface ChannelFuture extends Future&lt;Void&gt; 我们可以添加监听器，当监听的事件发生时，就会通知到监听器。 工作原理示意图下面第一张图就是管道，中间会经过多个handler 说明： 在使用 Netty 进行编程时，拦截操作和转换出入站数据只需要您提供 callback 或利用 future 即可。这使得链式操作简单、高效，并有利于编写可重用的、通用的代码。 Netty 框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来、解脱出来。 Future-Listener 机制 这里看不懂的可以看笔者的并发系列-JUC部分 当 Future 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 ChannelFuture 来获取操作执行的状态，注册监听函数来执行完成后的操作。 常见有如下操作 通过 isDone 方法来判断当前操作是否完成； 通过 isSuccess 方法来判断已完成的当前操作是否成功； 通过 getCause 方法来获取已完成的当前操作失败的原因； 通过 isCancelled 方法来判断已完成的当前操作是否被取消； 通过 addListener 方法来注册监听器，当操作已完成（isDone方法返回完成），将会通知指定的监听器；如果 Future 对象已完成，则通知指定的监听器 举例说明 演示：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑 1234567891011121314//绑定一个端口并且同步,生成了一个ChannelFuture对象//启动服务器(并绑定端口)ChannelFuture cf = bootstrap.bind(6668).sync();//给cf注册监听器，监控我们关心的事件cf.addListener(new ChannelFutureListener() &#123; @Override public void operationComplete (ChannelFuture future) throws Exception &#123; if (future.isSuccess()) &#123; System.out.println(&quot;监听端口6668成功&quot;); &#125; else &#123; System.out.println(&quot;监听端口6668失败&quot;); &#125; &#125;&#125;); 快速入门实例 - HTTP服务 实例要求：使用 IDEA 创建 Netty 项目 Netty 服务器在 9999 端口监听，浏览器发出请求 http://localhost:9999/ 服务器可以回复消息给客户端”Hello!我是服务器5”,并对特定请求资源进行过滤。 目的：Netty 可以做 Http 服务开发，并且理解 Handler 实例和客户端及其请求的关系。 代码演示 TestServer 123456789101112131415161718192021222324252627282930313233343536373839package com.fyp.netty.http;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.nio.NioServerSocketChannel;/** * @Auther: fyp * @Date: 2022/2/12 * @Description: 测试http服务端 * @Package: com.fyp.netty.http * @Version: 1.0 */public class TestServer &#123; public static void main(String[] args) throws Exception&#123; EventLoopGroup bossGroup = new NioEventLoopGroup(1); EventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new TestServerInitializer()); ChannelFuture channelFuture = serverBootstrap.bind(9999).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; TestHttpServeHandler 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package com.fyp.netty.http;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.buffer.UnpooledByteBufAllocator;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import io.netty.handler.codec.http.*;import io.netty.util.CharsetUtil;import java.net.URI;/** * @Auther: fyp * @Date: 2022/2/12 * @Description: 测试http服务端处理器 * @Package: com.fyp.netty.http * @Version: 1.0 */public class TestHttpServerHandler extends SimpleChannelInboundHandler&lt;HttpObject&gt; &#123; @Override protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception &#123; // 判断 msg 是不是 httpRequest请求 if(msg instanceof HttpRequest) &#123; System.out.println(&quot;pipeline hashcode: &quot; + ctx.pipeline().hashCode() + &quot; TestHttpServerHandler hashcode: &quot; + this.hashCode()); System.out.println(&quot;msg 类型：&quot; + msg.getClass()); System.out.println(&quot;客户端地址：&quot; + ctx.channel().remoteAddress()); // 获取 HttpRequest HttpRequest httpRequest = (HttpRequest) msg; // 获取 uri URI uri = new URI(httpRequest.uri()); System.out.println(&quot;请求路径： &quot; + uri); if (&quot;/favicon.ico&quot;.equals(uri.getPath())) &#123; System.out.println(&quot;请求了favicon.ico, 不做响应&quot;); return; &#125; // 回复信息 给 浏览器 [http 协议] ByteBuf content = Unpooled.copiedBuffer(&quot;hello 我是服务器&quot;, CharsetUtil.UTF_8); // 构造一个 http 响应 FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content); response.headers().set(HttpHeaderNames.CONTENT_TYPE, &quot;text/plain;charset=UTF-8&quot;); response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes()); //将构建好 response返回，必要一步，没有客户端 将收不到服务端 发送的数据 ctx.writeAndFlush(response); &#125; &#125;&#125; TestServerInitializer 12345678910111213141516171819202122232425262728293031323334353637package com.fyp.netty.http;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.socket.SocketChannel;import io.netty.handler.codec.http.HttpServerCodec;/** * @Auther: fyp * @Date: 2022/2/12 * @Description: 测试http服务端的初始化器 * @Package: com.fyp.netty.http * @Version: 1.0 */public class TestServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; // 向 管道 加入 处理器 // 得到 管道 ChannelPipeline pipeline = ch.pipeline(); // 加入 一个 netty 提供的 httpServerCodec =&gt; [coder - decoder] /* HttpServerCodec 说明 1. HttpServerCodec 是 netty 提供的 处理 http 的编解码器 2. 增加一个自定义的 handler */ pipeline.addLast(&quot;MyHttpServerCodec&quot;, new HttpServerCodec()); pipeline.addLast(&quot;MyTestHttpServerHandler&quot;, new TestHttpServerHandler()); System.out.println(&quot;ok ~&quot;); &#125;&#125; 三、Netty 核心模块组件Bootstrap、ServerBootstrap Bootstrap 意思是引导，一个 Netty 应用通常由一个 Bootstrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中 Bootstrap 类是客户端程序的启动引导类，ServerBootstrap 是服务端启动引导类。 常见的方法有 public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)，该方法用于服务器端，用来设置两个 EventLoop public B group(EventLoopGroup group)，该方法用于客户端，用来设置一个 EventLoop public B channel(Class&lt;? extends C&gt; channelClass)，该方法用来设置一个服务器端的通道实现 public &lt;T&gt; B option(ChannelOption&lt;T&gt; option, T value)，用来给 ServerChannel 添加配置 public &lt;T&gt; ServerBootstrap childOption(ChannelOption&lt;T&gt; childOption, T value)，用来给接收到的通道添加配置 public ServerBootstrap childHandler(ChannelHandler childHandler)，该方法用来设置业务处理类（自定义的handler） public ChannelFuture bind(int inetPort)，该方法用于服务器端，用来设置占用的端口号 public ChannelFuture connect(String inetHost, int inetPort)，该方法用于客户端，用来连接服务器端 Future、ChannelFutureNetty 中所有的 IO 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件 常见的方法有 Channel channel()，返回当前正在进行 IO 操作的通道 ChannelFuture sync()，等待异步操作执行完毕 Channel Netty 网络通信的组件，能够用于执行网络 I/O 操作。 通过 Channel 可获得当前网络连接的通道的状态 通过 Channel 可获得网络连接的配置参数（例如接收缓冲区大小） Channel 提供异步的网络 I/O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I/O 调用都将立即返回，并且不保证在调用结束时所请求的 I/O 操作已完成 调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以 I/O 操作成功、失败或取消时回调通知调用方 支持关联 I/O 操作与对应的处理程序 不同协议、不同的阻塞类型的连接都有不同的Channel类型与之对应，常用的Channel类型： NioSocketChannel，异步的客户端 TCP Socket 连接。 NioServerSocketChannel，异步的服务器端 TCP Socket 连接。 NioDatagramChannel，异步的 UDP 连接。 NioSctpChannel，异步的客户端 Sctp 连接。 NioSctpServerChannel，异步的 Sctp 服务器端连接，这些通道涵盖了 UDP 和 TCP 网络 IO 以及文件 IO。 Selector Netty 基于 Selector 对象实现 I/O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。 当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询（Select）这些注册的 Channel 是否有已就绪的 I/O 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel ChannelHandler 及其实现类 ChannelHandler 是一个接口，处理 I/O 事件或拦截 I/O 操作，并将其转发到其 ChannelPipeline（业务处理链）中的下一个处理程序。 ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类 ChannelHandler 及其实现类一览图（后） 我们经常需要自定义一个 Handler 类去继承 ChannelInboundHandlerAdapter，然后通过重写相应方法实现业务逻辑，我们接下来看看一般都需要重写哪些方法 Pipeline 和 ChannelPipelineChannelPipeline 是一个重点： ChannelPipeline 是一个 Handler 的集合，它负责处理和拦截 inbound 或者 outbound 的事件和操作，相当于一个贯穿 Netty 的链。（也可以这样理解：ChannelPipeline 是保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作） ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互 在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应，它们的组成关系如下 一个Channel包含了一个ChannelPipeline，而ChannelPipeline中又维护了一个由ChannelHandlerContext组成的双向链表，并且每个ChannelHandlerContext中又关联着一个ChannelHandler 入站事件和出战事件在一个双向链表中，入站事件会从链表head往后传递到最后一个入站的handler，出站事件会重链表tail往前传递到最前一个出站的handler，两种类型的handler互不干扰 常用方法 ChannelPipeline addFirst(ChannelHandler... handlers)，把一个业务处理类（handler）添加到链中的第一个位置 ChannelPipeline addLast(ChannelHandler... handlers)，把一个业务处理类（handler）添加到链中的最后一个位置 TestServerInitializer和HttpServerCodec这些东西本身也是handler 一般来说事件从客户端往服务器走我们称为出站，反之则是入站。 ChannelHandlerContext 保存 Channel 相关的所有上下文信息，同时关联一个 ChannelHandler 对象 即 ChannelHandlerContext 中包含一个具体的事件处理器 ChannelHandler，同时 ChannelHandlerContext 中也绑定了对应的 pipeline 和 Channel 的信息，方便对 ChannelHandler 进行调用。 常用方法 ChannelFuture close()，关闭通道 ChannelOutboundInvoker flush()，刷新 ChannelFuture writeAndFlush(Object msg)，将数据写到 ChannelPipeline 中当前 ChannelHandler 的下一个 ChannelHandler 开始处理（出站） ChannelOption Netty 在创建 Channel 实例后，一般都需要设置 ChannelOption 参数。 ChannelOption 参数如下： EventLoopGroup 和其实现类 NioEventLoopGroup EventLoopGroup 是一组 EventLoop 的抽象，Netty 为了更好的利用多核 CPU 资源，一般会有多个 EventLoop 同时工作，每个 EventLoop 维护着一个 Selector 实例。 EventLoopGroup 提供 next 接口，可以从组里面按照一定规则获取其中一个 EventLoop 来处理任务。在 Netty 服务器端编程中，我们一般都需要提供两个 EventLoopGroup，例如：BossEventLoopGroup 和 WorkerEventLoopGroup。 通常一个服务端口即一个 ServerSocketChannel 对应一个 Selector 和一个 EventLoop 线程。BossEventLoop 负责接收客户端的连接并将 SocketChannel 交给 WorkerEventLoopGroup 来进行 IO 处理，如下图所示 常用方法 public NioEventLoopGroup()，构造方法 public Future&lt;?&gt; shutdownGracefully()，断开连接，关闭线程 Unpooled 类 Netty 提供一个专门用来操作缓冲区（即 Netty 的数据容器）的工具类 常用方法如下所示 举例说明 Unpooled 获取 Netty 的数据容器 ByteBuf 的基本使用 ~ 案例1： 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.fyp.netty.buf;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;/** * @Auther: fyp * @Date: 2022/2/13 * @Description: ByteBuf测试 * @Package: com.fyp.netty.buf * @Version: 1.0 */public class NettyByteBuf01 &#123; public static void main(String[] args) &#123; /* 创建一个ByteBuf 说明: 1. 创建对象，该对象 包含一个 数组 arr，是一个 byte[10] 2. 在 netty 的 buffer 中，不需要 使用 flip 进行 反转 底层 维护了 readIndex 和 writeIndex 3. 通过 readerIndex 和 writerIndex 和 capacity 将 buffer 分为 三个 区域 0 - readerIndex 已经 读取的 区域 readrIndex - writeIndex 可读的 区域 writerIndex - capacity 可写的 区域 */ ByteBuf buffer = Unpooled.buffer(10); for (int i =0; i &lt; 10; i++) &#123; buffer.writeByte(i); &#125; System.out.println(&quot;capacity: &quot; + buffer.capacity()); //for (int i = 0; i &lt; buffer.capacity(); i++) &#123; // System.out.println(buffer.getByte(i)); //&#125; for (int i = 0; i &lt; buffer.capacity(); i++) &#123; System.out.println(buffer.readByte()); &#125; &#125;&#125; 案例2 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.fyp.netty.buf;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.util.CharsetUtil;/** * @Auther: fyp * @Date: 2022/2/13 * @Description: ByteBuf测试 * @Package: com.fyp.netty.buf * @Version: 1.0 */public class NettyByteBuf02 &#123; public static void main(String[] args) &#123; // 创建 ByteBuf ByteBuf buf = Unpooled.copiedBuffer(&quot;hello,world!&quot;, CharsetUtil.UTF_8); if(buf.hasArray()) &#123; //true byte[] content = buf.array(); // 将 content 转成 字符串 System.out.println(new String(content, CharsetUtil.UTF_8)); System.out.println(&quot;ByteBuf= &quot; + buf); System.out.println(buf.arrayOffset()); System.out.println(buf.readerIndex()); System.out.println(buf.writerIndex()); System.out.println(buf.capacity()); int len = buf.readableBytes(); // 可读的 字节数 System.out.println(&quot;len= &quot; + len); // 使用 for 取出 各个字符 for (int i = 0; i &lt; len; i++) &#123; System.out.println((char) buf.getUnsignedByte(i)); &#125; System.out.println(buf.getCharSequence(0, 4, CharsetUtil.UTF_8)); System.out.println(buf.getCharSequence(4, 6, CharsetUtil.UTF_8)); &#125; &#125;&#125; Netty 应用实例-群聊系统实例要求： 编写一个 Netty 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞） 实现多人群聊 服务器端：可以监测用户上线，离线，并实现消息转发功能 客户端：通过 channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到） 目的：进一步理解 Netty 非阻塞网络编程机制 NioSocketChannel和NioSocketChannel实现的接口 NioSocketChannel和NioSocketChannel继承的类 代码如下： GroupChatServer 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869package com.fyp.netty.groupchat;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.codec.string.StringEncoder;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: 群聊系统服务端 * @Package: com.fyp.netty.groupchat * @Version: 1.0 */public class GroupChatServer &#123; private int port; // 监听端口 public GroupChatServer(int port) &#123; this.port = port; &#125; // 编写 run 方法，处理 客户端的 请求 public void run() throws Exception &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(1); EventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .option(ChannelOption.SO_BACKLOG, 128) .childOption(ChannelOption.SO_KEEPALIVE, true) .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; // 获取到 pipeline ChannelPipeline pipeline = ch.pipeline(); // 向 pipeline 加入 解码器 pipeline.addLast(&quot;decoder&quot;, new StringDecoder()); // 向 pipeline 加入 编码器 pipeline.addLast(&quot;encoder&quot;, new StringEncoder()); // 加入自己 业务处理的 handler pipeline.addLast(new GroupChatServerHandler()); &#125; &#125;); System.out.println(&quot;netty 服务器启动...&quot;); ChannelFuture channelFuture = serverBootstrap.bind(port).sync(); // 监听 关闭 channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125; public static void main(String[] args) throws Exception &#123; new GroupChatServer(7000).run(); &#125;&#125; GroupChatServerHandler 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495package com.fyp.netty.groupchat;import io.netty.channel.Channel;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import io.netty.channel.group.ChannelGroup;import io.netty.channel.group.DefaultChannelGroup;import io.netty.util.concurrent.GlobalEventExecutor;import java.text.SimpleDateFormat;import java.util.Date;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: 群聊系统服务端处理器 * @Package: com.fyp.netty.groupchat * @Version: 1.0 */public class GroupChatServerHandler extends SimpleChannelInboundHandler&lt;String&gt; &#123; // 定义 一个 channel 组， 管理所有的 channel private static ChannelGroup channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE); SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;); /** * handlerAdded 表示连接建立， 一旦连接， 第一个被执行 * 将当前的 channel 加入到 channelGroup * @param ctx * @throws Exception */ @Override public void handlerAdded(ChannelHandlerContext ctx) throws Exception &#123; Channel channel = ctx.channel(); // 将该客户端加入 聊天的信息 ，推送给 其他 客户端 /* 该方法 不会 将 channelGroup 中 所有的 channel 遍历，并发送 消息 我们 不需要 自己 遍历 */ channelGroup.writeAndFlush(&quot;[客户端]&quot; + channel.remoteAddress() + &quot; 加入聊天 &quot; + sdf.format(new Date()) + &quot;\\t&quot;); channelGroup.add(channel); &#125; // 断开 连接，将 xx 客户端 离开信息 推送给 其他 在线的 客户端 @Override public void handlerRemoved(ChannelHandlerContext ctx) throws Exception &#123; Channel channel = ctx.channel(); channelGroup.writeAndFlush(&quot;[客户端]&quot; + channel.remoteAddress() + &quot; 离开了 \\t&quot;); System.out.println(&quot;channelGroup size &quot; + channelGroup.size()); &#125; // 表示 channel 处于 活动状态，提示 xx 在线 @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; System.out.println(ctx.channel().remoteAddress() + &quot;上线了~&quot;); &#125; // 表示 channel 处于 不活动状态，提示 xx 下线 @Override public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123; System.out.println(ctx.channel().remoteAddress() + &quot;离线了~&quot;); &#125; @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception &#123; // 获取到当前的 channel Channel channel = ctx.channel(); // 遍历 channelGroup，根据不同的 情况，回送 不同的 消息 channelGroup.forEach(ch -&gt; &#123; if (channel != ch) &#123; // 不是当前的 channel，转发消息 ch.writeAndFlush(&quot;[客户] &quot; + channel.remoteAddress() + &quot; 发送了消息： &quot; + msg + &quot;\\n&quot;); &#125; else &#123;// 回显 自己发送的消息 给自己 ch.writeAndFlush(&quot;[自己] 发送了消息： &quot; + msg + &quot;\\n&quot;); &#125; &#125;); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; // 关闭通道 ctx.close(); &#125;&#125; GroupChatClient 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package com.fyp.netty.groupchat;import io.netty.bootstrap.Bootstrap;import io.netty.channel.*;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioSocketChannel;import io.netty.handler.codec.string.StringDecoder;import io.netty.handler.codec.string.StringEncoder;import java.util.Scanner;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: 群聊客户端 * @Package: com.fyp.netty.groupchat * @Version: 1.0 */public class GroupChatClient &#123; //属性 private final String host; private final int port; public GroupChatClient(String host, int port) &#123; this.host = host; this.port = port; &#125; public void run() throws InterruptedException &#123; EventLoopGroup group = new NioEventLoopGroup(); try &#123; Bootstrap bootstrap = new Bootstrap() .group(group) .channel(NioSocketChannel.class) .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; // 得到 pipeline ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(&quot;decoder&quot;, new StringDecoder()); pipeline.addLast(&quot;encoder&quot;, new StringEncoder()); pipeline.addLast(new GroupChatClientHandler()); &#125; &#125;); ChannelFuture channelFuture = bootstrap.connect(host, port).sync(); Channel channel = channelFuture.channel(); System.out.println(&quot;-----&quot; + channel.localAddress() + &quot;-----&quot;); // 客户端 需要 输入信息， 创建一个 扫描器 Scanner scanner = new Scanner(System.in); while (scanner.hasNextLine()) &#123; String msg = scanner.nextLine(); // 通过 channel 发送到 服务器端 channel.writeAndFlush(msg + &quot;\\r\\n&quot;); &#125; &#125; finally &#123; group.shutdownGracefully(); &#125; &#125; public static void main(String[] args) throws Exception&#123; new GroupChatClient(&quot;127.0.0.1&quot;, 7000).run(); &#125;&#125; GroupChatClientHandler 12345678910111213141516171819package com.fyp.netty.groupchat;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: 群聊系统客户端处理器 * @Package: com.fyp.netty.groupchat * @Version: 1.0 */public class GroupChatClientHandler extends SimpleChannelInboundHandler&lt;String&gt; &#123; @Override protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception &#123; System.out.println(msg.trim()); &#125;&#125; Netty 心跳检测机制案例实例要求： 编写一个 Netty 心跳检测机制案例,当服务器超过 3 秒没有读时，就提示读空闲 当服务器超过 5 秒没有写操作时，就提示写空闲 实现当服务器超过 7 秒没有读或者写操作时，就提示读写空闲 代码如下： MyServer 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package com.fyp.netty.heartbeat;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.logging.LogLevel;import io.netty.handler.logging.LoggingHandler;import io.netty.handler.timeout.IdleStateHandler;import java.util.concurrent.TimeUnit;import java.util.jar.Pack200;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: * @Package: com.fyp.netty.heartbeat * @Version: 1.0 */public class MyServer &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .handler(new LoggingHandler(LogLevel.INFO)) // 在 bossGroup 中 增加一个 日志 处理器 .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); // 加入一个 netty 提供的 IdleStateHandler /* 说明 1. IdleStateHandler 是 netty 提供的 处理 空闲状态的 处理器 2.readerIdleTime 表示多长时间 没有读，就会发送一个 心跳检测包 检测是否连接 3. writerIdleTime 表示多长时间 没有写，就会发送一个 心跳检测包 检测是否连接 4. allIdleTime 表示多长时间 没有读写，就会发送一个 心跳检测包 检测是否连接 5. 文档说明 Triggers an &#123;@link IdleStateEvent&#125; when a &#123;@link Channel&#125; has not performed read, write, or both operation for a while. 6. 当 IdleStateEvent 触发后， 就会 传递给管道 的下一个 handler 去处理 通过 调用（触发）下一个 handler 的 userEventTriggered, 在该方法中去处理 IdleStateEvent（读空闲，写空闲，读写空闲） */ pipeline.addLast(new IdleStateHandler(3, 5, 7 , TimeUnit.SECONDS)); // 加入一个 对 空闲检测 进行处理的 handler pipeline.addLast(new MyServerHandler()); &#125; &#125;); ChannelFuture channelFuture = serverBootstrap.bind(7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; MyServerHandler 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.fyp.netty.heartbeat;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import io.netty.handler.timeout.IdleStateEvent;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: MyServer 处理器 * @Package: com.fyp.netty.heartbeat * @Version: 1.0 */public class MyServerHandler extends ChannelInboundHandlerAdapter &#123; /** * * @param ctx 上下文 * @param evt 事件 * @throws Exception */ @Override public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception &#123; if (evt instanceof IdleStateEvent) &#123; // 将 evt 向下转型为 IdleStateEvent IdleStateEvent event = (IdleStateEvent) evt; String eventType = null; switch (event.state()) &#123; case READER_IDLE: eventType = &quot;读空闲&quot;; break; case WRITER_IDLE: eventType = &quot;写空闲&quot;; break; case ALL_IDLE: eventType = &quot;读写空闲&quot;; break; &#125; System.out.println(ctx.channel().remoteAddress() + &quot;--超时事件--&quot; + eventType); System.out.println(&quot;服务器做相应处理&quot;); &#125; &#125;&#125; Netty 通过 WebSocket 编程实现服务器和客户端长连接实例要求： Http 协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接。 要求：实现基于 WebSocket 的长连接的全双工的交互 改变 Http 协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器 客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知 运行界面 MyServer 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package com.fyp.netty.websocket;import com.fyp.netty.heartbeat.MyServerHandler;import io.netty.bootstrap.ServerBootstrap;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelInitializer;import io.netty.channel.ChannelPipeline;import io.netty.channel.EventLoopGroup;import io.netty.channel.nio.NioEventLoopGroup;import io.netty.channel.socket.SocketChannel;import io.netty.channel.socket.nio.NioServerSocketChannel;import io.netty.handler.codec.http.HttpObjectAggregator;import io.netty.handler.codec.http.HttpServerCodec;import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;import io.netty.handler.logging.LogLevel;import io.netty.handler.logging.LoggingHandler;import io.netty.handler.stream.ChunkedWriteHandler;import io.netty.handler.timeout.IdleStateHandler;import java.util.concurrent.TimeUnit;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: * @Package: com.fyp.netty.websocket * @Version: 1.0 */public class MyServer &#123; public static void main(String[] args) throws InterruptedException &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .handler(new LoggingHandler(LogLevel.INFO)) // 在 bossGroup 中 增加一个 日志 处理器 .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() &#123; @Override protected void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); // 因为 基于 http协议，使用 http的 编码和解码 pipeline.addLast(new HttpServerCodec()); // 是 以块方式 写，添加 ChunkedWriteHandler 处理器 pipeline.addLast(new ChunkedWriteHandler()); /* 说明 1. http数据 在传输过程中是分段的， HttpObjectAggregator 就是可以将 多个段 聚合 2.这就是为什么 当 浏览器 发送 大量数据时， 就会 发送 多次 http请求 */ pipeline.addLast(new HttpObjectAggregator(8192)); /* 说明 1. 对应的 webSocket, 它的数据 以帧（frame）形式传递 2. 可以看到WebSocketFrame 下面有六个子类 3. 浏览器请求时， ws://localhost:7000/xxx 表示请求的uri 4. WebSocketServerProtocolHandler 核心功能是 将 http协议 升级为 ws 协议，保持长链接 */ pipeline.addLast(new WebSocketServerProtocolHandler(&quot;/hello&quot;)); // 自定义的 handler,处理业务逻辑 pipeline.addLast(new MyTextWebSocketFrameHandler()); &#125; &#125;); ChannelFuture channelFuture = serverBootstrap.bind(7000).sync(); channelFuture.channel().closeFuture().sync(); &#125; finally &#123; bossGroup.shutdownGracefully(); workerGroup.shutdownGracefully(); &#125; &#125;&#125; MyTextWebSocketFrameHandler 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.fyp.netty.websocket;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.SimpleChannelInboundHandler;import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;import java.time.LocalDateTime;/** * @Auther: fyp * @Date: 2022/2/14 * @Description: * @Package: com.fyp.netty.websocket * @Version: 1.0 */public class MyTextWebSocketFrameHandler extends SimpleChannelInboundHandler&lt;TextWebSocketFrame&gt; &#123; @Override protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception &#123; System.out.println(&quot;服务端送到消息 &quot; + msg.text()); // 回复消息 ctx.channel().writeAndFlush(new TextWebSocketFrame(&quot;服务器时间&quot; + LocalDateTime.now() + &quot; &quot; + msg.text())); &#125; // 当 客户端连接后， 触发方法 @Override public void handlerAdded(ChannelHandlerContext ctx) throws Exception &#123; // id 表示 唯一的值 LongText是唯一的 ShortText不是唯一的 System.out.println(&quot;handlerAdded 被调用&quot; + ctx.channel().id().asLongText()); System.out.println(&quot;handlerAdded 被调用&quot; + ctx.channel().id().asShortText()); &#125; @Override public void handlerRemoved(ChannelHandlerContext ctx) throws Exception &#123; System.out.println(&quot;handlerRemoved 被调用&quot; + ctx.channel().id().asLongText()); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; System.out.println(&quot;异常发生 &quot; + cause.getMessage()); &#125;&#125; hello.html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script&gt; var socket; // 判断当前 浏览器 是否支持 webSocket if (window.WebSocket) &#123; // go on // 相当于 channelRead0, ev收到服务器端回送的消息 socket = new WebSocket(&quot;ws://localhost:7000/hello&quot;); socket.onmessage = function (ev) &#123; var rt = document.getElementById(&quot;responseText&quot;); rt.value = rt.value + &quot;\\n&quot; + ev.data; &#125; // 相当于 连接开启（感知到连接开启） socket.onopen = function(ev) &#123; var rt = document.getElementById(&quot;responseText&quot;); rt.value = &quot;连接开启了...&quot;; &#125; // 相当于 连接关闭（感知到连接关闭） socket.onclose = function (ev) &#123; var rt = document.getElementById(&quot;responseText&quot;); rt.value = rt.value + &quot;\\n&quot; + &quot;连接关闭了...&quot;; &#125; &#125; else &#123; alert(&quot;当前浏览器不支持webSocket&quot;) &#125; // 发送消息到服务器 function send(message) &#123; if(!window.socket) &#123; // 先判断 socket 是否创建好 return; &#125; if (socket.readyState == WebSocket.OPEN) &#123; // 通过 socket 发送消息 socket.send(message); &#125; else &#123; alert(&quot;连接没有开启&quot;); &#125; &#125;&lt;/script&gt; &lt;form onsubmit=&quot;return false&quot;&gt; &lt;textarea name=&quot;message&quot; style=&quot;height: 300px; width: 300px&quot;&gt;&lt;/textarea&gt; &lt;input type=&quot;button&quot; value=&quot;发送消息&quot; onclick=&quot;send(this.form.message.value)&quot;&gt;&lt;br&gt; &lt;textarea id=&quot;responseText&quot; style=&quot;height: 300px; width: 300px&quot;&gt;&lt;/textarea&gt; &lt;input type=&quot;button&quot; value=&quot;请空内容&quot; onclick=&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"Java框架","slug":"Java框架","permalink":"http://fyupeng.github.io/categories/Java%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"netty","slug":"netty","permalink":"http://fyupeng.github.io/tags/netty/"}],"author":"fyupeng"},{"title":"Netty 入门 - 01","slug":"netty-01","date":"2022-06-25T07:04:05.000Z","updated":"2022-06-25T07:09:26.824Z","comments":true,"path":"2022/06/25/netty-01/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/netty-01/","excerpt":"","text":"一、 Netty简介1. Netty介绍 Netty 是由 JBOSS 提供的一个 Java 开源框架，现为 Github 上的独立项目。 Netty 是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络 IO 程序。 Netty 主要针对在 TCP 协议下，面向 Client 端的高并发应用，或者 Peer-to-Peer 场景下的大量数据持续传输的应用。 Netty 本质是一个 NIO 框架，适用于服务器通讯相关的多种应用场景。 要透彻理解 Netty，需要先学习 NIO，这样我们才能阅读 Netty 的源码。 2. Netty的应用场景互联网行业 互联网行业：在分布式系统中，各个节点之间需要远程服务调用，高性能的 RPC 框架必不可少，Netty 作为异步高性能的通信框架，往往作为基础通信组件被这些 RPC 框架使用。 典型的应用有：阿里分布式服务框架 Dubbo 的 RPC 框 架使用 Dubbo 协议进行节点间通信，Dubbo 协议默认使用 Netty 作为基础通信组件，用于实现各进程节点之间的内部通信。 游戏行业 游戏行业 协议栈，方便定制和开发私有协议栈，账号登录服务器。 Netty 作为高性能的基础通信组件，提供了 TCP/UDP 和 HTTP 协议栈，方便定制和开发私有协议栈，账号登录服务器。 地图服务器之间可以方便的通过 Netty 进行高性能的通信。 大数据领域 经典的 Hadoop 的高性能通信和序列化组件 Avro 的 RPC 框架，默认采用 Netty 进行跨界点通信。 它的 NettyService 基于 Netty 框架二次封装实现。 大数据行业 经典的 Hadoop 的高性能通信和序列化组件 Avro 的 RPC 框架，默认采用 Netty 进行跨界点通信。 它的 NettyService 基于 Netty 框架二次封装实现。 二、Java BIO编程1. I/O模型 I/O 模型简单的理解：就是用什么样的通道进行数据的发送和接收，很大程度上决定了程序通信的性能。 Java 共支持 3 种网络编程模型 I/O 模式：BIO、NIO、AIO。 Java BIO：同步并阻塞（传统阻塞型），服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。【简单示意图】 Java NIO：同步非阻塞，服务器实现模式为一个线程处理多个请求（连接)，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有 I/O 请求就进行处理。【简单示意图】 Java AIO(NIO.2)：异步非阻塞，AIO 引入异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。 2. BIO、NIO、AIO使用场景分析 BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序简单易理解。 NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，弹幕系统，服务器间通讯等。编程比较复杂，JDK1.4 开始支持。 AIO 方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。 3. Java BIO基本介绍 Java BIO 就是传统的 Java I/O 编程，其相关的类和接口在 java.io。 BIO(BlockingI/O)：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，可以通过线程池机制改善（实现多个客户连接服务器）。【后有应用实例】 BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。 4. Java BIO工作机制 对 BIO 编程流程的梳理 服务器端启动一个 ServerSocket。 客户端启动 Socket 对服务器进行通信，默认情况下服务器端需要对每个客户建立一个线程与之通讯。 客户端发出请求后，先咨询服务器是否有线程响应，如果没有则会等待，或者被拒绝。 如果有响应，客户端线程会等待请求结束后，再继续执行。 5. Java BIO应用实例实例说明： 使用 BIO 模型编写一个服务器端，监听 6666 端口，当有客户端连接时，就启动一个线程与之通讯。 要求使用线程池机制改善，可以连接多个客户端。 服务器端可以接收客户端发送的数据（telnet 方式即可）。 代码演示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.fyp.bio;import java.io.IOException;import java.io.InputStream;import java.net.ServerSocket;import java.net.Socket;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * @Auther: fyp * @Date: 2022/1/31 * @Description: BIO服务 * @Package: com.fyp.bio * @Version: 1.0 */public class BIOServer &#123; public static void main(String[] args) throws IOException &#123; /** * 思路： * 1. 创建一个线程池 * 2. 如果有客户链接，就创建一个线程，与之通讯（单独写一个方法） */ ExecutorService newCachedThreadPool = Executors.newCachedThreadPool(); //创建ServerSocket ServerSocket serverSocket = new ServerSocket(6666); System.out.println(&quot;服务器启动了&quot;); while (true) &#123; System.out.println(&quot;等待连接&quot;); //监听，等待客户端链接 final Socket socket = serverSocket.accept(); System.out.println(&quot;连接到一个客户端&quot;); //创建一个线程，与之通讯（单独写一个方法） newCachedThreadPool.execute(new Runnable() &#123; @Override public void run() &#123; //可以客户端通讯 handler(socket); &#125; &#125;); &#125; &#125; //编写一个handle方法，和客户端通讯 public static void handler(Socket socket) &#123; try &#123; System.out.println(&quot;线程信息 id = &quot; + Thread.currentThread().getId() + &quot; 名字 = &quot; + Thread.currentThread().getName()); byte[] bytes = new byte[10]; //通过Socket获取输入流 InputStream inputStream = socket.getInputStream(); while (true) &#123; System.out.println(&quot;read....&quot;); //没有读到数据会阻塞 int read = inputStream.read(bytes); if(read != -1) &#123; System.out.println(&quot;线程信息 id = &quot; + Thread.currentThread().getId() + &quot; 名字 = &quot; + Thread.currentThread().getName() + &quot; -- &quot; + new String(bytes, 0, read)); &#125; else &#123; System.out.println(&quot;break&quot;); break; &#125; &#125; System.out.println(&quot;跳出read循环&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; System.out.println(&quot;关闭和client的连接&quot;); try &#123; socket.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 6. 总结 每个请求都需要创建独立的线程，与对应的客户端进行数据 Read，业务处理，数据 Write。 当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大。 连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在 Read 操作上，造成线程资源浪费。 三、Java NIO编程1. Java NIO基本介绍 Java NIO 全称 Java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO（即 NewIO），是同步非阻塞的。 NIO 相关类都被放在 java.nio 包及子包下，并且对原 java.io 包中的很多类进行改写。【基本案例】 NIO 有三大核心部分：**Channel（通道）、Buffer（缓冲区）、Selector（选择器）** 。 NIO 是面向缓冲区，或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动，这就增加了处理过程中的灵活性，使用它可以提供非阻塞式的高伸缩性网络。 Java NIO 的非阻塞模式，使一个线程从某通道发送请求或者读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取，而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。非阻塞写也是如此，一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。【后面有案例说明】 通俗理解：NIO 是可以做到用一个线程来处理多个操作的。假设有 10000 个请求过来,根据实际情况，可以分配 50 或者 100 个线程来处理。不像之前的阻塞 IO 那样，非得分配 10000 个。 HTTP 2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比 HTTP 1.1 大了好几个数量级。 2. NIO和BIO的比较 BIO 以流的方式处理数据，而 NIO 以块的方式处理数据，块 I/O 的效率比流 I/O 高很多。 BIO 是阻塞的，NIO 则是非阻塞的。 BIO 基于字节流和字符流进行操作，而 NIO 基于 Channel（通道）和 Buffer（缓冲区）进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector（选择器）用于监听多个通道的事件（比如：连接请求，数据到达等），因此使用单个线程就可以监听多个客户端通道。 Buffer和Channel之间的数据流向是双向的 3. NIO三大核心原理示意图一张图描述 NIO 的 Selector、Channel 和 Buffer 的关系。 Selector、Channel 和 Buffer 关系图（简单版）关系图的说明: 每个 Channel 都会对应一个 Buffer。 Selector 对应一个线程，一个线程对应多个 Channel（连接）。 该图反应了有三个 Channel 注册到该 Selector //程序 程序切换到哪个 Channel 是由事件决定的，Event 就是一个重要的概念。 Selector 会根据不同的事件，在各个通道上切换。 Buffer 就是一个内存块，底层是有一个数组。 数据的读取写入是通过 Buffer，这个和 BIO是不同的，BIO 中要么是输入流，或者是输出流，不能双向，但是 NIO 的 Buffer 是可以读也可以写，需要 flip 方法切换 Channel 是双向的，可以返回底层操作系统的情况，比如 Linux，底层的操作系统通道就是双向的。 4. 缓冲区（Buffer）缓冲区（Buffer）：缓冲区本质上是一个可以读写数据的内存块，可以理解成是一个容器对象（含数组），该对象提供了一组方法，可以更轻松地使用内存块，缓冲区对象内置了一些机制，能够跟踪和记录缓冲区的状态变化情况。Channel 提供从文件、网络读取数据的渠道，但是读取或写入的数据都必须经由 Buffer，如图:【后面举例说明】 Buffer 类及其子类 在 NIO 中，Buffer 是一个顶层父类，它是一个抽象类，类的层级关系图 Buffer 类定义了所有的缓冲区都具有的四个属性来提供关于其所包含的数据元素的信息： Buffer 类相关方法一览 ByteBuffer从前面可以看出对于 Java 中的基本数据类型（boolean 除外），都有一个 Buffer 类型与之相对应，最常用的自然是 ByteBuffer 类（二进制数据），该类的主要方法如下： 5. 通道(Channel)基本介绍 NIO的通道类似于流，但有些区别如下： 通道可以同时进行读写，而流只能读或者只能写 通道可以实现异步读写数据 通道可以从缓冲读数据，也可以写数据到缓冲: BIO 中的 Stream 是单向的，例如 FileInputStream 对象只能进行读取数据的操作，而 NIO 中的通道（Channel）是双向的，可以读操作，也可以写操作。 Channel 在 NIO 中是一个接口 public interface Channel extends Closeable&#123;&#125; 常用的 Channel 类有：**FileChannel、DatagramChannel、ServerSocketChannel 和 SocketChannel**。【ServerSocketChanne 类似 ServerSocket、SocketChannel 类似 Socket】 FileChannel 用于文件的数据读写，DatagramChannel 用于 UDP 的数据读写，ServerSocketChannel 和 SocketChannel 用于 TCP 的数据读写。 图示 FileChannel 类FileChannel 主要用来对本地文件进行 IO 操作，常见的方法有 public int read(ByteBuffer dst)，从通道读取数据并放到缓冲区中 public int write(ByteBuffer src)，把缓冲区的数据写到通道中 public long transferFrom(ReadableByteChannel src, long position, long count)，从目标通道中复制数据到当前通道 public long transferTo(long position, long count, WritableByteChannel target)，把数据从当前通道复制给目标通道 应用实例1 - 本地文件写数据实例要求： 使用前面学习后的 ByteBuffer（缓冲）和 FileChannel（通道），将 “hello,尚硅谷” 写入到 file01.txt 中 文件不存在就创建 代码演示 123456789101112131415161718192021222324252627282930313233343536373839404142package com.fyp.nio;import sun.nio.ByteBuffered;import java.io.FileOutputStream;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/** * @Auther: fyp * @Date: 2022/2/4 * @Description: 使用Channel写文件 * @Package: com.fyp.nio * @Version: 1.0 */public class NIOFileChannel01 &#123; public static void main(String[] args) throws IOException &#123; String str = &quot;hello,尚硅谷&quot;; //创建一个输出流 -&gt; Channel FileOutputStream fileOutputStream = new FileOutputStream(&quot;d:\\\\file01.txt&quot;); //通过fileOutStream获取对应的 FileChannel //这个fileChannel 的真是类型是 FileChannelImpl FileChannel fileChannel = fileOutputStream.getChannel(); //创建一个缓冲区 ByteBuffer ByteBuffer byteBuffer = ByteBuffer.allocate(1024); //将str放入byteBuffer byteBuffer.put(str.getBytes()); //对byteBuffer 进行flip byteBuffer.flip(); //将byteBuffer写入到 fileChannel fileChannel.write(byteBuffer); fileOutputStream.close(); &#125;&#125; 应用实例2 - 本地文件读数据实例要求： 使用前面学习后的 ByteBuffer（缓冲）和 FileChannel（通道），将 file01.txt 中的数据读入到程序，并显示在控制台屏幕 假定文件已经存在 代码演示 12345678910111213141516171819202122232425262728293031323334353637package com.fyp.nio;import com.sun.xml.internal.fastinfoset.stax.events.AttributeBase;import java.io.*;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/** * @Auther: fyp * @Date: 2022/2/4 * @Description: 使用Channel读文件 * @Package: com.fyp.nio * @Version: 1.0 */public class NIOFileChannel02 &#123; public static void main(String[] args) throws IOException &#123; //创建文件输入流 File file = new File(&quot;d:\\\\file01.txt&quot;); FileInputStream fileInputStream = new FileInputStream(file); //通过fileInputStream获取对应的FileChannel -&gt; 实际类型 FileChannelImpl FileChannel fileChannel = fileInputStream.getChannel(); //创建缓冲区 ByteBuffer byteBuffer = ByteBuffer.allocate((int) file.length()); //将通道的数据读入到Buffer fileChannel.read(byteBuffer); //将 byteBuffer 的字节数据转成 String System.out.println(new String(byteBuffer.array())); fileInputStream.close(); &#125;&#125; 应用实例3 - 使用一个 Buffer 完成文件读取、写入实例要求： 使用 FileChannel（通道）和方法 read、write，完成文件的拷贝 拷贝一个文本文件 1.txt，放在项目下即可 代码演示 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.fyp.nio;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.FileChannel;/** * @Auther: fyp * @Date: 2022/2/4 * @Description: 使用Channel读写文件 * @Package: com.fyp.nio * @Version: 1.0 */public class NIOFileChannel03 &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fileInputStream = new FileInputStream(&quot;1.txt&quot;); FileChannel fileChannel01 = fileInputStream.getChannel(); FileOutputStream fileOutputStream = new FileOutputStream(&quot;2.txt&quot;); FileChannel fileChannel02 = fileOutputStream.getChannel(); ByteBuffer byteBuffer = ByteBuffer.allocate(512); while (true) &#123; //循环读数 /* public final Buffer clear() &#123; this.position = 0; this.limit = this.capacity; this.mark = -1; return this; &#125; */ byteBuffer.clear(); int read = fileChannel01.read(byteBuffer); System.out.println(&quot;read= &quot; + read); if (read == -1) &#123; //表示读完 break; &#125; //将buffer 中的数据 写入到 fileChannel02 --- 2.txt byteBuffer.flip(); fileChannel02.write(byteBuffer); &#125; fileInputStream.close(); &#125;&#125; 应用实例4 - 拷贝文件 transferFrom 方法 实例要求： 使用 FileChannel（通道）和方法 transferFrom，完成文件的拷贝 拷贝一张图片 代码演示 12345678910111213141516171819202122232425262728293031323334package com.fyp.nio;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.nio.channels.FileChannel;/** * @Auther: fyp * @Date: 2022/2/4 * @Description: 拷贝文件-transferFrom方法 * @Package: com.fyp.nio * @Version: 1.0 */public class NIOFileChannel04 &#123; public static void main(String[] args) throws IOException &#123; //创建输入流和输出流 FileInputStream fileInputStream = new FileInputStream(&quot;d:\\\\wallhaven.png&quot;); FileOutputStream fileOutputStream = new FileOutputStream(&quot;d:\\\\wallhaven01.png&quot;); //获取各个流对应的Channel FileChannel sourceCh = fileInputStream.getChannel(); FileChannel destCh = fileOutputStream.getChannel(); //使用transferFrom完成拷贝 destCh.transferFrom(sourceCh, 0, sourceCh.size()); //关闭相关通道和流 sourceCh.close(); destCh.close(); fileInputStream.close(); fileOutputStream.close(); &#125;&#125; 关于 Buffer 和 Channel 的注意事项和细节 ByteBuffer 支持类型化的 put 和 get，put 放入的是什么数据类型，get 就应该使用相应的数据类型来取出，否则可能有 BufferUnderflowException 异常。【举例说明】 12345678910111213141516171819202122232425262728293031323334353637package com.fyp.nio;import java.nio.Buffer;import java.nio.ByteBuffer;/** * @Auther: fyp * @Date: 2022/2/4 * @Description: * @Package: com.fyp.nio * @Version: 1.0 */public class NIOByteBufferPutGet &#123; public static void main(String[] args) &#123; //创建一个Buffer ByteBuffer byteBuffer = ByteBuffer.allocate(64); //类型化操作放入数据 byteBuffer.putInt(100); byteBuffer.putLong(9); byteBuffer.putChar(&#x27;尚&#x27;); byteBuffer.putShort((short) 4); //取出 byteBuffer.flip(); System.out.println(); //按通道顺序获取,因为获取会移动position //而获取的数据是从position出发的，根据获取的get类型来定量position移动 System.out.println(byteBuffer.getInt()); System.out.println(byteBuffer.getLong()); System.out.println(byteBuffer.getChar()); System.out.println(byteBuffer.getShort()); &#125;&#125; 可以将一个普通 Buffer 转成只读 Buffer【举例说明】 1234567891011121314151617181920212223242526272829303132333435363738package com.fyp.nio;import java.nio.Buffer;import java.nio.ByteBuffer;/** * @Auther: fyp * @Date: 2022/2/4 * @Description: * @Package: com.fyp.nio * @Version: 1.0 */public class ReadOnlyBuffer &#123; public static void main(String[] args) &#123; //创建一个Buffer ByteBuffer byteBuffer = ByteBuffer.allocate(64); for (int i = 0; i &lt; 64; i++) &#123; byteBuffer.put((byte) i); &#125; //读取 byteBuffer.flip(); //得到一个只读Buffer ByteBuffer readOnlyBuffer = byteBuffer.asReadOnlyBuffer(); System.out.println(readOnlyBuffer.getClass()); //读取 while (readOnlyBuffer.hasRemaining()) &#123; System.out.println(readOnlyBuffer.get()); &#125; //会抛出 ReadOnlyBufferException 异常 //readOnlyBuffer.put((byte) 100); &#125;&#125; NIO 还提供了 MappedByteBuffer，可以让文件直接在内存（堆外的内存）中进行修改，而如何同步到文件由 NIO 来完成。【举例说明】 1234567891011121314151617181920212223242526272829303132333435363738394041package com.fyp.nio;import java.io.RandomAccessFile;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;/** * @Auther: fyp * @Date: 2022/2/5 * @Description: 直接修改内存 * @Package: com.fyp.nio * @Version: 1.0 *//*说明：1. MappedByteBuffer 可让文件直接在内存修改，操作系统不需要拷贝一次 */public class MappedByteBufferTest &#123; public static void main(String[] args) throws Exception &#123; RandomAccessFile randomAccessFile = new RandomAccessFile(&quot;1.txt&quot;, &quot;rw&quot;); FileChannel channel = randomAccessFile.getChannel(); /** * 参数1: FileChannel.MapMode.READ_WRITE 使用的读写模式 * 参数2: 0: 可以直接修改的初始位置 * 参数3: 5: 是映射到内存的大小，即将 1.txt 的多少个字节映射到内存 * 可以直接修改的范围就是 0-5 */ MappedByteBuffer mappedByteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, 5); mappedByteBuffer.put(0, (byte) &#x27;H&#x27;); mappedByteBuffer.put(3, (byte) &#x27;9&#x27;); //会抛出 IndexOutOfBoundsException 异常 //mappedByteBuffer.put(5, (byte) &#x27;Y&#x27;); randomAccessFile.close(); &#125;&#125; 前面我们讲的读写操作，都是通过一个 Buffer 完成的，NIO 还支持通过多个 Buffer（即 Buffer数组）完成读写操作，即 Scattering 和 Gathering【举例说明】 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package com.fyp.nio;/** * @Auther: fyp * @Date: 2022/2/5 * @Description: Scatter和Gather的使用 * @Package: com.fyp.nio * @Version: 1.0 */import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;import java.util.Arrays;/** * Scattering: 将数据写入到buffer时，可以 采用buffer数组，依次写入[分散] * Gathering: 从buffer读取数据时，可以 采用buffer数组，依次读 */public class ScatteringAndGatheringTest &#123; public static void main(String[] args) throws Exception&#123; //使用ServerSocketChannel 和 SocketChannel 网络 ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); InetSocketAddress inetSocketAddress = new InetSocketAddress(7000); //绑定端口到socket, 并启动 serverSocketChannel.socket().bind(inetSocketAddress); ByteBuffer[] byteBuffers = new ByteBuffer[2]; byteBuffers[0] = ByteBuffer.allocate(5); byteBuffers[1] = ByteBuffer.allocate(3); //等待客户端连接 (telnet) SocketChannel socketChannel = serverSocketChannel.accept(); int messageLength = 8; //循环地读数 while (true) &#123; int byteRead = 0; while (byteRead &lt; messageLength) &#123; long l = socketChannel.read(byteBuffers); byteRead += l;//累计读取的字节数 System.out.println(&quot;byteRead= &quot; + byteRead); //使用流打印，查看当前的这个buffer的position 和 limit Arrays.asList(byteBuffers).stream().map(buffer -&gt; &quot;position= &quot; + buffer.position() + &quot;,limit= &quot; + buffer.limit()).forEach(System.out::println); &#125; //将所有的buffer 进行 flip Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip()); //将数据读出显示到客户端 long byteWrite = 0; while (byteWrite &lt; messageLength) &#123; long l = socketChannel.write(byteBuffers); byteWrite += 1; &#125; //将所有的 buffer 进行 clear Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123; buffer.clear(); &#125;); System.out.println(&quot;byteRead= &quot; + byteRead + &quot;,byteWrite= &quot; + byteWrite + &quot;,messageLength= &quot; + messageLength); &#125; &#125;&#125; 6. 选择器（Selector）基本介绍 Java 的 NIO，用非阻塞的 IO 方式。可以用一个线程，处理多个的客户端连接，就会使用到 Selector（选择器）。 Selector 能够检测多个注册的通道上是否有事件发生（注意：多个 Channel 以事件的方式可以注册到同一个 Selector），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。 只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。 避免了多线程之间的上下文切换导致的开销。 Selector 示意图和特点说明 说明如下： Netty 的 IO 线程 NioEventLoop 聚合了 Selector（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。 当线程从某客户端 Socket 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。 线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。 由于读写操作都是非阻塞的，这就可以充分提升 IO 线程的运行效率，避免由于频繁 I/O 阻塞导致的线程挂起。 一个 I/O 线程可以并发处理 N 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 I/O 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。 Selector 类相关方法 注意事项 NIO 中的 ServerSocketChannel 功能类似 ServerSocket、SocketChannel 功能类似 Socket。 Selector相关方法说明 selector.select(); //阻塞 selector.select(1000); //阻塞 1000 毫秒，在 1000 毫秒后返回 selector.wakeup(); //唤醒 selector selector.selectNow(); //不阻塞，立马返还 7. NIO非阻塞网络编程原理分析图NIO 非阻塞网络编程相关的（Selector、SelectionKey、ServerScoketChannel 和 SocketChannel）关系梳理图 对上图的说明： 当客户端连接时，会通过 ServerSocketChannel 得到 SocketChannel。 Selector 进行监听 select 方法，返回有事件发生的通道的个数。 将 socketChannel 注册到 Selector 上，register(Selector sel, int ops)，一个 Selector 上可以注册多个 SocketChannel。 注册后返回一个 SelectionKey，会和该 Selector 关联（集合）。 进一步得到各个 SelectionKey（有事件发生）。 在通过 SelectionKey 反向获取 SocketChannel，方法 channel()。 可以通过得到的 channel，完成业务处理。 直接看后面代码吧 8. NIO非阻塞网络编程快速入门案例： 编写一个 NIO 入门案例，实现服务器端和客户端之间的数据简单通讯（非阻塞） 目的：理解 NIO 非阻塞网络编程机制 服务端： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879package com.fyp.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.*;import java.util.Iterator;import java.util.Set;/** * @Auther: fyp * @Date: 2022/2/5 * @Description: NIO服务器 * @Package: com.fyp.nio * @Version: 1.0 */public class NIOServer &#123; public static void main(String[] args) throws IOException &#123; //创建ServerSocketChannel -&gt; ServerSocket ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(); //得到一个Selector对象 Selector selector = Selector.open(); //绑定一个端口6666，在服务端监听 serverSocketChannel.socket().bind(new InetSocketAddress(6666)); //设置为非阻塞 serverSocketChannel.configureBlocking(false); //把 serverSocketChannel 注册到 selector, 关注事件 为 OP_ACCEPT serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); //循环等待客户端连接 while (true) &#123; //这里我们等待1秒，如果没有事件发生（连接事件） if (selector.select(1000) == 0) &#123;//没有事件发生 System.out.println(&quot;服务器等待了1秒，无连接&quot;); continue; &#125; //如果返回的 &gt; 0, 就获取到相关的 selectionKey集合 //1. 如果返回的 &gt; 0, 表示已经获取到关注的事件 //2. selector.selectedKeys() 返回关注事件的集合 //通过 selectionKeys 反向获取通道 Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys(); //遍历 Set&lt;SelectionKey&gt;, 使用迭代器 Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator(); while (keyIterator.hasNext()) &#123; //获取到selectionKey SelectionKey key = keyIterator.next(); //根据key 对应的通道发生的事件做相应处理 if (key.isAcceptable()) &#123; //如果是OP_ACCEPT, 表示新的客户端连接 //给该客户端生成一个 SocketChannel SocketChannel socketChannel = serverSocketChannel.accept(); System.out.println(&quot;客户端连接成功！生成了一个socketChannel &quot; + socketChannel.hashCode()); //将 SocketChannel 设置为非阻塞 socketChannel.configureBlocking(false); //将socketChannel注册到 selector上, 关注事件为OP_READ, 同时给socketChannel //关联一个Buffer socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(1024)); &#125; if (key.isReadable()) &#123; //发生OP_READ // 通过key 反向获取对应的channel SocketChannel channel = (SocketChannel) key.channel(); //获取该channel关联的 buffer,在与客户端连接就已经创建好了 ByteBuffer buffer = (ByteBuffer) key.attachment(); channel.read(buffer); System.out.println(&quot;from 客户端： &quot; + new String(buffer.array())); &#125; //手动从集合中移动当前的selectionKey, 防止重复操作 keyIterator.remove(); &#125; &#125; &#125;&#125; 客户端： 123456789101112131415161718192021222324252627282930313233343536373839404142package com.fyp.nio;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/6 * @Description: 客户端 * @Package: com.fyp.nio * @Version: 1.0 */public class NIOClient &#123; public static void main(String[] args) throws IOException &#123; //得到一个网络通道 SocketChannel socketChannel = SocketChannel.open(); //设置非阻塞 socketChannel.configureBlocking(false); //提供服务端的 ip 和 端口 InetSocketAddress inetSocketAddress = new InetSocketAddress(&quot;127.0.0.1&quot;, 6666); /* 连接服务器 1. 为非阻塞模式时，即不会等到方法执行完毕再返回，会立即返回，如果返回前已经连接成功，则返回true 返回false 时，说明未连接成功，所以需要再通过while循环地finishConnect()完成最终的连接 2. 为阻塞模式时，直到连接建立或抛出异常 不会返回false，连接不上就抛异常，不需要借助finishConnect() */ if (!socketChannel.connect(inetSocketAddress)) &#123; while (!socketChannel.finishConnect()) &#123; System.out.println(&quot;因为连接需要时间，客户端不会阻塞，可以做其他工作&quot;); &#125; &#125; //如果连接成功，就发送数据 String str = &quot;hello, 尚硅谷&quot;; ByteBuffer buffer = ByteBuffer.wrap(str.getBytes()); //发送数据，将buffer 写入 channel socketChannel.write(buffer); System.in.read(); &#125;&#125; SelectionKey SelectionKey，表示Selector和网络通道的注册关系，共四种： int OP_ACCEPT：有新的网络连接可以 accept，值为 16 int OP_CONNECT：代表连接已经建立，值为 8 int OP_READ：代表读操作，值为 1 int OP_WRITE：代表写操作，值为 4 源码中： 1234public static final int OP_READ = 1 &lt;&lt; 0;public static final int OP_WRITE = 1 &lt;&lt; 2;public static final int OP_CONNECT = 1 &lt;&lt; 3;public static final int OP_ACCEPT = 1 &lt;&lt; 4; SelectionKey 相关方法 ServerSocketChannel ServerSocketChannel 在服务器端监听新的客户端 Socket 连接，负责监听，不负责实际的读写操作 相关方法如下 SocketChannel SocketChannel，网络 IO 通道，具体负责进行读写操作。NIO 把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。 相关方法如下 9. NIO网络编程应用实例-群聊系统实例要求： 编写一个 NIO 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞） 实现多人群聊 服务器端：可以监测用户上线，离线，并实现消息转发功能 客户端：通过 Channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（由服务器转发得到） 目的：进一步理解 NIO 非阻塞网络编程机制 示意图分析和代码 服务端： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152package com.fyp.nio.groupchat;import java.io.IOException;import java.net.InetSocketAddress;import java.net.Socket;import java.nio.ByteBuffer;import java.nio.channels.*;import java.util.Iterator;/** * @Auther: fyp * @Date: 2022/2/6 * @Description: 群聊系统服务端 * @Package: com.fyp.nio.groupchat * @Version: 1.0 */public class GroupChatServer &#123; private Selector selector; private ServerSocketChannel listenChannel; private static final int PORT = 6667; public GroupChatServer() &#123; try &#123; selector = Selector.open(); listenChannel = ServerSocketChannel.open(); listenChannel.socket().bind(new InetSocketAddress(PORT)); listenChannel.configureBlocking(false); listenChannel.register(selector, SelectionKey.OP_ACCEPT); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public void listen() &#123; try &#123; while (true) &#123; // count 获取的是 在阻塞过程中 同时发生的 事件 数，直到有事件 发生，才会执行，否则一直阻塞 /* select 方法在 没有 客户端发起连接时， 会一直阻塞，至少有一个客户端连接，其他 客户端再 发起连接 不再阻塞，会立即返回 */ int count = selector.select(); System.out.println(count); if(count &gt; 0) &#123;// 有事件 处理 // 遍历得到 SelectionKey 集合 Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) &#123; //取出SelectionKey SelectionKey key = iterator.next(); //监听到accept if (key.isAcceptable()) &#123; SocketChannel sc = listenChannel.accept(); // 监听到 客户端 的 SocketChannel 总是默认为阻塞方式，需要重新设置 sc.configureBlocking(false); //将该 sc 注册到 selector sc.register(selector, SelectionKey.OP_READ); System.out.println(sc.getRemoteAddress() + &quot; 上线 &quot;); &#125; if (key.isReadable()) &#123; // 通道发送 read 事件， 即通道是可读状态 //处理读 readData(key); &#125; /* 每次 监听到 客户端后， selector会将 连接上的 客户端 选中， 并添加到 selectionKeys 中 要注册到 selector 上，使用该方法，selector 将 不再选中 如果没有移除，selector 不能选中 其他的 客户端连接 iterator.remove() 移除后，将释放 selector 中的 selectionKeys */ iterator.remove(); &#125; &#125; else &#123; //System.out.println(&quot;等待....&quot;); &#125; &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; finally &#123; // 发送异常处理 &#125; &#125; public void readData(SelectionKey key) &#123; // 取到关联的 channel SocketChannel channel = null; try &#123; // 得到 channel channel = (SocketChannel) key.channel(); // 创建buffer ByteBuffer buffer = ByteBuffer.allocate(1024); int count = channel.read(buffer); // 根据 count 的值 做 处理 if (count &gt; 0) &#123; // 把 缓冲区 的 数据 转成 字符串 String msg = new String(buffer.array()); // 输出该消息 System.out.println(&quot;from 客户端： &quot; + msg); //想其他客户端转发消息，专门写一个方法来处理 sendInfoToOtherClients(msg, channel); &#125; &#125; catch (IOException e) &#123; //e.printStackTrace(); try &#123; System.out.println(channel.getRemoteAddress() + &quot;离线了&quot;); // 取消 注册 key.cancel(); // 关闭通道 channel.close(); &#125; catch (IOException ioException) &#123; ioException.printStackTrace(); &#125; &#125; &#125; // 转发消息给其他客户端（通道） private void sendInfoToOtherClients(String msg, SocketChannel self) throws IOException &#123; System.out.println(&quot;服务器转发消息中....&quot;); // 遍历所有 注册到 selector 上 的 SockChannel, 并排除 self for (SelectionKey key : selector.keys()) &#123; // 通过 key 取出 对应的 SocketChannel Channel targetChannel = key.channel(); // 排除自己 if (targetChannel instanceof SocketChannel &amp;&amp; targetChannel != self) &#123; // 转型 SocketChannel dest = (SocketChannel) targetChannel; // 将 msg 存储到 buffer ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes()); // 将 buffer 的数据 写入 通道 dest.write(buffer); &#125; &#125; &#125; public static void main(String[] args) &#123; // 创建 服务器 对象 GroupChatServer groupChatServer = new GroupChatServer(); groupChatServer.listen(); &#125;&#125; 客户端： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118package com.fyp.nio.groupchat;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.SocketChannel;import java.util.Iterator;import java.util.Scanner;/** * @Auther: fyp * @Date: 2022/2/7 * @Description: 群聊系统客户端 * @Package: com.fyp.nio.groupchat * @Version: 1.0 */public class GroupChatClient &#123; //定义 相关 属性 private final String HOST = &quot;127.0.0.1&quot;; private final int PORT = 6667; private Selector selector; private SocketChannel socketChannel; private String username; // 构造器，完成初始化工作 public GroupChatClient() throws IOException &#123; selector = Selector.open(); // 连接 服务器 socketChannel = socketChannel.open(new InetSocketAddress(&quot;127.0.0.1&quot;, PORT)); // 设置 非阻塞 socketChannel.configureBlocking(false); // 将 channel 注册到 selector socketChannel.register(selector, SelectionKey.OP_READ); // 得到 username username = socketChannel.getLocalAddress().toString().substring(1); System.out.println(username + &quot; is ok....&quot;); &#125; // 向 服务器 发送 消息 public void sendInfo(String info) &#123; info = username + &quot; 说：&quot; + info; try &#123; socketChannel.write(ByteBuffer.wrap(info.getBytes())); &#125; catch (Exception e) &#123; &#125; &#125; // 读取从 服务器 端 回复的 消息 public void readInfo() &#123; try &#123; int readChannels = selector.select(); if (readChannels &gt; 0) &#123;// 有可以用的 通道 Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator(); while (iterator.hasNext()) &#123; SelectionKey key = iterator.next(); if (key.isReadable()) &#123; // 得到 相关的 通道 SocketChannel sc = (SocketChannel) key.channel(); // 得到一个 Buffer ByteBuffer buffer = ByteBuffer.allocate(1024); // 读取 sc.read(buffer); // 把缓存区的数据 转成 字符串 String msg = new String(buffer.array()); System.out.println(msg.trim()); &#125; &#125; iterator.remove();// 删除当前的selectionKey, 防止重复操作, 没有删除，直接影响到selector.select() &#125; else &#123; //System.out.println(&quot;没有可以用的通道....&quot;); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) throws IOException &#123; // 启动 客户端 GroupChatClient chatClient = new GroupChatClient(); // 启动一个线程，每隔3秒， 读取从 服务器 发送过来的数据 new Thread() &#123; @Override public void run() &#123; while (true) &#123; chatClient.readInfo(); try &#123; Thread.currentThread().sleep(3000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;.start(); // 发送数据给 服务端 Scanner scanner = new Scanner(System.in); while (scanner.hasNextLine()) &#123; String s = scanner.nextLine(); chatClient.sendInfo(s); &#125; &#125;&#125; 10. NIO与零拷贝零拷贝之传统文件IO场景：将磁盘上的文件读取出来，然后通过网络协议发送给客户端。 很明显发生了4次拷贝 第一次拷贝，把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝是通过 DMA 的。 第二次拷贝，把内核缓冲区的数据拷贝到用户的缓冲区里，于是应用程序就可以使用这部分数据了，这个拷贝是由 CPU 完成的。 第三次拷贝，把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的 socket 的缓冲区里，这个过程依然由 CPU 完成的。 第四次拷贝，把内核的 socket 缓冲区里的数据，拷贝到协议栈里，这个过程又是由 DMA 完成的。发生了4次用户上下文切换，因为发生了两个系统调用read和write。一个系统调用对应两次上下文切换，所以上下文切换次数在一般情况下只可能是偶数。 想要优化文件传输的性能就两个方向 减少上下文切换次数 减少数据拷贝次数 因为这两个是最耗时的 零拷贝之mmapread() 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，为了减少这一步开销，我们可以用 mmap() 替换 read() 系统调用函数。mmap() 系统调用函数会直接把内核缓冲区里的数据映射到用户空间，这样，操作系统内核与用户空间共享缓冲区，就不需要再进行任何的数据拷贝操作。 总的来说mmap减少了一次数据拷贝，总共4次上下文切换，3次数据拷贝 零拷贝之sendfileLinux2.1 版本提供了 sendFile 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 SocketBuffer 总的来说有2次上下文切换，3次数据拷贝。 sendfile再优化Linux在2.4 版本中，做了一些修改，避免了从内核缓冲区拷贝到 Socketbuffer 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝 mmap 和 sendFile 的区别（1）mmap 适合小数据量读写，sendFile 适合大文件传输。 （2）mmap 需要 4 次上下文切换，3 次数据拷贝；sendFile 需要 3 次上下文切换，最少 2 次数据拷贝。 （3）sendFile 可以利用 DMA 方式，减少 CPU 拷贝，mmap 则不能（必须从内核拷贝到 Socket缓冲区）。 NIO 零拷贝案例案例要求： 使用传统的 IO 方法传递一个大文件 使用 NIO 零拷贝方式传递（transferTo）一个大文件 看看两种传递方式耗时时间分别是多少 传统拷贝方式服务端： 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.fyp.nio.zerocopy;import java.io.DataInputStream;import java.io.IOException;import java.net.ServerSocket;import java.net.Socket;/** * @Auther: fyp * @Date: 2022/2/9 * @Description: 传统IO服务端 * @Package: com.fyp.nio.zerocopy * @Version: 1.0 */public class OldIOServer &#123; public static void main(String[] args) throws IOException &#123; ServerSocket serverSocket = new ServerSocket(7001); while (true) &#123; Socket socket = serverSocket.accept(); DataInputStream dataInputStream = new DataInputStream(socket.getInputStream()); try &#123; byte[] byteArray = new byte[4096]; while (true) &#123; int readCount = dataInputStream.read(byteArray, 0, byteArray.length); if (-1 == readCount) &#123; break; &#125; System.out.println(&quot;读取字节数： &quot; + readCount); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 客户端： 123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.fyp.nio.zerocopy;import java.io.*;import java.net.Socket;/** * @Auther: fyp * @Date: 2022/2/9 * @Description: 传统IO客户端 * @Package: com.fyp.nio.zerocopy * @Version: 1.0 */public class OldIOClient &#123; public static void main(String[] args) throws IOException &#123; Socket socket = new Socket(&quot;localhost&quot;, 7001); String fileName = &quot;aiXcoder-3.3.1-2020.zip&quot;; InputStream inputStream = new FileInputStream(fileName); DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream()); byte[] buffer = new byte[4096]; long readCount; long total = 0; long startTime = System.currentTimeMillis(); while ((readCount = inputStream.read(buffer)) &gt; 0) &#123; total += readCount; dataOutputStream.write(buffer, 0 , (int) readCount); &#125; System.out.println(&quot;发送总字节数： &quot; + total + &quot;, 耗时： &quot; + (System.currentTimeMillis() - startTime)); dataOutputStream.close(); socket.close(); inputStream.close(); &#125;&#125; NIO拷贝方式服务端： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.fyp.nio.zerocopy;import java.io.IOException;import java.net.InetSocketAddress;import java.net.ServerSocket;import java.net.Socket;import java.nio.ByteBuffer;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/9 * @Description: 新IO服务端 * @Package: com.fyp.nio.zerocopy * @Version: 1.0 */public class NewIOServer &#123; public static void main(String[] args) throws IOException &#123; InetSocketAddress inetSocketAddress = new InetSocketAddress(7001); ServerSocketChannel serverSockChannel = ServerSocketChannel.open(); ServerSocket serverSocket = serverSockChannel.socket(); serverSocket.bind(inetSocketAddress); // 创建 buffer ByteBuffer buffer = ByteBuffer.allocate(4096); while (true) &#123; SocketChannel socketChannel = serverSockChannel.accept(); int readCount = 0; while (-1 != readCount) &#123; try &#123; readCount = socketChannel.read(buffer); &#125; catch (Exception e) &#123; //e.printStackTrace(); break; &#125; // buffer.rewind(); // 倒带 position = 0 , mark 作废 &#125; &#125; &#125;&#125; 客户端： 1234567891011121314151617181920212223242526272829303132333435363738394041package com.fyp.nio.zerocopy;import java.io.FileInputStream;import java.io.IOException;import java.net.InetSocketAddress;import java.net.Socket;import java.nio.channels.FileChannel;import java.nio.channels.SocketChannel;/** * @Auther: fyp * @Date: 2022/2/9 * @Description: 新IO客户端 * @Package: com.fyp.nio.zerocopy * @Version: 1.0 */public class NewIOClient &#123; public static void main(String[] args) throws IOException &#123; SocketChannel socketChannel = SocketChannel.open(); socketChannel.connect(new InetSocketAddress(&quot;localhost&quot;, 7001)); String filename = &quot;aiXcoder-3.3.1-2020.zip&quot;; // 得到 一个 文件 channel FileChannel fileChannel = new FileInputStream(filename).getChannel(); // 准备 发送 long startTime = System.currentTimeMillis(); // 在 linux 的 下一个 transferTo 方法就可以 完成 传输 // 在 windows 下一次 调用 transferTo 只能发送 8M // 需要 分段 传输文件，而且 主要 传输时 的位置 transferTo 底层用到零拷贝 long transferCount = fileChannel.transferTo(0, fileChannel.size(), socketChannel); System.out.println(&quot;发送总字节数： &quot; + transferCount + &quot;, 耗时： &quot; + (System.currentTimeMillis() - startTime)); fileChannel.close(); &#125;&#125; 三、Java AIO介绍1. AIO基本介绍 JDK7 引入了 AsynchronousI/O，即 AIO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理 AIO 即 NIO2.0，叫做异步不阻塞的 IO。AIO 引入异步通道的概念，采用了 Proactor 模式，简化了程序编写，有效的请求才启动线程，它的特点是先由操作系统完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用 目前 AIO 还没有广泛应用，Netty 也是基于 NIO，而不是 AIO，因此我们就不详解 AIO 了，有兴趣的同学可以参考《Java新一代网络编程模型AIO原理及Linux系统AIO介绍》 2. BIO、NIO、AIO对比表 BIO NIO AIO IO模型 同步阻塞 同步非阻塞（多路复用） 异步非阻塞 编程难度 简单 复杂 复杂 可靠性 差 好 好 吞吐量 低 高 高 举例说明 同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。 同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己. 异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发 漫画讲IO","categories":[{"name":"Java框架","slug":"Java框架","permalink":"http://fyupeng.github.io/categories/Java%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"netty","slug":"netty","permalink":"http://fyupeng.github.io/tags/netty/"}],"author":"fyupeng"},{"title":"二分查找","slug":"二分查找","date":"2022-06-25T06:45:22.000Z","updated":"2022-06-25T07:00:01.526Z","comments":true,"path":"2022/06/25/二分查找/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","excerpt":"","text":"1. 矩阵1.1 1351. 统计有序矩阵中的负数给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 请你统计并返回 grid 中 负数 的数目。 示例1： 123输入：grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]输出：8解释：矩阵中共有 8 个负数。 示例2： 12输入：grid = [[3,2],[1,0]]输出：0 12345678910111213141516171819202122class Solution &#123; public int countNegatives(int[][] grid) &#123; int count = 0; for(int i = 0 ; i &lt; grid.length; i++) &#123; count += countRowNegatives(grid[i]); &#125; return count; &#125; private int countRowNegatives(int[] row) &#123; int left = 0; int right = row.length; while(left &lt; right) &#123; int mid = left + (right - left) / 2; if(row[mid] &gt;= 0) &#123; left = mid + 1; &#125; else &#123; right = mid; &#125; &#125; return row.length - 1 - left + 1; &#125;&#125; 1.2 74. 搜索二维矩阵编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性： 每行中的整数从左到右按升序排列。每行的第一个整数大于前一行的最后一个整数。 示例1： 12输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3输出：true 示例2： 12输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13输出：false 提示： m == matrix.lengthn == matrix[i].length1 &lt;= m, n &lt;= 100-104 &lt;= matrix[i] [j], target &lt;= 104 1234567891011121314151617181920212223class Solution &#123; public boolean searchMatrix(int[][] matrix, int target) &#123; // 二维 变 一维 // col + row = res // 1 * 4 + 1 = 5 -- 5 / 4 = 1 -- 5 % 4 = 1 int left = 0; int col = matrix[0].length; int row = matrix.length; int right = row * col; while(left &lt; right) &#123; int mid = left + (right - left) / 2; if(matrix[mid / col][mid % col] &lt; target) &#123; left = mid + 1; &#125; else &#123; right = mid; &#125; &#125; if(left &lt; row * col &amp;&amp; target == matrix[left / col][left % col]) &#123; return true; &#125; return false; &#125;&#125; 1.3 1337. 矩阵中战斗力最弱的 K 行给你一个大小为 m * n 的矩阵 mat，矩阵由若干军人和平民组成，分别用 1 和 0 表示。 请你返回矩阵中战斗力最弱的 k 行的索引，按从最弱到最强排序。 如果第 i 行的军人数量少于第 j 行，或者两行军人数量相同但 i 小于 j，那么我们认为第 i 行的战斗力比第 j 行弱。 军人 总是 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。 示例1： 12345678910111213141516输入：mat = [[1,1,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]], k = 3输出：[2,0,3]解释：每行中的军人数目：行 0 -&gt; 2 行 1 -&gt; 4 行 2 -&gt; 1 行 3 -&gt; 2 行 4 -&gt; 5 从最弱到最强对这些行排序后得到 [2,0,3,1,4] ​ 示例2： 1234567891011121314输入：mat = [[1,0,0,0], [1,1,1,1], [1,0,0,0], [1,0,0,0]], k = 2输出：[0,2]解释： 每行中的军人数目：行 0 -&gt; 1 行 1 -&gt; 4 行 2 -&gt; 1 行 3 -&gt; 1 从最弱到最强对这些行排序后得到 [0,2,3,1] 提示： m == mat.lengthn == mat[i].length2 &lt;= n, m &lt;= 1001 &lt;= k &lt;= mmatrix[i] [j] 不是 0 就是 1 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public int[] kWeakestRows(int[][] mat, int k) &#123; List&lt;int[]&gt; list = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; mat.length; i++) &#123; int left = 0; int right = mat[i].length; while(left &lt; right) &#123; int mid = left + (right - left) / 2; if(mat[i][mid] == 1) &#123; left = mid + 1; &#125; else &#123; right = mid; &#125; &#125; // 下标0 表示 军人 数 -- 下标1 表示 索引 list.add(new int[]&#123;left, i&#125;); &#125; PriorityQueue&lt;int[]&gt; heap = new PriorityQueue(new Comparator &lt;int[]&gt;() &#123; @Override public int compare(int[] o1, int[] o2) &#123; if (o1[0] != o2[0]) &#123; return o1[0] - o2[0]; &#125; else &#123; return o1[1] - o2[1]; &#125; &#125; &#125;); for(int i = 0; i &lt; list.size(); i++) &#123; heap.offer(list.get(i)); &#125; int[] res = new int[k]; for(int i = 0; i &lt; k; i++) &#123; res[i] = heap.poll()[1]; &#125; return res; &#125;&#125; 1.4 1346. 检查整数及其两倍数是否存在给你一个整数数组 arr，请你检查是否存在两个整数 N 和 M，满足 N 是 M 的两倍（即，N = 2 * M）。 更正式地，检查是否存在两个下标 i 和 j 满足： i != j0 &lt;= i, j &lt; arr.lengtharr[i] == 2 * arr[j] 示例1： 123输入：arr = [10,2,5,3]输出：true解释：N = 10 是 M = 5 的两倍，即 10 = 2 * 5 。 示例2： 123输入：arr = [7,1,14,11]输出：true解释：N = 14 是 M = 7 的两倍，即 14 = 2 * 7 。 示例3： 123输入：arr = [3,1,7,11]输出：false解释：在该情况下不存在 N 和 M 满足 N = 2 * M 。 提示： 2 &lt;= arr.length &lt;= 500-10^3 &lt;= arr[i] &lt;= 10^3 1234567891011121314151617181920212223242526272829303132class Solution &#123; public boolean checkIfExist(int[] arr) &#123; Arrays.sort(arr); int poAndNaLine = binarySearch(arr, 0, arr.length, 0); // 处理负数 for(int i = poAndNaLine - 1; i &gt;= 0; i--) &#123; int res = binarySearch(arr, 0, i, arr[i] * 2); if(res &lt; arr.length &amp;&amp; arr[res] == arr[i] * 2) &#123; return true; &#125; &#125; // 处理 正数 for(int i = poAndNaLine; i &lt; arr.length; i++) &#123; int res = binarySearch(arr, i + 1, arr.length, arr[i] * 2); if(res &lt; arr.length &amp;&amp; arr[res] == arr[i] * 2) &#123; return true; &#125; &#125; return false; &#125; private int binarySearch(int[] arr, int left, int right, int target) &#123; while(left &lt; right) &#123; int mid = left + (right - left) / 2; if(arr[mid] &lt; target) &#123; left = mid + 1; &#125; else &#123; right = mid; &#125; &#125; return left; &#125;&#125;","categories":[{"name":"leetCode算法","slug":"leetCode算法","permalink":"http://fyupeng.github.io/categories/leetCode%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"二分查找","slug":"二分查找","permalink":"http://fyupeng.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}],"author":"fyupeng"},{"title":"二叉树","slug":"二叉树","date":"2022-06-25T06:45:14.000Z","updated":"2022-06-25T07:00:55.547Z","comments":true,"path":"2022/06/25/二叉树/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1. 144. 二叉树的前序遍历问题给你二叉树的根节点 root ，返回它节点值的 前序 遍历。 示例1： 12输入：root = [1,null,2,3]输出：[1,2,3] 示例2： 12输入：root = []输出：[] 示例3： 12输入：root = [1]输出：[1] 示例4： 12输入：root = [1,2]输出：[1,2] 示例5： 12输入：root = [1,null,2]输出：[1,2] 提示： 树中节点数目在范围 [0, 100] 内 -100 &lt;= Node.val &lt;= 100 代码 迭代法 123456789101112131415class Solution &#123; public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root != null) stack.push(root); while(!stack.empty()) &#123; TreeNode cur = stack.pop(); res.add(cur.val); if(cur.right != null) stack.push(cur.right); if(cur.left != null) stack.push(cur.left); &#125; return res; &#125;&#125; 递归法 123456789101112131415class Solution &#123; private List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; traversal(root); return res; &#125; private void traversal(TreeNode root) &#123; if(root == null) &#123; return; &#125; res.add(root.val); preorderTraversal(root.left); preorderTraversal(root.right); &#125;&#125; 统一迭代法 1234567891011121314151617181920212223242526// 空指针来标记 已访问的节点class Solution &#123; public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root == null) &#123; return res; &#125; stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); if(node.right != null) stack.push(node.right); if(node.left != null) stack.push(node.left); stack.push(node); stack.push(null); &#125; else &#123; stack.pop(); node = stack.pop(); res.add(node.val); &#125; &#125; return res; &#125;&#125; 2. 94. 二叉树的中序遍历问题给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。 示例1： 12输入：root = [1,null,2,3]输出：[1,3,2] 示例2： 12输入：root = []输出：[] 示例3： 12输入：root = [1]输出：[1] 提示： 树中节点数目在范围 [0, 100] 内 -100 &lt;= Node.val &lt;= 100 代码 迭代法 12345678910111213141516171819class Solution &#123; public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); TreeNode cur = root; // 刚开始 循环 有 cur 来保证，后面由 stack 是否为空 来保证（当然访问中间的时候不需要借助 empty()方法 性能有所提高） while(cur != null || !stack.empty()) &#123; if(cur != null) &#123; stack.push(cur); cur = cur.left; &#125; else &#123; cur = stack.pop(); res.add(cur.val); cur = cur.right; &#125; &#125; return res; &#125;&#125; 递归法 123456789101112131415class Solution &#123; private List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; traversal(root); return res; &#125; private void traversal(TreeNode root) &#123; if(root == null) &#123; return; &#125; traversal(root.left); res.add(root.val); traversal(root.right); &#125;&#125; 统一迭代法 12345678910111213141516171819202122232425class Solution &#123; public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root == null) &#123; return res; &#125; stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); if(node.right != null) stack.push(node.right); stack.push(node); stack.push(null); if(node.left != null) stack.push(node.left); &#125; else &#123; stack.pop(); node = stack.pop(); res.add(node.val); &#125; &#125; return res; &#125;&#125; 3. 145. 二叉树的后序遍历问题给你一棵二叉树的根节点 root ，返回其节点值的 后序遍历 。 示例1： 12输入：root = [1,null,2,3]输出：[3,2,1] 示例2： 12输入：root = []输出：[] 示例3： 12输入：root = [1]输出：[1] 提示： 树中节点的数目在范围 [0, 100] 内 -100 &lt;= Node.val &lt;= 100 代码 迭代法 12345678910111213141516class Solution &#123; public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root != null) stack.push(root); while(!stack.empty()) &#123; TreeNode cur = stack.pop(); res.add(cur.val); if(cur.left != null) stack.push(cur.left); if(cur.right != null) stack.push(cur.right); &#125; Collections.reverse(res); return res; &#125;&#125; 递归法 123456789101112131415class Solution &#123; private List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; traversal(root); return res; &#125; private void traversal(TreeNode root) &#123; if(root == null) &#123; return; &#125; traversal(root.left); traversal(root.right); res.add(root.val); &#125;&#125; 统一迭代法 12345678910111213141516171819202122232425class Solution &#123; public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root == null) &#123; return res; &#125; stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); stack.push(node); stack.push(null); if(node.right != null) stack.push(node.right); if(node.left != null) stack.push(node.left); &#125; else &#123; stack.pop(); node = stack.pop(); res.add(node.val); &#125; &#125; return res; &#125;&#125; 4. 102. 二叉树的层序遍历问题给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。 示例1： 12输入：root = [3,9,20,null,null,15,7]输出：[[3],[9,20],[15,7]] 示例2： 12输入：root = [1]输出：[[1]] 示例3： 12输入：root = []输出：[] 提示： 树中节点数目在范围 [0, 2000] 内 -1000 &lt;= Node.val &lt;= 1000 代码1234567891011121314151617181920212223class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); List&lt;Integer&gt; tempList = new ArrayList&lt;&gt;(); Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); if(root == null) &#123; return res; &#125; queue.offer(root); while(!queue.isEmpty()) &#123; int size = queue.size(); while(size-- &gt; 0) &#123; TreeNode node = queue.poll(); tempList.add(node.val); if(node.left != null) queue.offer(node.left); if(node.right != null) queue.offer(node.right); &#125; res.add(new ArrayList&lt;&gt;(tempList)); tempList.clear(); &#125; return res; &#125;&#125; 5. 226. 翻转二叉树问题给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。 示例1： 12输入：root = [4,2,7,1,3,6,9]输出：[4,7,2,9,6,3,1] 示例2： 12输入：root = [2,1,3]输出：[2,3,1] 示例3： 12输入：root = []输出：[] 代码递归和迭代前序遍历和后序可以实现，但中序只能用迭代，用递归不可以是因为父节点翻转后还去翻转已翻转的子节点，导致有些节点没翻转，有些节点翻转两次 但假中序递归可以实现 123invertTree(root-&gt;left); // 左swap(root-&gt;left, root-&gt;right); // 中invertTree(root-&gt;left); // 注意 这里依然要遍历左孩子，因为中间节点已经翻转了 递归法 1234567891011121314151617181920class Solution &#123; public TreeNode invertTree(TreeNode root) &#123; if(root == null) &#123; return root; &#125; invert(root); return root; &#125; private void invert(TreeNode root) &#123; if(root == null) &#123; return; &#125; // 后序遍历的 思想翻转，由下往上 invert(root.left); invert(root.right); TreeNode node = root.left; root.left = root.right; root.right = node; &#125;&#125; 迭代法 1234567891011121314151617181920// 前序遍历 从上往下 翻转class Solution &#123; public TreeNode invertTree(TreeNode root) &#123; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root == null) &#123; return root; &#125; stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.pop(); TreeNode tempNode = node.left; node.left = node.right; node.right = tempNode; if(node.right != null) stack.push(node.right); if(node.left != null) stack.push(node.left); &#125; return root; &#125;&#125; 6. 101. 对称二叉树问题给你一个二叉树的根节点 root ， 检查它是否轴对称。 示例1： 12输入：root = [1,2,2,3,4,4,3]输出：true 示例2： 12输入：root = [1,2,2,null,3,null,3] 输出：false 提示： 树中节点数目在范围 [1, 1000] 内 -100 &lt;= Node.val &lt;= 100 代码 递归法 123456789101112131415161718192021class Solution &#123; public boolean isSymmetric(TreeNode root) &#123; return compare(root.left, root.right); &#125; private boolean compare(TreeNode left, TreeNode right) &#123; if(left == null &amp;&amp; right != null) &#123; return false; &#125; else if(left != null &amp;&amp; right == null) &#123; return false; &#125; else if(left == null &amp;&amp; right == null) &#123; return true; &#125; else if(left.val != right.val) &#123; return false; &#125; boolean outside = compare(left.left, right.right); boolean inside = compare(left.right, right.left); boolean isSame = outside &amp;&amp; inside; return isSame; &#125;&#125; 迭代法 123456789101112131415161718192021222324252627class Solution &#123; public boolean isSymmetric(TreeNode root) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); if(root == null) &#123; return true; &#125; queue.offer(root.left); queue.offer(root.right); while(!queue.isEmpty()) &#123; TreeNode leftNode = queue.poll(); TreeNode rightNode = queue.poll(); // leftNode 和 rightNode 都为空 if(leftNode == null &amp;&amp; rightNode == null) &#123; continue; &#125; // leftNode 和 rightNode 有一个 为空，否则两个都不为空时，两者下标的 值不同 if(leftNode == null || rightNode == null || leftNode.val != rightNode.val) &#123; return false; &#125; queue.offer(leftNode.left); queue.offer(rightNode.right); queue.offer(leftNode.right); queue.offer(rightNode.left); &#125; return true; &#125;&#125; 7. 104. 二叉树的最大深度问题给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 示例： 给定二叉树 [3,9,20,null,null,15,7]， 12345678910graph TBA((3))B((9))C((20))D((15))E((7))A --- BA --- CC --- DC --- E 返回它的最大深度 3 。 代码 前序遍历回溯法 12345678910111213141516171819202122class Solution &#123; private Integer res = 0; public int maxDepth(TreeNode root) &#123; if(root == null) return 0; getDepth(root, 1); return res; &#125; private void getDepth(TreeNode root, Integer depth) &#123; res = depth &gt; res ? depth : res; if(root.left != null) &#123; depth++; getDepth(root.left, depth); depth--; // 回溯 &#125; if(root.right != null) &#123; depth++; getDepth(root.right, depth); depth--; // 回溯 &#125; return; &#125;&#125; 简化代码 12345678910111213141516class Solution &#123; private Integer res = 0; public int maxDepth(TreeNode root) &#123; if(root == null) return 0; getDepth(root, 1); return res; &#125; private void getDepth(TreeNode root, Integer depth) &#123; res = depth &gt; res ? depth : res; if(root.left != null) getDepth(root.left, depth + 1); if(root.right != null) getDepth(root.right, depth + 1); return; &#125;&#125; 后序遍历递归法 1234567891011121314class Solution &#123; public int maxDepth(TreeNode root) &#123; return getDepth(root); &#125; private int getDepth(TreeNode root) &#123; if(root == null) &#123; return 0; &#125; int leftDepth = getDepth(root.left); int rightDepth = getDepth(root.right); return 1 + Math.max(leftDepth, rightDepth); &#125;&#125; 8. 111. 二叉树的最小深度问题给定一个二叉树，找出其最小深度。 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。 说明：叶子节点是指没有子节点的节点。 示例1： 12输入：root = [3,9,20,null,null,15,7]输出：2 示例2： 12输入：root = [2,null,3,null,4,null,5,null,6]输出：5 提示： 树中节点数的范围在 [0, 105] 内 -1000 &lt;= Node.val &lt;= 1000 代码12345678910111213141516171819class Solution &#123; public int minDepth(TreeNode root) &#123; return getDepth(root); &#125; private int getDepth(TreeNode root) &#123; if(root == null) &#123; return 0; &#125; int leftDepth = getDepth(root.left); int rightDepth = getDepth(root.right); if(root.left == null &amp;&amp; root.right != null) &#123; return 1 + rightDepth; &#125; if(root.left != null &amp;&amp; root.right == null) &#123; return 1 + leftDepth; &#125; return 1 + Math.min(leftDepth, rightDepth); &#125;&#125; 9. 222. 完全二叉树的节点个数问题给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。 完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。 示例1： 12输入：root = [1,2,3,4,5,6]输出：6 示例2： 12输入：root = []输出：0 示例3： 12输入：root = [1]输出：1 提示： 树中节点的数目范围是[0, 5 * 104] 0 &lt;= Node.val &lt;= 5 * 104 题目数据保证输入的树是 完全二叉树 代码 层次遍历迭代法 123456789101112131415161718 // 根据完全二叉树的特性，使用层序遍历解决class Solution &#123; public int countNodes(TreeNode root) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); if(root == null) &#123; return 0; &#125; int nodeCount = 0; queue.offer(root); while(!queue.isEmpty()) &#123; nodeCount++; TreeNode node = queue.poll(); if(node.left != null) queue.offer(node.left); if(node.right != null) queue.offer(node.right); &#125; return nodeCount; &#125;&#125; 后序遍历递归法 1234567891011121314 // 普通二叉树 递归 后序遍历class Solution &#123; public int countNodes(TreeNode root) &#123; return getNoeCounts(root); &#125; private int getNoeCounts(TreeNode node) &#123; if(node == null) &#123; return 0; &#125; int leftNodeCounts = getNoeCounts(node.left); int rightNodeCounts = getNoeCounts(node.right); return leftNodeCounts + rightNodeCounts + 1; &#125;&#125; 10. 110. 平衡二叉树问题给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。 示例1： 12输入：root = [3,9,20,null,null,15,7]输出：true 示例2： 12输入：root = [1,2,2,3,3,null,null,4,4]输出：false 示例3： 12输入：root = []输出：true 提示： 树中的节点数在范围 [0, 5000] 内 -104 &lt;= Node.val &lt;= 104 代码后序遍历递归法 1234567891011121314151617181920 // 每个节点 的左右两个子树的高度差的绝对值不超过 1class Solution &#123; public boolean isBalanced(TreeNode root) &#123; if(root == null) &#123; return true; &#125; return NodeHeigh(root) == -1 ? false : true; &#125; // 递归尝试 找到一处 高度差 为 &gt; 1,如有 停止 计算高度，直接 由内到外返回 结果 private int NodeHeigh(TreeNode node) &#123; if(node == null) &#123; return 0; &#125; int leftHeigh = NodeHeigh(node.left); int rightHeigh = NodeHeigh(node.right); if(leftHeigh == -1 || rightHeigh == -1) return -1; int heigh = Math.max(leftHeigh, rightHeigh) + 1; return Math.abs(leftHeigh - rightHeigh) &gt; 1 ? -1 : heigh; &#125;&#125; 前序遍历迭代法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 // 每个节点 的左右两个子树的高度差的绝对值不超过 1// 前序 遍历 求 深度class Solution &#123; public boolean isBalanced(TreeNode root) &#123; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root == null) &#123; return true; &#125; stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.pop(); // 获取 两棵 子树 的高度差 if(Math.abs(getDepth(node.left) - getDepth(node.right)) &gt; 1) &#123; return false; &#125; // 大子树 不超过，遍历 小子树 if(node.right != null) stack.push(node.right); if(node.left != null) stack.push(node.left); &#125; return true; &#125; // 准确来说 计算的是 节点的高度（该节点到叶子结点） // 后序 遍历 求 高度 private int getDepth(TreeNode root) &#123; Integer depth = 0; Integer res = 0; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); if(root == null) &#123; return 0; &#125; stack.push(root); while(!stack.empty()) &#123; // 栈存放了 空指针 TreeNode node = stack.peek(); if(node != null) &#123; node = stack.pop(); stack.push(node); stack.push(null); depth++; if(node.right != null) stack.push(node.right); if(node.left != null) stack.push(node.left); &#125; else &#123; // 弹出 空指针 stack.pop(); node = stack.pop(); depth--; // 类似 回溯 &#125; res = depth &gt; res ? depth : res; &#125; return res; &#125; &#125; 11. 257. 二叉树的所有路径给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。 叶子节点 是指没有子节点的节点。 示例1: 12输入：root = [1,2,3,null,5]输出：[&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;] 实例2： 12输入：root = [1]输出：[&quot;1&quot;] 提示： 树中节点的数目在范围 [1, 100] 内 -100 &lt;= Node.val &lt;= 100 代码 递归法 1234567891011121314151617181920212223class Solution &#123; public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123; List&lt;String&gt; res = new ArrayList&lt;&gt;(); if(root == null) &#123; return res; &#125; backtrack(root, res, &quot;&quot;); return res; &#125; // 前序递归遍历 所有节点 private void backtrack(TreeNode cur,List&lt;String&gt; res, String path) &#123; // 不是空节点 加上 path += cur.val; // 找到 叶子节点 if(cur.left == null &amp;&amp; cur.right == null) &#123; res.add(path); return; &#125; if(cur.left != null) backtrack(cur.left, res, path + &quot;-&gt;&quot;); // 隐藏了 回溯，path 是 String 类型，不可变类 if(cur.right != null) backtrack(cur.right, res, path + &quot;-&gt;&quot;); &#125;&#125; 迭代法 12345678910111213141516171819202122232425262728class Solution &#123; public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123; List&lt;String&gt; res = new ArrayList&lt;&gt;(); if(root == null) &#123; return res; &#125; Stack&lt;String&gt; pathSt = new Stack&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); pathSt.push(root.val + &quot;&quot;); stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.pop(); String path = pathSt.pop(); if(node.left == null &amp;&amp; node.right == null) &#123; res.add(path); &#125; if(node.right != null) &#123; pathSt.push(path + &quot;-&gt;&quot; + node.right.val); stack.push(node.right); &#125; if(node.left != null) &#123; pathSt.push(path + &quot;-&gt;&quot; + node.left.val); stack.push(node.left); &#125; &#125; return res; &#125;&#125; 12. 100. 相同的树问题给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。 如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。 示例1： 12输入：p = [1,2,3], q = [1,2,3]输出：true 示例2： 12输入：p = [1,2], q = [1,null,2]输出：false 示例3： 12输入：p = [1,2,1], q = [1,1,2]输出：false 提示： 两棵树上的节点数目都在范围 [0, 100] 内 -104 &lt;= Node.val &lt;= 104 代码 递归法 1234567891011121314 // 前序递归遍历class Solution &#123; public boolean isSameTree(TreeNode p, TreeNode q) &#123; if(p == null &amp;&amp; q == null) return true; else if(p == null &amp;&amp; q != null) return false; else if(p != null &amp;&amp; q == null) return false; else if(p.val != q.val) return false; boolean leftTreeSame = isSameTree(p.left, q.left); boolean rightTreeSame = isSameTree(p.right, q.right); boolean isSame = leftTreeSame &amp;&amp; rightTreeSame; return isSame; &#125;&#125; 迭代法 12345678910111213141516171819202122232425 // 层序迭代遍历class Solution &#123; public boolean isSameTree(TreeNode p, TreeNode q) &#123; if(p == null &amp;&amp; q == null) return true; if(p == null || q == null) return false; // p 和 q 都不等于 null Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(p); stack.push(q); while(!stack.empty()) &#123; TreeNode leftNode = stack.pop(); TreeNode rightNode = stack.pop(); if(leftNode == null &amp;&amp; rightNode == null) continue; if(leftNode == null || rightNode == null || leftNode.val != rightNode.val) &#123; return false; &#125; // leftNode 和 rightNode 都不为 null stack.push(leftNode.left); stack.push(rightNode.left); stack.push(leftNode.right); stack.push(rightNode.right); &#125; return true; &#125;&#125; 13. 112. 路径总和问题给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。 叶子节点 是指没有子节点的节点。 示例1： 123输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22输出：true解释：等于目标和的根节点到叶节点路径如上图所示。 示例2： 123456输入：root = [1,2,3], targetSum = 5输出：false解释：树中存在两条根节点到叶子节点的路径：(1 --&gt; 2): 和为 3(1 --&gt; 3): 和为 4不存在 sum = 5 的根节点到叶子节点的路径。 示例3： 123输入：root = [], targetSum = 0输出：false解释：由于树是空的，所以不存在根节点到叶子节点的路径。 提示： 树中节点的数目在范围 [0, 5000] 内 1000 &lt;= Node.val &lt;= 1000 1000 &lt;= targetSum &lt;= 1000 代码 前序遍历递归法 1234567891011121314151617class Solution &#123; boolean res = false; public boolean hasPathSum(TreeNode root, int targetSum) &#123; if(root == null) &#123; return false; &#125; backtrack(root, targetSum, root.val); return res; &#125; private void backtrack(TreeNode node, int targetSum, int sum) &#123; if(node.left == null &amp;&amp; node.right == null &amp;&amp; sum == targetSum) &#123; res = true; &#125; if(node.left != null) backtrack(node.left, targetSum, sum + node.left.val); if(node.right != null) backtrack(node.right, targetSum, sum + node.right.val); &#125;&#125; 前序遍历迭代法 12345678910111213141516171819202122232425262728class Solution &#123; boolean res = false; public boolean hasPathSum(TreeNode root, int targetSum) &#123; if(root == null) &#123; return false; &#125; Stack&lt;TreeNode&gt; tNst = new Stack&lt;&gt;(); Stack&lt;Integer&gt; valSt = new Stack&lt;&gt;(); tNst.push(root); valSt.push(root.val); while(!tNst.empty()) &#123; TreeNode node = tNst.pop(); int sum = valSt.pop(); if(node.left == null &amp;&amp; node.right == null &amp;&amp; sum == targetSum) &#123; return true; &#125; if(node.left != null) &#123; valSt.push(sum + node.left.val); tNst.push(node.left); &#125; if(node.right != null) &#123; valSt.push(sum + node.right.val); tNst.push(node.right); &#125; &#125; return false; &#125;&#125; 14. 106. 从中序与后序遍历序列构造二叉树问题给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。 示例1： 12输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]输出：[3,9,20,null,null,15,7] 示例2： 12输入：inorder = [-1], postorder = [-1]输出：[-1] 提示: 1 &lt;= inorder.length &lt;= 3000 postorder.length == inorder.length -3000 &lt;= inorder[i], postorder[i] &lt;= 3000 inorder 和 postorder 都由 不同 的值组成 postorder 中每一个值都在 inorder 中 inorder 保证是树的中序遍历 postorder 保证是树的后序遍历 代码 前序遍历递归法 ( DFS 写法 ) 1234567891011121314151617181920212223class Solution &#123; public TreeNode buildTree(int[] inorder, int[] postorder) &#123; return backtrack(inorder, 0, inorder.length, postorder, 0, postorder.length); &#125; // 左闭右开区间 private TreeNode backtrack(int[] inorder, int inLeft, int inRight, int[] postorder, int postLeft, int postRight) &#123; int index = inLeft; if(inLeft == inRight) return null; TreeNode root = new TreeNode(postorder[postRight - 1]); // 所以for 循环 终止条件是 &lt; 符合 for(int i = inLeft; i &lt; inRight; i++) &#123; if(inorder[i] == postorder[postRight - 1]) &#123; index = i; break; &#125; &#125; // 找的是 左区间，也就是 左节点 root.left = backtrack(inorder, inLeft, index, postorder, postLeft, postLeft + (index - inLeft)); // 找的是 右区间，也就是 右节点 root.right = backtrack(inorder, index + 1, inRight, postorder, postLeft + (index - inLeft), postRight - 1); return root; &#125;&#125; 15. 105. 从前序与中序遍历序列构造二叉树问题给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。 示例1： 12输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]输出: [3,9,20,null,null,15,7] 示例2： 12输入: preorder = [-1], inorder = [-1]输出: [-1] 提示: 1 &lt;= preorder.length &lt;= 3000 inorder.length == preorder.length -3000 &lt;= preorder[i], inorder[i] &lt;= 3000 preorder 和 inorder 均 无重复 元素 inorder 均出现在 preorder preorder 保证 为二叉树的前序遍历序列 inorder 保证 为二叉树的中序遍历序列 代码 DFS 递归法 12345678910111213141516171819class Solution &#123; public TreeNode buildTree(int[] preorder, int[] inorder) &#123; return backtrack(preorder, 0, preorder.length, inorder, 0, inorder.length); &#125; private TreeNode backtrack(int[] preorder, int preLeft, int preRight, int[] inorder, int inLeft, int inRight) &#123; if(inLeft == inRight) return null; TreeNode root = new TreeNode(preorder[preLeft]); int index = inLeft; for(int i = inLeft; i &lt; inRight; i++) &#123; if(inorder[i] == preorder[preLeft]) &#123; index = i; break; &#125; &#125; root.left = backtrack(preorder, preLeft + 1, preLeft + 1 + (index - inLeft), inorder, inLeft, index); root.right = backtrack(preorder, preLeft + 1 + (index - inLeft), preRight, inorder, index + 1, inRight); return root; &#125;&#125; 16. 654. 最大二叉树问题给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建: 创建一个根节点，其值为 nums 中的最大值。递归地在最大值 左边 的 子数组前缀上 构建左子树。递归地在最大值 右边 的 子数组后缀上 构建右子树。返回 nums 构建的 最大二叉树 。 示例1： 123456789101112输入：nums = [3,2,1,6,0,5]输出：[6,3,5,null,2,0,null,null,1]解释：递归调用如下所示：- [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。 - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。 - 空数组，无子节点。 - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。 - 空数组，无子节点。 - 只有一个元素，所以子节点是一个值为 1 的节点。 - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。 - 只有一个元素，所以子节点是一个值为 0 的节点。 - 空数组，无子节点。 示例2： 12输入：nums = [3,2,1]输出：[3,null,2,null,1] 提示： 1 &lt;= nums.length &lt;= 1000 0 &lt;= nums[i] &lt;= 1000 nums 中的所有整数 互不相同 代码12345678910111213141516171819202122class Solution &#123; public TreeNode constructMaximumBinaryTree(int[] nums) &#123; return recursion(nums, 0, nums.length); &#125; private TreeNode recursion(int[] nums, int leftIndex, int rightIndex) &#123; if(leftIndex == rightIndex) &#123; return null; &#125; int maxIndex = leftIndex; int max = nums[maxIndex]; for(int i = leftIndex; i &lt; rightIndex; i++) &#123; if(max &lt; nums[i]) &#123; max = nums[i]; maxIndex = i; &#125; &#125; TreeNode root = new TreeNode(max); root.left = recursion(nums, leftIndex, maxIndex); root.right = recursion(nums, maxIndex + 1, rightIndex); return root; &#125;&#125; 小总结涉及到使用数组递归创建二叉树可以使用以下模板 1234567891011121314151617181920class Solution &#123; public TreeNode constructMaximumBinaryTree(int[] nums) &#123; return recursion(nums, 0, nums.length, ...); &#125; private TreeNode recursion(int[] nums, int leftIndex, int rightIndex, ...) &#123; if(leftIndex == rightIndex) &#123; return null; &#125; // 初始化 要创建的节点坐标 int rootIndex = 0; for(int i = leftIndex; i &lt; rightIndex; i++) &#123; // 满足创建节点条件 // rootIndex = ? &#125; TreeNode root = new TreeNode(nums[rootIndex]); root.left = recursion(nums, leftIndex, maxIndex, ...); root.right = recursion(nums, maxIndex + 1, rightIndex, ...); return root; &#125;&#125; 17. 617. 合并二叉树问题给你两棵二叉树： root1 和 root2 。 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。 返回合并后的二叉树。 注意: 合并过程必须从两个树的根节点开始。 示例1： 12输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]输出：[3,4,5,5,4,null,7] 示例2： 12输入：root1 = [1], root2 = [1,2]输出：[2,2] 提示： 两棵树中的节点数目在范围 [0, 2000] 内 -104 &lt;= Node.val &lt;= 104 代码 前序遍历递归法 12345678910class Solution &#123; public TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123; if(root1 == null) return root2; if(root2 == null) return root1; root1.val += root2.val; root1.left = mergeTrees(root1.left, root2.left); root1.right = mergeTrees(root1.right, root2.right); return root1; &#125;&#125; 层序遍历迭代法 123456789101112131415161718192021222324252627282930class Solution &#123; public TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123; if(root1 == null) return root2; if(root2 == null) return root1; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root2); stack.push(root1); while(!stack.empty()) &#123; TreeNode node1 = stack.pop(); TreeNode node2 = stack.pop(); node1.val += node2.val; if(node1.left != null &amp;&amp; node2.left != null) &#123; stack.push(node2.left); stack.push(node1.left); &#125; if(node1.right != null &amp;&amp; node2.right != null) &#123; stack.push(node2.right); stack.push(node1.right); &#125; // 这里 赋值的 是 node2 的子树（子树！） if(node1.left == null &amp;&amp; node2.left != null) &#123; node1.left = node2.left; &#125; if(node1.right == null &amp;&amp; node2.right != null) &#123; node1.right = node2.right; &#125; &#125; return root1; &#125;&#125; 18. 700. 二叉搜索树中的搜索问题给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 示例1： 12输入：root = [4,2,7,1,3], val = 2输出：[2,1,3] 示例2： 12输入：root = [4,2,7,1,3], val = 5输出：[] 提示： 数中节点数在 [1, 5000] 范围内 1 &lt;= Node.val &lt;= 107 root 是二叉搜索树 1 &lt;= val &lt;= 107 代码 前序遍历递归法 123456789101112131415class Solution &#123; private TreeNode res = null; public TreeNode searchBST(TreeNode root, int val) &#123; search(root, val); return res; &#125; private void search(TreeNode root, int val) &#123; if(root.val == val) &#123; res = root; return; &#125; if(root.left != null) search(root.left, val); if(root.right != null) search(root.right, val); &#125;&#125; 19. 700. 二叉搜索树中的搜索问题给定二叉搜索树（BST）的根节点 root 和一个整数值 val。 你需要在 BST 中找到节点值等于 val 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 null 。 示例1： 12输入：root = [4,2,7,1,3], val = 2输出：[2,1,3] 示例2： 12输入：root = [4,2,7,1,3], val = 5输出：[] 提示： 数中节点数在 [1, 5000] 范围内 1 &lt;= Node.val &lt;= 107 root 是二叉搜索树 1 &lt;= val &lt;= 107 代码123456789101112131415class Solution &#123; public TreeNode searchBST(TreeNode root, int val) &#123; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.pop(); if(node.val == val) &#123; return node; &#125; if(node.right != null) stack.push(node.right); if(node.left != null) stack.push(node.left); &#125; return null; &#125;&#125; 20. 98. 验证二叉搜索树问题给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。 有效 二叉搜索树定义如下： 节点的左子树只包含 小于 当前节点的数。节点的右子树只包含 大于 当前节点的数。所有左子树和右子树自身必须也是二叉搜索树。 示例1： 12输入：root = [2,1,3]输出：true 示例2： 123输入：root = [5,1,4,null,null,3,6]输出：false解释：根节点的值是 5 ，但是右子节点的值是 4 。 提示： 树中节点数目范围在[1, 104] 内 -231 &lt;= Node.val &lt;= 231 - 1 代码 中序遍历递归法 12345678910111213141516171819 // 注意 保存上一个值来比较，初始化要小于 int 类型最小值class Solution &#123; private long preVal = ((long)Integer.MIN_VALUE - 1); private boolean isTrue = true; public boolean isValidBST(TreeNode root) &#123; recursion(root); return isTrue; &#125; private void recursion(TreeNode node) &#123; if(node == null) return; if(node.left != null &amp;&amp; isTrue) recursion(node.left); if(node.val &lt;= preVal) &#123; isTrue = false; return; &#125; preVal = node.val; if(node.right != null &amp; isTrue) recursion(node.right); &#125;&#125; 中序遍历迭代法 12345678910111213141516171819202122232425class Solution &#123; public boolean isValidBST(TreeNode root) &#123; long preVal = ((long)Integer.MIN_VALUE - 1); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); if(node.right != null) stack.push(node.right); stack.push(node); stack.push(null); if(node.left != null) stack.push(node.left); &#125; else &#123; stack.pop(); node = stack.pop(); if(node.val &lt;= preVal) &#123; return false; &#125; preVal = node.val; &#125; &#125; return true; &#125;&#125; 21. 530. 二叉搜索树的最小绝对差问题给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。 差值是一个正数，其数值等于两值之差的绝对值。 示例1： 12输入：root = [4,2,6,1,3]输出：1 示例2： 12输入：root = [1,0,48,null,null,12,49]输出：1 提示： 树中节点的数目范围是 [2, 104] 0 &lt;= Node.val &lt;= 105 代码 中序遍历递归法 12345678910111213141516171819 // 中序遍历，保存前一元素变量和当前最新差变量class Solution &#123; private int diffVal = Integer.MAX_VALUE; private int preVal = - 100000; public int getMinimumDifference(TreeNode root) &#123; recursion(root); return diffVal; &#125; private void recursion(TreeNode node) &#123; if(node == null) return; if(node.left != null) recursion(node.left); int curDiff = node.val - preVal; if(curDiff &lt; diffVal) &#123; diffVal = curDiff; &#125; preVal = node.val; if(node.right != null) recursion(node.right); &#125;&#125; 中序遍历迭代法 12345678910111213141516171819202122232425262728 // 中序遍历，保存前一元素变量和当前最新差变量class Solution &#123; public int getMinimumDifference(TreeNode root) &#123; int diffVal = Integer.MAX_VALUE; int preVal = - 100000; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); if(node.right != null) stack.push(node.right); stack.push(node); stack.push(null); if(node.left != null) stack.push(node.left); &#125; else &#123; stack.pop(); node = stack.pop(); int curDiff = node.val - preVal; if(curDiff &lt; diffVal) &#123; diffVal = curDiff; &#125; preVal = node.val; &#125; &#125; return diffVal; &#125;&#125; 22. 501. 二叉搜索树中的众数问题给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。 如果树中有不止一个众数，可以按 任意顺序 返回。 假定 BST 满足如下定义： 结点左子树中所含节点的值 小于等于 当前节点的值结点右子树中所含节点的值 大于等于 当前节点的值左子树和右子树都是二叉搜索树 示例1： 12输入：root = [1,null,2,2]输出：[2] 示例2： 12输入：root = [0]输出：[0] 提示： 树中节点的数目在范围 [1, 104] 内 -105 &lt;= Node.val &lt;= 105 代码 中序遍历迭代法 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123; public int[] findMode(TreeNode root) &#123; int preVal = - 100000 - 1; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); int maxTime = 1; int currentTime = 1; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); if(node.right != null) stack.push(node.right); stack.push(node); stack.push(null); if(node.left != null) stack.push(node.left); &#125; else &#123; stack.pop(); node = stack.pop(); // 先 判断 是否有 相同元素 来 计当前元素 次数 if(node.val == preVal) &#123; currentTime++; &#125; else &#123; currentTime = 1; &#125; // 再 通过 相同元素次数 和最大次数 比较 // 相等就 再加入结果 if(currentTime == maxTime) &#123; res.add(node.val); // 存在 一个元素 比之前 次数还多的，那之前的就不要了,把当前的元素 加入结果 &#125; else if(currentTime &gt; maxTime) &#123; maxTime = currentTime; res.clear(); res.add(node.val); &#125; preVal = node.val; &#125; &#125; return Arrays.stream(res.toArray(new Integer[0])).mapToInt(Integer::intValue).toArray(); &#125;&#125; 中序遍历递归法 12345678910111213141516171819202122232425262728293031323334class Solution &#123; private int preVal = - 100000 - 1; private List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); private int maxTime = 1; private int currentTime = 1; public int[] findMode(TreeNode root) &#123; recursion(root); int[] intRes = new int[res.size()]; for(int i = 0; i &lt; res.size(); i++) &#123; intRes[i] = res.get(i); &#125; return intRes; &#125; private void recursion(TreeNode node) &#123; if(node.left != null )recursion(node.left); if(node.val == preVal) &#123; currentTime++; &#125; else &#123; currentTime = 1; &#125; // 再 通过 相同元素次数 和最大次数 比较 // 相等就 再加入结果 if(currentTime == maxTime) &#123; res.add(node.val); // 存在 一个元素 比之前 次数还多的，那之前的就不要了,把当前的元素 加入结果 &#125; else if(currentTime &gt; maxTime) &#123; maxTime = currentTime; res.clear(); res.add(node.val); &#125; preVal = node.val; if(node.right != null) recursion(node.right); &#125;&#125; 23. 236. 二叉树的最近公共祖先问题给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 示例1： 123输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出：3解释：节点 5 和节点 1 的最近公共祖先是节点 3 。 示例2： 123输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出：5解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。 示例3： 12输入：root = [1,2], p = 1, q = 2输出：1 提示： 树中节点数目在范围 [2, 105] 内。-109 &lt;= Node.val &lt;= 109所有 Node.val 互不相同 。p != qp 和 q 均存在于给定的二叉树中。 代码 后序遍历递归法 12345678910111213141516171819202122class Solution &#123; public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; // 终止条件，找不到 返回 null，否则 返回 目标节点 if(root == null || root == p || root == q) return root; // 后序递归 TreeNode left = lowestCommonAncestor(root.left, p, q); TreeNode right = lowestCommonAncestor(root.right, p, q); // 由 公共 祖先 找到，而且 公共祖先 不为 left 或 right if(left != null &amp;&amp; right != null) &#123; return root; &#125; // 由 left 子树中 找到，右侧中 没有 p 和 q，而且 找到的 必然是 节点更高的 那个(后序遍历) if(left != null &amp;&amp; right == null) &#123; return left; // 由 right 子树中 找到，左侧中 没有 p 和 q，而且 找到的 必然是 节点更高的 那个(后序遍历) &#125; else if(left == null &amp;&amp; right != null) &#123; return right; &#125; else &#123; return null; &#125; &#125;&#125; 24. 235. 二叉搜索树的最近公共祖先问题给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5] 示例1： 123输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8输出: 6 解释: 节点 2 和节点 8 的最近公共祖先是 6。 示例2： 123输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4输出: 2解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。 说明: 所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉搜索树中。 代码 迭代法 1234567891011121314class Solution &#123; public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; while(root != null) &#123; if(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) &#123; root = root.right; &#125; else if(root.val &gt; p.val &amp;&amp; root.val &gt; q.val) &#123; root = root.left; &#125; else &#123; break; &#125; &#125; return root; &#125;&#125; 递归法 12345678910class Solution &#123; public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; if(root.val &lt; Math.min(p.val, q.val)) &#123; return lowestCommonAncestor(root.right, p, q); &#125; else if (root.val &gt; Math.max(p.val, q.val)) &#123; return lowestCommonAncestor(root.left, p, q); &#125; return root; &#125;&#125; 25. 701. 二叉搜索树中的插入操作问题给定二叉搜索树（BST）的根节点 root 和要插入树中的值 value ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。 注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。 示例1： 123输入：root = [4,2,7,1,3], val = 5输出：[4,2,7,1,3,5]解释：另一个满足题目要求可以通过的树是： 示例2： 12输入：root = [40,20,60,10,30,50,70], val = 25输出：[40,20,60,10,30,50,70,null,null,25] 示例3： 12输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5输出：[4,2,7,1,3,5] 提示： 树中的节点数将在 [0, 104]的范围内。 -108 &lt;= Node.val &lt;= 108 所有值 Node.val 是 独一无二 的。 -108 &lt;= val &lt;= 108 保证 val 在原始BST中不存在。 代码 递归法（找到 对应 位置，回溯后 指向解决） 1234567891011class Solution &#123; public TreeNode insertIntoBST(TreeNode root, int val) &#123; // 向下搜索到 指定 空节点位置，回溯后由对应的 父节点的对应 子节点 指向待插入节点就可以了 if(root == null) &#123; return new TreeNode(val); &#125; if(root.val &gt; val) root.left = insertIntoBST(root.left, val); if(root.val &lt; val) root.right = insertIntoBST(root.right, val); return root; &#125;&#125; 迭代法 1234567891011121314151617181920212223class Solution &#123; public TreeNode insertIntoBST(TreeNode root, int val) &#123; if(root == null) &#123; return new TreeNode(val); &#125; TreeNode pre = root; TreeNode cur = root; while(cur != null) &#123; pre = cur; if(cur.val &lt; val) &#123; cur = cur.right; &#125; else &#123; cur = cur.left; &#125; &#125; if(pre.val &lt; val) &#123; pre.right = new TreeNode(val); &#125; else &#123; pre.left = new TreeNode(val); &#125; return root; &#125;&#125; 26. 450. 删除二叉搜索树中的节点问题给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。 一般来说，删除节点可分为两个步骤： 首先找到需要删除的节点；如果找到了，删除它。 示例1： 12345输入：root = [5,3,6,2,4,null,7], key = 3输出：[5,4,6,2,null,null,7]解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。另一个正确答案是 [5,2,6,null,4,null,7]。 示例2： 123输入: root = [5,3,6,2,4,null,7], key = 0输出: [5,3,6,2,4,null,7]解释: 二叉树不包含值为 0 的节点 示例3： 12输入: root = [], key = 0输出: [] 提示: 节点数的范围 [0, 104]. -105 &lt;= Node.val &lt;= 105 节点值唯一 root 是合法的二叉搜索树 -105 &lt;= key &lt;= 105 代码 递归法 12345678910111213141516171819202122232425262728293031323334class Solution &#123; public TreeNode deleteNode(TreeNode root, int key) &#123; if(root == null) return null; if(root.val == key) &#123; if(root.left == null &amp;&amp; root.right == null) &#123; return null; &#125; else if(root.left == null) &#123; TreeNode target = root.right; // gc 垃圾 回收 root.right = null; return target; &#125; else if(root.right == null) &#123; TreeNode target = root.left; // gc 垃圾 回收 root.left = null; return target; &#125; else &#123; TreeNode cur = root.right; TreeNode target = cur; while(cur.left != null) &#123; cur = cur.left; &#125; cur.left = root.left; // gc 回收 root.left = null; root.right = null; return target; &#125; &#125; if(root.val &gt; key) root.left = deleteNode(root.left, key); if(root.val &lt; key) root.right = deleteNode(root.right, key); return root; &#125;&#125; 小总结涉及到二叉搜索树增加和删除节点操作的，可以使用以下递归模板 12345678910111213141516class Solution &#123; public TreeNode recursion(TreeNode root, int key) &#123; // 查找到 具体位置，但为空 if(root == null) &#123; /*具体操作*/ return /**/; &#125; // 找到 具体 元素位置 if(root.val == key) &#123; &#125; root.left = recursion(root.left, key); root.right = recursion(root.right, key); return root; &#125;&#125; 669. 修剪二叉搜索树问题给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。 所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。 示例1： 12输入：root = [1,0,2], low = 1, high = 2输出：[1,null,2] 示例2： 12输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3输出：[3,2,null,1] 提示： 树中节点数在范围 [1, 104] 内0 &lt;= Node.val &lt;= 104树中每个节点的值都是 唯一 的题目数据保证输入是一棵有效的二叉搜索树0 &lt;= low &lt;= high &lt;= 104 代码 递归法 因为涉及到节点删除，所以还是用之前那一套模板 12345678910111213141516class Solution &#123; public TreeNode trimBST(TreeNode root, int low, int high) &#123; if(root == null) &#123; return null; &#125; if(root.val &lt; low) &#123; return trimBST(root.right, low, high); &#125; if(root.val &gt; high) &#123; return trimBST(root.left, low, high); &#125; root.left = trimBST(root.left, low, high); root.right = trimBST(root.right, low, high); return root; &#125;&#125; 迭代法 12345678910111213141516171819202122232425262728293031323334class Solution &#123; public TreeNode trimBST(TreeNode root, int low, int high) &#123; if(root == null) &#123; return null; &#125; // 遍历二叉搜索树找到第一个节点 处在 区间low - high // 这一步也是在做 修减 while(root != null &amp;&amp; (root.val &lt; low || root.val &gt; high)) &#123; if(root.val &lt; low) root = root.right; if(root.val &gt; high) root = root.left; &#125; TreeNode cur = root; // 这样，左边的节点值不可能大于 high，只要修减 小于 low while(cur != null) &#123; while(cur.left != null &amp;&amp; cur.left.val &lt; low) &#123; // 左子树root 节点值小，删除 左子树中的 左子树 cur.left = cur.left.right; &#125; // 遍历比 被修减的节点值更大的 节点 cur = cur.left; &#125; cur = root; // 右边的 节点值 不可能 小于 low，只要修减 大于 high while(cur != null) &#123; while(cur.right != null &amp;&amp; cur.right.val &gt; high) &#123; // 右子树root 节点值大，删除 右子树中的 右子树 cur.right = cur.right.left; &#125; // 遍历比 被修减的节点值更小的 节点 cur = cur.right; &#125; return root; &#125;&#125; 108. 将有序数组转换为二叉搜索树问题给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。 高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。 示例1： 123输入：nums = [-10,-3,0,5,9]输出：[0,-3,9,-10,null,5]解释：[0,-10,5,null,-3,null,9] 也将被视为正确答案 示例2： 123输入：nums = [1,3]输出：[3,1]解释：[1,null,3] 和 [3,1] 都是高度平衡二叉搜索树。 提示： 1 &lt;= nums.length &lt;= 104 -104 &lt;= nums[i] &lt;= 104 nums 按 严格递增 顺序排列 代码 递归法 1234567891011121314151617class Solution &#123; public TreeNode sortedArrayToBST(int[] nums) &#123; return recursion(nums, 0, nums.length); &#125; // 定义 为左闭右开的区间 private TreeNode recursion(int[] nums, int left, int right) &#123; // 已经取不到值了 if(left == right) &#123; return null; &#125; int rootIndex = left + (right - left) / 2; TreeNode root = new TreeNode(nums[rootIndex]); root.left = recursion(nums, left, rootIndex); root.right = recursion(nums, rootIndex + 1, right); return root; &#125;&#125; 迭代法 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public TreeNode sortedArrayToBST(int[] nums) &#123; if(nums.length == 0) &#123; return null; &#125; Queue&lt;TreeNode&gt; nodeQueue = new LinkedList&lt;&gt;(); Queue&lt;Integer&gt; leftQueue = new LinkedList&lt;&gt;(); Queue&lt;Integer&gt; rightQueue = new LinkedList&lt;&gt;(); TreeNode root = new TreeNode(0); nodeQueue.offer(root); leftQueue.offer(0); rightQueue.offer(nums.length); while(!nodeQueue.isEmpty()) &#123; TreeNode curNode = nodeQueue.poll(); int left = leftQueue.poll(); int right = rightQueue.poll(); int mid = left + (right - left) / 2; // 处理每个元素 curNode.val = nums[mid]; // 左闭右开 区间 任由元素 if(left &lt; mid) &#123; curNode.left = new TreeNode(0); nodeQueue.offer(curNode.left); leftQueue.offer(left); rightQueue.offer(mid); &#125; // 左闭右开 区间 仍有元素 if(right &gt; mid + 1) &#123; curNode.right = new TreeNode(0); nodeQueue.offer(curNode.right); leftQueue.offer(mid + 1); rightQueue.offer(right); &#125; &#125; return root; &#125;&#125; 538. 把二叉搜索树转换为累加树问题给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。 提醒一下，二叉搜索树满足下列约束条件： 节点的左子树仅包含键 小于 节点键的节点。 节点的右子树仅包含键 大于 节点键的节点。 左右子树也必须是二叉搜索树。 示例1： 12输入：[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] 示例2： 12输入：root = [0,null,1]输出：[1,null,1] 示例3： 12输入：root = [1,0,2]输出：[3,3,2] 示例4： 12输入：root = [3,2,4,1]输出：[7,9,4,10] 提示： 树中的节点数介于 0 和 104 之间。 每个节点的值介于 -104 和 104 之间。 树中的所有值 互不相同 。 给定的树为二叉搜索树。 代码 递归法 其实就是反中序遍历，更通俗就是从大到小遍历 12345678910111213141516class Solution &#123; private int sumWeight = 0; public TreeNode convertBST(TreeNode root) &#123; if(root == null) &#123; return null; &#125; recursion(root); return root; &#125; private void recursion(TreeNode node) &#123; if(node.right != null) recursion(node.right); sumWeight += node.val; node.val = sumWeight; if(node.left != null) recursion(node.left); &#125;&#125; 迭代法 1234567891011121314151617181920212223242526class Solution &#123; private int sumWeight = 0; public TreeNode convertBST(TreeNode root) &#123; if(root == null) &#123; return null; &#125; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.empty()) &#123; TreeNode node = stack.peek(); if(node != null) &#123; stack.pop(); if(node.left != null) stack.push(node.left); stack.push(node); stack.push(null); if(node.right != null) stack.push(node.right); &#125; else &#123; stack.pop(); node = stack.pop(); sumWeight += node.val; node.val = sumWeight; &#125; &#125; return root; &#125;&#125; 二叉树总结二叉树遍历方式：前序遍历、中序遍历、后序遍历、层次遍历 二叉树遍历算法：回溯、单队列、多队列、单栈、多栈 二叉树分类：普通二叉树、完全二叉树、二叉搜索树、二叉平衡搜索树、最大树、最小树 性质： 普通二叉树：普通遍历方式 完全二叉树：层次遍历 + 队列 二叉搜索树：中序遍历 + 递归，中序遍历 + 迭代，添加节点，修改节点 二叉平衡搜索树：有序数组 + 递归 构造平衡搜索树 最大树：第 n 个 最大值 最小树：第 n 个 最小值","categories":[{"name":"leetCode算法","slug":"leetCode算法","permalink":"http://fyupeng.github.io/categories/leetCode%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"二叉树","slug":"二叉树","permalink":"http://fyupeng.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"}],"author":"fyupeng"},{"title":"回溯","slug":"回溯","date":"2022-06-25T06:45:06.000Z","updated":"2022-06-25T06:55:47.792Z","comments":true,"path":"2022/06/25/回溯/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/%E5%9B%9E%E6%BA%AF/","excerpt":"","text":"1. 22. 括号生成问题数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 示例1： 12输入：n = 3输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;] 示例2： 12输入：n = 1输出：[&quot;()&quot;] 提示： 1 &lt;= n &lt;= 8 代码12345678910111213141516171819202122class Solution &#123; public List&lt;String&gt; generateParenthesis(int n) &#123; List&lt;String&gt; result = new ArrayList&lt;&gt;(); backtracking(n, result, 0, 0, &quot;&quot;); return result; &#125; private static void backtracking(int n, List&lt;String&gt; result, int left, int right, String str) &#123; if(right &gt; left) &#123; return; &#125; if(left == right &amp;&amp; right == n) &#123; result.add(str); return; &#125; if(left &lt; n) &#123; backtracking(n, result, left + 1, right, str + &quot;(&quot;); &#125; if(right &lt; left) &#123; backtracking(n, result, left, right + 1, str + &quot;)&quot;); &#125; &#125;&#125; 2. 77. 组合问题给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。 你可以按 任何顺序 返回答案。 示例1： 12345678910输入：n = 4, k = 2输出：[ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4],] 示例2： 12输入：n = 1, k = 1输出：[[1]] 提示： 1 &lt;= n &lt;= 20 1 &lt;= k &lt;= n 代码12345678910111213141516171819202122class Solution &#123; private List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;(); private List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) &#123; backtracking(n, k, 1); return result; &#125; private void backtracking(int n, int k, int startIndex) &#123; // 终止条件 if(path.size() == k) &#123; result.add(new ArrayList&lt;&gt;(path)); return; &#125; for(int i = startIndex; i &lt;= n; i++) &#123; path.add(i); backtracking(n, k, i + 1); // 遍历 下一个 纵向 元素 path.remove(path.size() - 1); // 遍历下一个 横向 元素(言外之意就是纵向元素已经遍历完回溯了，需要移除) &#125; &#125;&#125; 剪枝优化搜索起点的上界 + 接下来要选择的元素个数 - 1 = n其中，接下来要选择的元素个数 = k - path.size()，整理得到： 搜索起点的上界 = n - (k - path.size()) + 1所以，我们的剪枝过程就是：把 i &lt;= n 改成 i &lt;= n - (k - path.size()) + 1 ： 12345for(int i = startIndex; i &lt;= n - (k - path.size()) + 1; i++) &#123; path.add(i); backtracking(n, k, i + 1); // 遍历 下一个 纵向 元素 path.remove(path.size() - 1); // 遍历下一个 横向 元素 &#125; 3. 216. 组合总和 III问题找出所有相加之和为 n 的 k 个数的组合，且满足下列条件： 只使用数字1到9每个数字 最多使用一次返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。 示例1： 12345输入: k = 3, n = 7输出: [[1,2,4]]解释:1 + 2 + 4 = 7没有其他符合的组合了。 示例2： 1234567输入: k = 3, n = 9输出: [[1,2,6], [1,3,5], [2,3,4]]解释:1 + 2 + 6 = 91 + 3 + 5 = 92 + 3 + 4 = 9没有其他符合的组合了。 示例3： 1234输入: k = 4, n = 1输出: []解释: 不存在有效的组合。在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。 ​ 提示: 2 &lt;= k &lt;= 9 1 &lt;= n &lt;= 60 代码123456789101112131415161718192021222324class Solution &#123; private List&lt;Integer&gt; path = new ArrayList&lt;&gt;(); private List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;(); public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) &#123; backtracking(k, n, 1, 0); return result; &#125; private void backtracking(int k, int n, int startIndex, int sum) &#123; if(path.size() == k) &#123; if(sum == n) &#123; result.add(new ArrayList&lt;&gt;(path)); return; &#125; &#125; for(int i = startIndex; i &lt;= 9; i++) &#123; sum += i; path.add(i); backtracking(k, n, i + 1, sum); sum -= i; path.remove(path.size() - 1); &#125; &#125;&#125; 剪枝优化：123456789if(sum &gt; n) &#123; return;&#125;if(path.size() == k) &#123; if(sum == n) &#123; result.add(new ArrayList&lt;&gt;(path)); return; &#125;&#125; 4. 17. 电话号码的字母组合问题给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。 示例1： 12输入：digits = &quot;23&quot;输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;] 示例2： 12输入：digits = &quot;&quot;输出：[] 示例3： 12输入：digits = &quot;2&quot;输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] 提示： 0 &lt;= digits.length &lt;= 4 digits[i] 是范围 [&#39;2&#39;, &#39;9&#39;] 的一个数字。 代码123456789101112131415161718192021222324252627282930313233343536class Solution &#123; private final String[] letterMap = &#123; &quot;&quot;, // 0 &quot;&quot;, // 1 &quot;abc&quot;, // 2 &quot;def&quot;, // 3 &quot;ghi&quot;, // 4 &quot;jkl&quot;, // 5 &quot;mno&quot;, // 6 &quot;pqrs&quot;, // 7 &quot;tuv&quot;, // 8 &quot;wxyz&quot; // 9 &#125;; private List&lt;String&gt; result = new ArrayList&lt;&gt;(); public List&lt;String&gt; letterCombinations(String digits) &#123; if(&quot;&quot;.equals(digits)) &#123; return result; &#125; backtracking(digits, 0, new StringBuilder()); return result; &#125; private void backtracking(String digits, int index, StringBuilder subString) &#123; if(index == digits.length()) &#123; result.add(subString.toString()); return; &#125; int digit = digits.charAt(index) - &#x27;0&#x27;; String letters = letterMap[digit]; for(int i = 0; i &lt; letters.length(); i++) &#123; subString.append(letters.charAt(i)); backtracking(digits, index + 1, subString); subString.delete(subString.length() - 1, subString.length()); &#125; &#125;&#125; 5. 39. 组合总和 树枝剪枝或for循环剪枝问题给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。 candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 对于给定的输入，保证和为 target 的不同组合数少于 150 个。 示例1： 123456输入：candidates = [2,3,6,7], target = 7输出：[[2,2,3],[7]]解释：2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。7 也是一个候选， 7 = 7 。仅有这两种组合。 示例2： 12输入: candidates = [2,3,5], target = 8输出: [[2,2,2,2],[2,3,3],[3,5]] 示例3： 12输入: candidates = [2], target = 1输出: [] 代码12345678910111213141516171819202122232425class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) &#123; List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;(); Arrays.sort(candiates); backtracking(result, new ArrayList&lt;&gt;(), candidates, target, 0, 0); return result; &#125; private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int[] candidates, int target, int startIndex, int sum) &#123; if(sum &gt; target) &#123; return; &#125; if(sum == target) &#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; for(int i = startIndex; i &lt; candidates.length; i++) &#123; sum += candidates[i]; path.add(candidates[i]); backtracking(res, path, candidates, target, i, sum); sum -= candidates[i]; path.remove(path.size() - 1); &#125; &#125;&#125; 剪枝优化12345678910111213/*if(sum &gt; target) &#123; return;&#125;*/for(int i = startIndex; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123; sum += candidates[i]; path.add(candidates[i]); backtracking(res, path, candidates, target, i, sum); sum -= candidates[i]; path.remove(path.size() - 1);&#125; 6. 40. 组合总和 II 排序树层去重问题给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。 candidates 中的每个数字在每个组合中只能使用 一次 。 注意：解集不能包含重复的组合。 示例1： 12345678输入: candidates = [10,1,2,7,6,1,5], target = 8,输出:[[1,1,6],[1,2,5],[1,7],[2,6]] 示例2： 123456输入: candidates = [2,5,2,1,2], target = 5,输出:[[1,2,2],[5]] 代码12345678910111213141516171819202122232425262728class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); Arrays.sort(candidates); backtracking(candidates, target, res, new ArrayList&lt;Integer&gt;(), 0, new boolean[candidates.length], 0); return res; &#125; private void backtracking(int[] candidates, int target, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int startIndex, boolean[] used, int sum) &#123; if(sum &gt; target) &#123; return; &#125; if(sum == target) &#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; for(int i = startIndex; i &lt; candidates.length; i++) &#123; if(i &gt; 0 &amp;&amp; candidates[i] == candidates[i - 1] &amp;&amp; used[i - 1] == false) &#123; continue; &#125; path.add(candidates[i]); used[i] = true; backtracking(candidates, target, res, path, i + 1, used, sum + candidates[i]); path.remove(path.size() - 1); used[i] = false; &#125; &#125;&#125; 剪枝优化12345678/*if(sum &gt; target) &#123; return;&#125;*/for(int i = startIndex; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123; &#125; 另一种代码使用 i &gt; startIndex 巧妙 设计 成 深度 可重复 数字， 横向 不允许 重复数字 1234567891011121314151617181920212223class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); Arrays.sort(candidates); backtracking(candidates, target, res, new ArrayList&lt;Integer&gt;(), 0, 0); return res; &#125; private void backtracking(int[] candidates, int target, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int startIndex, int sum) &#123; if(sum == target) &#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; for(int i = startIndex; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123; if(i &gt; startIndex &amp;&amp; candidates[i] == candidates[i - 1]) &#123; continue; &#125; path.add(candidates[i]); backtracking(candidates, target, res, path, i + 1, sum + candidates[i]); path.remove(path.size() - 1); &#125; &#125;&#125; 7. 131. 分割回文串 判断剪枝问题给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。 回文串 是正着读和反着读都一样的字符串。 示例1： 12输入：s = &quot;aab&quot;输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]] 示例2： 12输入：s = &quot;a&quot;输出：[[&quot;a&quot;]] 提示： 1 &lt;= s.length &lt;= 16 s 仅由小写英文字母组成 代码12345678910111213141516171819202122232425262728293031323334class Solution &#123; public List&lt;List&lt;String&gt;&gt; partition(String s) &#123; List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new ArrayList&lt;String&gt;(), s, 0); return res; &#125; private void backtracking(List&lt;List&lt;String&gt;&gt; res, List&lt;String&gt; path, String s, int startIndex) &#123; if(startIndex == s.length()) &#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; for(int i = startIndex; i &lt; s.length(); i++) &#123; if(isPartition(s, startIndex, i)) &#123; String substring = s.substring(startIndex, i + 1); path.add(substring); &#125; else &#123; continue; &#125; backtracking(res, path, s, i + 1); path.remove(path.size() - 1); &#125; &#125; private boolean isPartition(String s, int start, int end) &#123; for(int i = start,j = end; i &lt; j; i++, j--) &#123; if(s.charAt(i) != s.charAt(j)) &#123; return false; &#125; &#125; return true; &#125;&#125; 8. 93. 复原 IP 地址 for循环和判断剪枝问题有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。 例如：”0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、”192.168.1.312” 和 “&#x31;&#57;&#50;&#46;&#49;&#54;&#56;&#x40;&#x31;&#46;&#49;“ 是 无效 IP 地址。给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。 示例1： 12输入：s = &quot;25525511135&quot;输出：[&quot;255.255.11.135&quot;,&quot;255.255.111.35&quot;] 示例2： 12输入：s = &quot;0000&quot;输出：[&quot;0.0.0.0&quot;] 示例3： 12输入：s = &quot;101023&quot;输出：[&quot;1.0.10.23&quot;,&quot;1.0.102.3&quot;,&quot;10.1.0.23&quot;,&quot;10.10.2.3&quot;,&quot;101.0.2.3&quot;] 代码1234567891011121314151617181920212223242526272829303132class Solution &#123; public List&lt;String&gt; restoreIpAddresses(String s) &#123; List&lt;String&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new StringBuilder(), s, 0, 0); return res; &#125; private void backtracking(List&lt;String&gt; res, StringBuilder substring, String s, int startIndex, int pointCount) &#123; if(startIndex == s.length() &amp;&amp; pointCount == 4) &#123; String withPointString = substring.toString(); res.add(withPointString.substring(0, withPointString.length() - 1)); return; &#125; // 直接 在 for 循环 剪枝 长度 大于 3 或者 点数 大于等于 4 位的（等于4 位 已经在 前面 判断了） for(int i = startIndex; i &lt; s.length() &amp;&amp; pointCount &lt; 4 &amp;&amp; i - startIndex &lt; 3; i++) &#123; if((i &gt; startIndex &amp;&amp; s.charAt(startIndex) == &#x27;0&#x27;)) &#123; continue; &#125; String str = s.substring(startIndex, i + 1); if(Integer.parseInt(str) &gt;= 0 &amp;&amp; Integer.parseInt(str) &lt;= 255) &#123; substring.append(str).append(&quot;.&quot;); &#125; else &#123; continue; &#125; backtracking(res, substring, s, i + 1, pointCount + 1); substring.deleteCharAt(substring.lastIndexOf(&quot;.&quot;)); substring.delete(substring.lastIndexOf(&quot;.&quot;) + 1, substring.length()); &#125; &#125;&#125; 9. 78. 子集 不剪枝问题给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。 示例1： 12输入：nums = [1,2,3]输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] 示例2： 12输入：nums = [0]输出：[[],[0]] 提示： 1 &lt;= nums.length &lt;= 10 -10 &lt;= nums[i] &lt;= 10 nums 中的所有元素 互不相同 代码12345678910111213141516171819class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new ArrayList&lt;Integer&gt;(), nums, 0); return res; &#125; private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path ,int[] nums, int startIndex) &#123; res.add(new ArrayList&lt;&gt;(path)); if(startIndex == nums.length) &#123; return; &#125; for(int i = startIndex; i &lt; nums.length; i++) &#123; path.add(nums[i]); backtracking(res, path, nums, i + 1); path.remove(path.size() - 1); &#125; &#125;&#125; 模板1234result.push_back(path); // 收集子集，要放在终止添加的上面，否则会漏掉自己if (startIndex &gt;= nums.size()) &#123; // 终止条件可以不加 return;&#125; 10. 90. 子集 II 排序树层去重问题给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。 解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。 示例1： 12输入：nums = [1,2,2]输出：[[],[1],[1,2],[1,2,2],[2],[2,2]] 示例2： 12输入：nums = [0]输出：[[],[0]] 提示 1 &lt;= nums.length &lt;= 10 -10 &lt;= nums[i] &lt;= 10 代码123456789101112131415161718192021222324class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) &#123; Arrays.sort(nums); List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new ArrayList&lt;Integer&gt;(), nums, 0); return res; &#125; private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int[] nums, int startIndex) &#123; res.add(new ArrayList&lt;&gt;(path)); if(startIndex == nums.length) &#123; return; &#125; for(int i = startIndex; i &lt; nums.length; i++) &#123; // 去重 条件 只对 广度 有效，也就是 对不同 子集去重 if(i &gt; startIndex &amp;&amp; nums[i] == nums[i - 1]) &#123; continue; &#125; path.add(nums[i]); backtracking(res, path, nums, i + 1); path.remove(path.size() - 1); &#125; &#125;&#125; 11. 491. 递增子序列 非排序树层去重问题给你一个整数数组 nums ，找出并返回所有该数组中不同的递增子序列，递增子序列中 至少有两个元素 。你可以按 任意顺序 返回答案。 数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。 示例1： 12输入：nums = [4,6,7,7]输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]] 示例2： 12输入：nums = [4,4,3,2,1]输出：[[4,4]] 提示 1 &lt;= nums.length &lt;= 15 -100 &lt;= nums[i] &lt;= 100 代码1234567891011121314151617181920212223242526class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; findSubsequences(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new ArrayList&lt;Integer&gt;(), nums, 0); return res; &#125; private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int[] nums, int startIndex) &#123; if (path.size() &gt; 1) &#123; res.add(new ArrayList&lt;&gt;(path)); // 注意这里不要加return，要取树上所有的节点 &#125; // 生命周期 存活在 递归函数中，所以对 同一层有效 Set&lt;Integer&gt; uset = new HashSet&lt;&gt;(); for(int i = startIndex; i &lt; nums.length; i++) &#123; // 当 path 有值 时，判断 当前 i 所在下标的 值 是否 小于 path 有序列表最后 一个元素 或者 同一层出现 重复元素 if(path.size() &gt; 0 &amp;&amp; nums[i] &lt; path.get(path.size() - 1) || !uset.add(nums[i])) &#123; continue; &#125; //uset.add(nums[i]); path.add(nums[i]); backtracking(res, path, nums, i + 1); path.remove(path.size() - 1); &#125; &#125;&#125; 12. 46. 全排列 树枝去重问题给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 示例1： 12输入：nums = [1,2,3]输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] 示例2： 12输入：nums = [0,1]输出：[[0,1],[1,0]] 示例3： 12输入：nums = [1]输出：[[1]] 提示： 1 &lt;= nums.length &lt;= 6 -10 &lt;= nums[i] &lt;= 10 nums 中的所有整数 互不相同 代码123456789101112131415161718192021222324class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new ArrayList&lt;Integer&gt;(), nums, new boolean[nums.length]); return res; &#125; private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int[] nums, boolean[] used) &#123; // 全排列，每个元素只能用一次并且全部要用到 if(path.size() == nums.length) &#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; for(int i = 0; i &lt; nums.length; i++) &#123; // 递归（纵向遍历）不能出现重复，一个元素只能用一次 if(used[i]) continue; path.add(nums[i]); used[i] = true; backtracking(res, path, nums, used); path.remove(path.size() - 1); used[i] = false; &#125; &#125;&#125; 13. 47. 全排列 II 树枝和树层去重问题给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。 示例1： 12345输入：nums = [1,1,2]输出：[[1,1,2], [1,2,1], [2,1,1]] 示例2： 12输入：nums = [1,2,3]输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] 提示： 1 &lt;= nums.length &lt;= 8 -10 &lt;= nums[i] &lt;= 10 代码1234567891011121314151617181920212223242526class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123; List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(); backtracking(res, new ArrayList&lt;Integer&gt;(), nums, new boolean[nums.length]); return res; &#125; private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path, int[] nums, boolean[] used) &#123; if(path.size() == nums.length) &#123; res.add(new ArrayList&lt;&gt;(path)); return; &#125; Set&lt;Integer&gt; uset = new HashSet&lt;&gt;(); for(int i = 0; i &lt; nums.length; i++) &#123; // 纵向 遍历 同一个下标元素 重复，跳过 // 否则 横向 遍历 到 重复元素(不同下标)，跳过 if(used[i] || !uset.add(nums[i])) continue; path.add(nums[i]); used[i] = true; backtracking(res, path, nums, used); path.remove(path.size() - 1); used[i] = false; &#125; &#125;&#125; 14. 404. 左叶子之和问题给定二叉树的根节点 root ，返回所有左叶子之和。 示例1： 123输入: root = [3,9,20,null,null,15,7] 输出: 24 解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24 示例2： 12输入: root = [1]输出: 0 提示: 节点数在 [1, 1000] 范围内 -1000 &lt;= Node.val &lt;= 1000 代码 后序遍历递归法 1234567891011121314151617181920// 后序遍历递归class Solution &#123; public int sumOfLeftLeaves(TreeNode root) &#123; if(root == null) &#123; return 0; &#125; return sumRecurision(root); &#125; private int sumRecurision(TreeNode node) &#123; // 终止条件，叶子节点或空节点 if(node == null || node.left == null &amp;&amp; node.right == null) return 0; int sumLeft = sumRecurision(node.left); int sumRight = sumRecurision(node.right); // 存在节点 的左叶子节点 if(node.left != null &amp;&amp; node.left.left == null &amp;&amp; node.left.right == null) &#123; return node.left.val + sumLeft + sumRight; &#125; return sumLeft + sumRight; &#125;&#125; 前序迭代法 12345678910111213141516171819class Solution &#123; public int sumOfLeftLeaves(TreeNode root) &#123; if(root == null) &#123; return 0; &#125; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); int sum = 0; while(!stack.empty()) &#123; TreeNode node = stack.pop(); if(node.left != null &amp;&amp; node.left.left == null &amp;&amp; node.left.right == null) &#123; sum += node.left.val; &#125; if(node.left != null) stack.push(node.left); if(node.right != null) stack.push(node.right); &#125; return sum; &#125;&#125; 15. 513. 找树左下角的值问题给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。 假设二叉树中至少有一个节点。 示例1： 12输入: root = [2,1,3]输出: 1 示例2： 12输入: [1,2,3,4,null,5,6,null,null,7]输出: 7 提示: 二叉树的节点个数的范围是 [1,104] -231 &lt;= Node.val &lt;= 231 - 1 代码 类层序遍历迭代法 1234567891011121314151617class Solution &#123; public int findBottomLeftValue(TreeNode root) &#123; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.offer(root); TreeNode res = root; while(!queue.isEmpty()) &#123; TreeNode node = queue.poll(); if(node == null) &#123; continue; &#125; res = node; queue.offer(node.right); queue.offer(node.left); &#125; return res.val; &#125;&#125; 前序遍历递归法 123456789101112131415161718192021class Solution &#123; TreeNode res = null; int max = 0; public int findBottomLeftValue(TreeNode root) &#123; res = root; // 因为 这里已经说了,根节点 不为空了 reversivion(root, 1); return res.val; &#125; private void reversivion(TreeNode node, int depth) &#123; if(node == null) &#123; return; &#125; if(node != null &amp;&amp; max &lt; depth) &#123; max = depth; res = node; &#125; reversivion(node.left, depth + 1); reversivion(node.right, depth + 1); &#125;&#125;","categories":[{"name":"leetCode算法","slug":"leetCode算法","permalink":"http://fyupeng.github.io/categories/leetCode%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"回溯","slug":"回溯","permalink":"http://fyupeng.github.io/tags/%E5%9B%9E%E6%BA%AF/"}],"author":"fyupeng"},{"title":"链表","slug":"链表","date":"2022-06-25T06:44:53.000Z","updated":"2022-06-25T06:58:27.847Z","comments":true,"path":"2022/06/25/链表/","link":"","permalink":"http://fyupeng.github.io/2022/06/25/%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1.翻转链表剑指 Offer II 024. 反转链表 给定单链表的头节点 head ，请反转链表，并返回反转后的链表的头节点。 示例1： 12输入：head = [1,2,3,4,5]输出：[5,4,3,2,1] 示例2： 12输入：head = [1,2]输出：[2,1] 示例3： 12输入：head = []输出：[] 提示： 链表中节点的数目范围是 [0, 5000] -5000 &lt;= Node.val &lt;= 5000 1.1 递归1234567891011121314151617181920212223class Solution &#123; public ListNode reverseList(ListNode head) &#123; return reverse(head); &#125; private ListNode reverse(ListNode head) &#123; // 判断 头结点临界 if(head == null) &#123; return head; &#125; // 判断 尾结点临界 if(head.next == null) &#123; return head; &#125; ListNode last = reverse(head.next); // 翻转头结点 与 下一个节点的 next 指向 head.next.next = head; // 置 头结点 的 next 为 null head.next = null; // 返回 最后 一个节点 return last; &#125;&#125; 1.2 双指针123456789101112131415161718192021class Solution &#123; public ListNode reverseList(ListNode head) &#123; // cur 的 前一个 节点 ListNode prev = null; // 当前节点 ListNode cur = head; // 保存 临时节点 ListNode temp = null; while(cur != null) &#123; // 保存 cur 的下一个节点 temp = cur.next; // 翻转 cur 与 prev 节点的 next指向 cur.next = prev; // prev 总是 cur 的前一个节点 prev = cur; // cur 向前 移动 1位 cur = temp; &#125; return prev; &#125;&#125; 2. 两两交换给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 示例1： 12输入：head = [1,2,3,4]输出：[2,1,4,3] 示例2： 12输入：head = []输出：[] 示例3： 12输入：head = [1]输出：[1] 提示： 链表中节点的数目在范围 [0, 100] 内 0 &lt;= Node.val &lt;= 100 2.1 递归12345678910111213141516class Solution &#123; public ListNode swapPairs(ListNode head) &#123; // 处理 头结点 和 尾结点 边界 if(head == null || head.next == null) &#123; return head; &#125; ListNode next = head.next; // 递归 拿到 已经 两两 交换好了的 next的 下一个节点 ListNode newSwapNode = swapPairs(next.next); // 交换 head 与 next 节点 的指针指向 next.next = head; // head 节点 指向 next 往后 已经 两两交换 好的 节点 head.next = newSwapNode; return next; &#125;&#125; 2.2 虚拟头结点123456789101112131415161718192021222324class Solution &#123; public ListNode swapPairs(ListNode head) &#123; // 哑元节点 ListNode dumpNode = new ListNode(0); dumpNode.next = head; // 初始化 前节点 为 哑元 节点 ListNode prev = dumpNode; // 准备 两个要 交换的 节点 且保证 不能为 空 while(head != null &amp;&amp; head.next != null) &#123; // 保存 next 的节点 的 后一个 节点 // head 与 next 交换后 会让 前面和后面的 节点 丢失 ListNode temp = head.next.next; prev.next = head.next; // 交换 两 节点 并 让 头结点 与 后面节点 连接 head.next.next = head; head.next = temp; // 自变量 自增 prev = head; head = head.next; &#125; // 返回 哑元节点 的 后一个节点 即 head 节点 return dumpNode.next; &#125;&#125; 3. 删除倒数第n节点19. 删除链表的倒数第 N 个结点 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 示例 1： 12输入：head = [1,2,3,4,5], n = 2输出：[1,2,3,5] 示例 2： 12输入：head = [1], n = 1输出：[] 示例 3： 12输入：head = [1,2], n = 1输出：[1] 3.1 数学123456789101112131415161718192021222324252627class Solution &#123; public ListNode removeNthFromEnd(ListNode head, int n) &#123; int length = getLenth(head); // 设置 哑元 节点 ListNode dummyNode = new ListNode(0); dummyNode.next = head; // 倒数 第 n 个 即 顺数 第 length - (n - 1) 个 // 找到第 length - (n - 1) - 1个, 删除 它的 下一个节点 int num = length - (n - 1) - 1; ListNode prev = dummyNode; while(num &gt; 0) &#123; prev = prev.next; num -= 1; &#125; prev.next = prev.next.next; return dummyNode.next; &#125; private int getLenth(ListNode head) &#123; ListNode p = head; int length = 0; while(p != null) &#123; length++; p = p.next; &#125; return length; &#125;&#125; 3.2 双指针1234567891011121314151617181920212223class Solution &#123; public ListNode removeNthFromEnd(ListNode head, int n) &#123; ListNode dummyNode = new ListNode(0); dummyNode.next = head; ListNode fast = dummyNode; ListNode slow = dummyNode; // 循环 n - 1次，让 fast 比 slow 先 n - 1 个节点 while(n &gt; 1) &#123; fast = fast.next; n--; &#125; ListNode prev = null; while(fast != null &amp;&amp; fast.next != null) &#123; prev = slow; fast = fast.next; slow = slow.next; &#125; prev.next = slow.next; slow.next = null; return dummyNode.next; &#125;&#125; 4. 链表相交面试题 02.07. 链表相交 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。 题目数据 保证 整个链式结构中不存在环。 注意，函数返回结果后，链表必须 保持其原始结构 。 示例1： 12345输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出：Intersected at &#x27;8&#x27;解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 示例2： 12345输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1输出：Intersected at &#x27;2&#x27;解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例3： 12345输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2输出：null解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。这两个链表不相交，因此返回 null 。 提示： listA 中节点数目为 mlistB 中节点数目为 n0 &lt;= m, n &lt;= 3 * 1041 &lt;= Node.val &lt;= 1050 &lt;= skipA &lt;= m0 &lt;= skipB &lt;= n如果 listA 和 listB 没有交点，intersectVal 为 0如果 listA 和 listB 有交点，intersectVal == listA[skipA + 1] == listB[skipB + 1] 4.1 指针123456789101112131415161718192021222324252627282930313233343536373839404142434445public class Solution &#123; public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123; // 定义 链表 A 和 B的长度 int lenA = getLength(headA); int lenB = getLength(headB); // 两表长度 之差 int dfLenAB = lenA - lenB; // 记录 当前 节点位置 ListNode curA = headA; ListNode curB = headB; // A 长 B，让 较长的 遍历 直到 当前位置 到 尾结点 之间距离相同 if(dfLenAB &gt;= 0) &#123; while(dfLenAB &gt; 0) &#123; curA = curA.next; dfLenAB--; &#125; &#125; else &#123; dfLenAB = -dfLenAB; while(dfLenAB &gt; 0) &#123; curB = curB.next; dfLenAB--; &#125; &#125; // 同步 遍历，找到 一个 相同的节点 while(curA != null) &#123; if(curA == curB) &#123; return curA; &#125; curA = curA.next; curB = curB.next; &#125; // 找不到 返回 null return null; &#125; private int getLength(ListNode head) &#123; ListNode p = head; int length = 0; while(p != null) &#123; length++; p = p.next; &#125; return length; &#125;&#125; 5. 环形链表141. 环形链表 给你一个链表的头节点 head ，判断链表中是否有环。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。 如果链表中存在环 ，则返回 true 。 否则，返回 false 。 示例1： 123输入：head = [3,2,0,-4], pos = 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。 示例2： 123输入：head = [1,2], pos = 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。 示例3： 123输入：head = [1], pos = -1输出：false解释：链表中没有环。 提示： 链表中节点的数目范围是 [0, 104] -105 &lt;= Node.val &lt;= 105 pos 为 -1 或者链表中的一个 有效索引 。 5.1 快慢指针1234567891011121314151617public class Solution &#123; public boolean hasCycle(ListNode head) &#123; if(head == null) &#123; return false; &#125; ListNode fast = head.next; ListNode slow = head; while(fast != null &amp;&amp; fast.next != null) &#123; fast = fast.next.next; slow = slow.next; if(fast == slow) &#123; return true; &#125; &#125; return false; &#125;&#125;","categories":[{"name":"leetCode算法","slug":"leetCode算法","permalink":"http://fyupeng.github.io/categories/leetCode%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"链表","slug":"链表","permalink":"http://fyupeng.github.io/tags/%E9%93%BE%E8%A1%A8/"}],"author":"fyupeng"}],"categories":[{"name":"Java框架","slug":"Java框架","permalink":"http://fyupeng.github.io/categories/Java%E6%A1%86%E6%9E%B6/"},{"name":"leetCode算法","slug":"leetCode算法","permalink":"http://fyupeng.github.io/categories/leetCode%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"netty","slug":"netty","permalink":"http://fyupeng.github.io/tags/netty/"},{"name":"二分查找","slug":"二分查找","permalink":"http://fyupeng.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"},{"name":"二叉树","slug":"二叉树","permalink":"http://fyupeng.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"回溯","slug":"回溯","permalink":"http://fyupeng.github.io/tags/%E5%9B%9E%E6%BA%AF/"},{"name":"链表","slug":"链表","permalink":"http://fyupeng.github.io/tags/%E9%93%BE%E8%A1%A8/"}]}