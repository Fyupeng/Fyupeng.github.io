{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://fyupeng.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-06-24T18:09:11.552Z","updated":"2022-06-24T18:09:11.552Z","comments":false,"path":"/404.html","permalink":"http://fyupeng.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-06-24T18:09:11.558Z","updated":"2022-06-24T18:09:11.558Z","comments":false,"path":"about/index.html","permalink":"http://fyupeng.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2022-06-24T18:09:11.561Z","updated":"2022-06-24T18:09:11.561Z","comments":false,"path":"categories/index.html","permalink":"http://fyupeng.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-06-24T18:09:11.559Z","updated":"2022-06-24T18:09:11.559Z","comments":false,"path":"books/index.html","permalink":"http://fyupeng.github.io/books/index.html","excerpt":"","text":""},{"title":"","date":"2022-06-24T17:19:04.497Z","updated":"2022-06-24T17:19:04.497Z","comments":true,"path":"fonts/README.html","permalink":"http://fyupeng.github.io/fonts/README.html","excerpt":"","text":"Font AssetsIf you are providing web font files, this is the place to put them. The fonts task will copy them over to the destination specified in config.json, and file names will be reved in production builds (if enabled). If you don’t plan using web fonts, or are relying on an external service like Google Fonts, feel free to delete this folder and the tasks.fonts config in gulpfile.js/config.json. Tasks and Files1gulpfile.js/tasks/fonts All this task does is copy fonts from ./src/fonts to ./public/fonts. A sass +font-face mixin is included in ./src/stylesheets/base/mixins."},{"title":"","date":"2022-06-24T17:19:04.494Z","updated":"2022-06-24T17:19:04.494Z","comments":true,"path":"css/style.css","permalink":"http://fyupeng.github.io/css/style.css","excerpt":"","text":"@charset \"UTF-8\"; /** * global variables and mixins */ /** * font family */ /** * */ /* Mixins */ /** * bootstrap */ /*! * Bootstrap v3.3.7 (http://getbootstrap.com) * Copyright 2011-2016 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */ /*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */ html { font-family: sans-serif; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; } body { margin: 0; } article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary { display: block; } audio, canvas, progress, video { display: inline-block; vertical-align: baseline; } audio:not([controls]) { display: none; height: 0; } [hidden], template { display: none; } a { background-color: transparent; } a:active, a:hover { outline: 0; } abbr[title] { border-bottom: 1px dotted; } b, strong { font-weight: bold; } dfn { font-style: italic; } h1 { font-size: 2em; margin: 0.67em 0; } mark { background: #ff0; color: #000; } small { font-size: 80%; } sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; } sup { top: -0.5em; } sub { bottom: -0.25em; } img { border: 0; } svg:not(:root) { overflow: hidden; } figure { margin: 1em 40px; } hr { -webkit-box-sizing: content-box; box-sizing: content-box; height: 0; } pre { overflow: auto; } code, kbd, pre, samp { font-family: monospace,monospace; font-size: 1em; } button, input, optgroup, select, textarea { color: inherit; font: inherit; margin: 0; } button { overflow: visible; } button, select { text-transform: none; } button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] { -webkit-appearance: button; cursor: pointer; } button[disabled], html input[disabled] { cursor: default; } button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; } input { line-height: normal; } input[type=\"checkbox\"], input[type=\"radio\"] { -webkit-box-sizing: border-box; box-sizing: border-box; padding: 0; } input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button { height: auto; } input[type=\"search\"] { -webkit-appearance: textfield; -webkit-box-sizing: content-box; box-sizing: content-box; } input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration { -webkit-appearance: none; } fieldset { border: 1px solid #c0c0c0; margin: 0 2px; padding: 0.35em 0.625em 0.75em; } legend { border: 0; padding: 0; } textarea { overflow: auto; } optgroup { font-weight: bold; } table { border-collapse: collapse; border-spacing: 0; } td, th { padding: 0; } /*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */ * { -webkit-box-sizing: border-box; box-sizing: border-box; } *:before, *:after { -webkit-box-sizing: border-box; box-sizing: border-box; } html { font-size: 10px; -webkit-tap-highlight-color: transparent; } input, button, select, textarea { font-family: inherit; font-size: inherit; line-height: inherit; } a { color: #2196f3; text-decoration: none; } a:hover, a:focus { color: #0a6ebd; text-decoration: underline; } a:focus { outline: 5px auto -webkit-focus-ring-color; outline-offset: -2px; } figure { margin: 0; } img { vertical-align: middle; } .img-responsive { display: block; max-width: 100%; height: auto; } .img-rounded { border-radius: 6px; } .img-thumbnail { padding: 4px; line-height: 1.57143; background-color: #fff; border: 1px solid #ddd; border-radius: 4px; -webkit-transition: all 0.2s ease-in-out; transition: all 0.2s ease-in-out; display: inline-block; max-width: 100%; height: auto; } .img-circle { border-radius: 50%; } hr { margin-top: 21px; margin-bottom: 21px; border: 0; border-top: 1px solid #eeeeee; } .sr-only { position: absolute; width: 1px; height: 1px; margin: -1px; padding: 0; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0; } .sr-only-focusable:active, .sr-only-focusable:focus { position: static; width: auto; height: auto; margin: 0; overflow: visible; clip: auto; } [role=\"button\"] { cursor: pointer; } h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 { font-family: inherit; font-weight: 500; line-height: 1.1; color: inherit; } h1 small, h1 .small, h2 small, h2 .small, h3 small, h3 .small, h4 small, h4 .small, h5 small, h5 .small, h6 small, h6 .small, .h1 small, .h1 .small, .h2 small, .h2 .small, .h3 small, .h3 .small, .h4 small, .h4 .small, .h5 small, .h5 .small, .h6 small, .h6 .small { font-weight: normal; line-height: 1; color: #777777; } h1, .h1, h2, .h2, h3, .h3 { margin-top: 21px; margin-bottom: 10.5px; } h1 small, h1 .small, .h1 small, .h1 .small, h2 small, h2 .small, .h2 small, .h2 .small, h3 small, h3 .small, .h3 small, .h3 .small { font-size: 65%; } h4, .h4, h5, .h5, h6, .h6 { margin-top: 10.5px; margin-bottom: 10.5px; } h4 small, h4 .small, .h4 small, .h4 .small, h5 small, h5 .small, .h5 small, .h5 .small, h6 small, h6 .small, .h6 small, .h6 .small { font-size: 75%; } h1, .h1 { font-size: 30px; } h2, .h2 { font-size: 26px; } h3, .h3 { font-size: 22px; } h4, .h4 { font-size: 18px; } h5, .h5 { font-size: 14px; } h6, .h6 { font-size: 12px; } p { margin: 0 0 10.5px; } .lead { margin-bottom: 21px; font-size: 16px; font-weight: 300; line-height: 1.4; } small, .small { font-size: 85%; } mark, .mark { background-color: #fcf8e3; padding: .2em; } .text-left { text-align: left; } .text-right { text-align: right; } .text-center { text-align: center; } .text-justify { text-align: justify; } .text-nowrap { white-space: nowrap; } .text-lowercase { text-transform: lowercase; } .text-uppercase, .initialism { text-transform: uppercase; } .text-capitalize { text-transform: capitalize; } .text-muted { color: #777777 !important; } .text-primary { color: #2196f3; } a.text-primary:hover, a.text-primary:focus { color: #0c7cd5; } .text-success { color: #3c763d; } a.text-success:hover, a.text-success:focus { color: #2b542c; } .text-info { color: #31708f; } a.text-info:hover, a.text-info:focus { color: #245269; } .text-warning { color: #8a6d3b; } a.text-warning:hover, a.text-warning:focus { color: #66512c; } .text-danger { color: #a94442; } a.text-danger:hover, a.text-danger:focus { color: #843534; } .bg-primary { color: #fff; } .bg-primary { background-color: #2196f3; } a.bg-primary:hover, a.bg-primary:focus { background-color: #0c7cd5; } .bg-success { background-color: #dff0d8; } a.bg-success:hover, a.bg-success:focus { background-color: #c1e2b3; } .bg-info { background-color: #d9edf7; } a.bg-info:hover, a.bg-info:focus { background-color: #afd9ee; } .bg-warning { background-color: #fcf8e3; } a.bg-warning:hover, a.bg-warning:focus { background-color: #f7ecb5; } .bg-danger { background-color: #f2dede; } a.bg-danger:hover, a.bg-danger:focus { background-color: #e4b9b9; } .page-header { padding-bottom: 9.5px; margin: 42px 0 21px; border-bottom: 1px solid #eeeeee; } ul, ol { margin-top: 0; margin-bottom: 10.5px; } ul ul, ul ol, ol ul, ol ol { margin-bottom: 0; } .list-unstyled { padding-left: 0; list-style: none; } .list-inline { padding-left: 0; list-style: none; margin-left: -5px; } .list-inline > li { display: inline-block; padding-left: 5px; padding-right: 5px; } dl { margin-top: 0; margin-bottom: 21px; } dt, dd { line-height: 1.57143; } dt { font-weight: bold; } dd { margin-left: 0; } .dl-horizontal dd:before, .dl-horizontal dd:after { content: \" \"; display: table; } .dl-horizontal dd:after { clear: both; } abbr[title], abbr[data-original-title] { cursor: help; border-bottom: 1px dotted #777777; } .initialism { font-size: 90%; } blockquote { padding: 10.5px 16px; margin: 0 0 21px; border: 1px dotted #eeeeee; border-left: 3px solid #eeeeee; background-color: #fbfbfb; } blockquote p:last-child, blockquote ul:last-child, blockquote ol:last-child { margin-bottom: 0; } blockquote footer, blockquote small, blockquote .small { display: block; font-size: 80%; line-height: 1.57143; color: #777777; } blockquote footer:before, blockquote small:before, blockquote .small:before { content: '\\2014 \\00A0'; } .blockquote-reverse, blockquote.pull-right { padding-right: 15px; padding-left: 0; border-right: 5px solid #eeeeee; border-left: 0; text-align: right; } .blockquote-reverse footer:before, .blockquote-reverse small:before, .blockquote-reverse .small:before, blockquote.pull-right footer:before, blockquote.pull-right small:before, blockquote.pull-right .small:before { content: ''; } .blockquote-reverse footer:after, .blockquote-reverse small:after, .blockquote-reverse .small:after, blockquote.pull-right footer:after, blockquote.pull-right small:after, blockquote.pull-right .small:after { content: '\\00A0 \\2014'; } address { margin-bottom: 21px; font-style: normal; line-height: 1.57143; } .container { margin-right: auto; margin-left: auto; padding-left: 15px; padding-right: 15px; } .container:before, .container:after { content: \" \"; display: table; } .container:after { clear: both; } .container-fluid { margin-right: auto; margin-left: auto; padding-left: 15px; padding-right: 15px; } .container-fluid:before, .container-fluid:after { content: \" \"; display: table; } .container-fluid:after { clear: both; } .row { margin-left: -15px; margin-right: -15px; } .row:before, .row:after { content: \" \"; display: table; } .row:after { clear: both; } .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 { position: relative; min-height: 1px; padding-left: 15px; padding-right: 15px; } .col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 { float: left; } .col-xs-1 { width: 8.33333%; } .col-xs-2 { width: 16.66667%; } .col-xs-3 { width: 25%; } .col-xs-4 { width: 33.33333%; } .col-xs-5 { width: 41.66667%; } .col-xs-6 { width: 50%; } .col-xs-7 { width: 58.33333%; } .col-xs-8 { width: 66.66667%; } .col-xs-9 { width: 75%; } .col-xs-10 { width: 83.33333%; } .col-xs-11 { width: 91.66667%; } .col-xs-12 { width: 100%; } .col-xs-pull-0 { right: auto; } .col-xs-pull-1 { right: 8.33333%; } .col-xs-pull-2 { right: 16.66667%; } .col-xs-pull-3 { right: 25%; } .col-xs-pull-4 { right: 33.33333%; } .col-xs-pull-5 { right: 41.66667%; } .col-xs-pull-6 { right: 50%; } .col-xs-pull-7 { right: 58.33333%; } .col-xs-pull-8 { right: 66.66667%; } .col-xs-pull-9 { right: 75%; } .col-xs-pull-10 { right: 83.33333%; } .col-xs-pull-11 { right: 91.66667%; } .col-xs-pull-12 { right: 100%; } .col-xs-push-0 { left: auto; } .col-xs-push-1 { left: 8.33333%; } .col-xs-push-2 { left: 16.66667%; } .col-xs-push-3 { left: 25%; } .col-xs-push-4 { left: 33.33333%; } .col-xs-push-5 { left: 41.66667%; } .col-xs-push-6 { left: 50%; } .col-xs-push-7 { left: 58.33333%; } .col-xs-push-8 { left: 66.66667%; } .col-xs-push-9 { left: 75%; } .col-xs-push-10 { left: 83.33333%; } .col-xs-push-11 { left: 91.66667%; } .col-xs-push-12 { left: 100%; } .col-xs-offset-0 { margin-left: 0%; } .col-xs-offset-1 { margin-left: 8.33333%; } .col-xs-offset-2 { margin-left: 16.66667%; } .col-xs-offset-3 { margin-left: 25%; } .col-xs-offset-4 { margin-left: 33.33333%; } .col-xs-offset-5 { margin-left: 41.66667%; } .col-xs-offset-6 { margin-left: 50%; } .col-xs-offset-7 { margin-left: 58.33333%; } .col-xs-offset-8 { margin-left: 66.66667%; } .col-xs-offset-9 { margin-left: 75%; } .col-xs-offset-10 { margin-left: 83.33333%; } .col-xs-offset-11 { margin-left: 91.66667%; } .col-xs-offset-12 { margin-left: 100%; } .btn { display: inline-block; margin-bottom: 0; font-weight: normal; text-align: center; vertical-align: middle; -ms-touch-action: manipulation; touch-action: manipulation; cursor: pointer; background-image: none; border: 1px solid transparent; white-space: nowrap; padding: 6px 12px; font-size: 14px; line-height: 1.57143; border-radius: 4px; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .btn:focus, .btn.focus, .btn:active:focus, .btn:active.focus, .btn.active:focus, .btn.active.focus { outline: 5px auto -webkit-focus-ring-color; outline-offset: -2px; } .btn:hover, .btn:focus, .btn.focus { color: #333; text-decoration: none; } .btn:active, .btn.active { outline: 0; background-image: none; -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125); box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125); } .btn.disabled, .btn[disabled], fieldset[disabled] .btn { cursor: not-allowed; opacity: 0.65; filter: alpha(opacity=65); -webkit-box-shadow: none; box-shadow: none; } a.btn.disabled, fieldset[disabled] a.btn { pointer-events: none; } .btn-default { color: #333; background-color: #fff; border-color: #ccc; } .btn-default:focus, .btn-default.focus { color: #333; background-color: #e6e6e6; border-color: #8c8c8c; } .btn-default:hover { color: #333; background-color: #e6e6e6; border-color: #adadad; } .btn-default:active, .btn-default.active, .open > .btn-default.dropdown-toggle { color: #333; background-color: #e6e6e6; border-color: #adadad; } .btn-default:active:hover, .btn-default:active:focus, .btn-default:active.focus, .btn-default.active:hover, .btn-default.active:focus, .btn-default.active.focus, .open > .btn-default.dropdown-toggle:hover, .open > .btn-default.dropdown-toggle:focus, .open > .btn-default.dropdown-toggle.focus { color: #333; background-color: #d4d4d4; border-color: #8c8c8c; } .btn-default:active, .btn-default.active, .open > .btn-default.dropdown-toggle { background-image: none; } .btn-default.disabled:hover, .btn-default.disabled:focus, .btn-default.disabled.focus, .btn-default[disabled]:hover, .btn-default[disabled]:focus, .btn-default[disabled].focus, fieldset[disabled] .btn-default:hover, fieldset[disabled] .btn-default:focus, fieldset[disabled] .btn-default.focus { background-color: #fff; border-color: #ccc; } .btn-default .badge { color: #fff; background-color: #333; } .btn-primary { color: #fff; background-color: #2196f3; border-color: #0d8aee; } .btn-primary:focus, .btn-primary.focus { color: #fff; background-color: #0c7cd5; border-color: #064475; } .btn-primary:hover { color: #fff; background-color: #0c7cd5; border-color: #0a68b4; } .btn-primary:active, .btn-primary.active, .open > .btn-primary.dropdown-toggle { color: #fff; background-color: #0c7cd5; border-color: #0a68b4; } .btn-primary:active:hover, .btn-primary:active:focus, .btn-primary:active.focus, .btn-primary.active:hover, .btn-primary.active:focus, .btn-primary.active.focus, .open > .btn-primary.dropdown-toggle:hover, .open > .btn-primary.dropdown-toggle:focus, .open > .btn-primary.dropdown-toggle.focus { color: #fff; background-color: #0a68b4; border-color: #064475; } .btn-primary:active, .btn-primary.active, .open > .btn-primary.dropdown-toggle { background-image: none; } .btn-primary.disabled:hover, .btn-primary.disabled:focus, .btn-primary.disabled.focus, .btn-primary[disabled]:hover, .btn-primary[disabled]:focus, .btn-primary[disabled].focus, fieldset[disabled] .btn-primary:hover, fieldset[disabled] .btn-primary:focus, fieldset[disabled] .btn-primary.focus { background-color: #2196f3; border-color: #0d8aee; } .btn-primary .badge { color: #2196f3; background-color: #fff; } .btn-success { color: #fff; background-color: #5cb85c; border-color: #4cae4c; } .btn-success:focus, .btn-success.focus { color: #fff; background-color: #449d44; border-color: #255625; } .btn-success:hover { color: #fff; background-color: #449d44; border-color: #398439; } .btn-success:active, .btn-success.active, .open > .btn-success.dropdown-toggle { color: #fff; background-color: #449d44; border-color: #398439; } .btn-success:active:hover, .btn-success:active:focus, .btn-success:active.focus, .btn-success.active:hover, .btn-success.active:focus, .btn-success.active.focus, .open > .btn-success.dropdown-toggle:hover, .open > .btn-success.dropdown-toggle:focus, .open > .btn-success.dropdown-toggle.focus { color: #fff; background-color: #398439; border-color: #255625; } .btn-success:active, .btn-success.active, .open > .btn-success.dropdown-toggle { background-image: none; } .btn-success.disabled:hover, .btn-success.disabled:focus, .btn-success.disabled.focus, .btn-success[disabled]:hover, .btn-success[disabled]:focus, .btn-success[disabled].focus, fieldset[disabled] .btn-success:hover, fieldset[disabled] .btn-success:focus, fieldset[disabled] .btn-success.focus { background-color: #5cb85c; border-color: #4cae4c; } .btn-success .badge { color: #5cb85c; background-color: #fff; } .btn-info { color: #fff; background-color: #56CCF2; border-color: #3ec5f0; } .btn-info:focus, .btn-info.focus { color: #fff; background-color: #27beee; border-color: #0d7ea3; } .btn-info:hover { color: #fff; background-color: #27beee; border-color: #11aee0; } .btn-info:active, .btn-info.active, .open > .btn-info.dropdown-toggle { color: #fff; background-color: #27beee; border-color: #11aee0; } .btn-info:active:hover, .btn-info:active:focus, .btn-info:active.focus, .btn-info.active:hover, .btn-info.active:focus, .btn-info.active.focus, .open > .btn-info.dropdown-toggle:hover, .open > .btn-info.dropdown-toggle:focus, .open > .btn-info.dropdown-toggle.focus { color: #fff; background-color: #11aee0; border-color: #0d7ea3; } .btn-info:active, .btn-info.active, .open > .btn-info.dropdown-toggle { background-image: none; } .btn-info.disabled:hover, .btn-info.disabled:focus, .btn-info.disabled.focus, .btn-info[disabled]:hover, .btn-info[disabled]:focus, .btn-info[disabled].focus, fieldset[disabled] .btn-info:hover, fieldset[disabled] .btn-info:focus, fieldset[disabled] .btn-info.focus { background-color: #56CCF2; border-color: #3ec5f0; } .btn-info .badge { color: #56CCF2; background-color: #fff; } .btn-warning { color: #fff; background-color: #F09819; border-color: #e18b0f; } .btn-warning:focus, .btn-warning.focus { color: #fff; background-color: #c97c0d; border-color: #694107; } .btn-warning:hover { color: #fff; background-color: #c97c0d; border-color: #a7670b; } .btn-warning:active, .btn-warning.active, .open > .btn-warning.dropdown-toggle { color: #fff; background-color: #c97c0d; border-color: #a7670b; } .btn-warning:active:hover, .btn-warning:active:focus, .btn-warning:active.focus, .btn-warning.active:hover, .btn-warning.active:focus, .btn-warning.active.focus, .open > .btn-warning.dropdown-toggle:hover, .open > .btn-warning.dropdown-toggle:focus, .open > .btn-warning.dropdown-toggle.focus { color: #fff; background-color: #a7670b; border-color: #694107; } .btn-warning:active, .btn-warning.active, .open > .btn-warning.dropdown-toggle { background-image: none; } .btn-warning.disabled:hover, .btn-warning.disabled:focus, .btn-warning.disabled.focus, .btn-warning[disabled]:hover, .btn-warning[disabled]:focus, .btn-warning[disabled].focus, fieldset[disabled] .btn-warning:hover, fieldset[disabled] .btn-warning:focus, fieldset[disabled] .btn-warning.focus { background-color: #F09819; border-color: #e18b0f; } .btn-warning .badge { color: #F09819; background-color: #fff; } .btn-danger { color: #fff; background-color: #FF512F; border-color: #ff3c16; } .btn-danger:focus, .btn-danger.focus { color: #fff; background-color: #fb2900; border-color: #951800; } .btn-danger:hover { color: #fff; background-color: #fb2900; border-color: #d72300; } .btn-danger:active, .btn-danger.active, .open > .btn-danger.dropdown-toggle { color: #fff; background-color: #fb2900; border-color: #d72300; } .btn-danger:active:hover, .btn-danger:active:focus, .btn-danger:active.focus, .btn-danger.active:hover, .btn-danger.active:focus, .btn-danger.active.focus, .open > .btn-danger.dropdown-toggle:hover, .open > .btn-danger.dropdown-toggle:focus, .open > .btn-danger.dropdown-toggle.focus { color: #fff; background-color: #d72300; border-color: #951800; } .btn-danger:active, .btn-danger.active, .open > .btn-danger.dropdown-toggle { background-image: none; } .btn-danger.disabled:hover, .btn-danger.disabled:focus, .btn-danger.disabled.focus, .btn-danger[disabled]:hover, .btn-danger[disabled]:focus, .btn-danger[disabled].focus, fieldset[disabled] .btn-danger:hover, fieldset[disabled] .btn-danger:focus, fieldset[disabled] .btn-danger.focus { background-color: #FF512F; border-color: #ff3c16; } .btn-danger .badge { color: #FF512F; background-color: #fff; } .btn-link { color: #2196f3; font-weight: normal; border-radius: 0; } .btn-link, .btn-link:active, .btn-link.active, .btn-link[disabled], fieldset[disabled] .btn-link { background-color: transparent; -webkit-box-shadow: none; box-shadow: none; } .btn-link, .btn-link:hover, .btn-link:focus, .btn-link:active { border-color: transparent; } .btn-link:hover, .btn-link:focus { color: #0a6ebd; text-decoration: underline; background-color: transparent; } .btn-link[disabled]:hover, .btn-link[disabled]:focus, fieldset[disabled] .btn-link:hover, fieldset[disabled] .btn-link:focus { color: #777777; text-decoration: none; } .btn-lg { padding: 10px 16px; font-size: 18px; line-height: 1.33333; border-radius: 6px; } .btn-sm { padding: 5px 10px; font-size: 12px; line-height: 1.5; border-radius: 3px; } .btn-xs { padding: 1px 5px; font-size: 12px; line-height: 1.5; border-radius: 3px; } .btn-block { display: block; width: 100%; } .btn-block + .btn-block { margin-top: 5px; } input[type=\"submit\"].btn-block, input[type=\"reset\"].btn-block, input[type=\"button\"].btn-block { width: 100%; } .fade { opacity: 0; -webkit-transition: opacity 0.15s linear; transition: opacity 0.15s linear; } .fade.in { opacity: 1; } .collapse { display: none; } .collapse.in { display: block; } tr.collapse.in { display: table-row; } tbody.collapse.in { display: table-row-group; } .collapsing { position: relative; height: 0; overflow: hidden; -webkit-transition-property: height,visibility; transition-property: height,visibility; -webkit-transition-duration: 0.35s; transition-duration: 0.35s; -webkit-transition-timing-function: ease; transition-timing-function: ease; } .caret { display: inline-block; width: 0; height: 0; margin-left: 2px; vertical-align: middle; border-top: 4px dashed; border-top: 4px solid \\9; border-right: 4px solid transparent; border-left: 4px solid transparent; } .dropup, .dropdown { position: relative; } .dropdown-toggle:focus { outline: 0; } .dropdown-menu { position: absolute; top: 100%; left: 0; z-index: 1000; display: none; float: left; min-width: 160px; padding: 5px 0; margin: 2px 0 0; list-style: none; font-size: 14px; text-align: left; background-color: #fff; border: 1px solid #ccc; border: 1px solid rgba(0, 0, 0, 0.15); border-radius: 4px; -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175); background-clip: padding-box; } .dropdown-menu.pull-right { right: 0; left: auto; } .dropdown-menu .divider { height: 1px; margin: 9.5px 0; overflow: hidden; background-color: #e5e5e5; } .dropdown-menu > li > a { display: block; padding: 3px 20px; clear: both; font-weight: normal; line-height: 1.57143; color: #333333; white-space: nowrap; } .dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus { text-decoration: none; color: #262626; background-color: #f5f5f5; } .dropdown-menu > .active > a, .dropdown-menu > .active > a:hover, .dropdown-menu > .active > a:focus { color: #fff; text-decoration: none; outline: 0; background-color: #2196f3; } .dropdown-menu > .disabled > a, .dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus { color: #777777; } .dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus { text-decoration: none; background-color: transparent; background-image: none; filter: progid:DXImageTransform.Microsoft.gradient(enabled = false); cursor: not-allowed; } .open > .dropdown-menu { display: block; } .open > a { outline: 0; } .dropdown-menu-right { left: auto; right: 0; } .dropdown-menu-left { left: 0; right: auto; } .dropdown-header { display: block; padding: 3px 20px; font-size: 12px; line-height: 1.57143; color: #777777; white-space: nowrap; } .dropdown-backdrop { position: fixed; left: 0; right: 0; bottom: 0; top: 0; z-index: 990; } .pull-right > .dropdown-menu { right: 0; left: auto; } .dropup .caret, .navbar-fixed-bottom .dropdown .caret { border-top: 0; border-bottom: 4px dashed; border-bottom: 4px solid \\9; content: \"\"; } .dropup .dropdown-menu, .navbar-fixed-bottom .dropdown .dropdown-menu { top: auto; bottom: 100%; margin-bottom: 2px; } .input-group { position: relative; display: table; border-collapse: separate; } .input-group[class*=\"col-\"] { float: none; padding-left: 0; padding-right: 0; } .input-group .form-control { position: relative; z-index: 2; float: left; width: 100%; margin-bottom: 0; } .input-group .form-control:focus { z-index: 3; } .input-group-addon, .input-group-btn, .input-group .form-control { display: table-cell; } .input-group-addon:not(:first-child):not(:last-child), .input-group-btn:not(:first-child):not(:last-child), .input-group .form-control:not(:first-child):not(:last-child) { border-radius: 0; } .input-group-addon, .input-group-btn { width: 1%; white-space: nowrap; vertical-align: middle; } .input-group-addon { padding: 6px 12px; font-size: 14px; font-weight: normal; line-height: 1; color: #555555; text-align: center; background-color: #eeeeee; border: 1px solid #ccc; border-radius: 4px; } .input-group-addon.input-sm, .input-group-sm > .input-group-addon, .input-group-sm > .input-group-btn > .input-group-addon.btn { padding: 5px 10px; font-size: 12px; border-radius: 3px; } .input-group-addon.input-lg, .input-group-lg > .input-group-addon, .input-group-lg > .input-group-btn > .input-group-addon.btn { padding: 10px 16px; font-size: 18px; border-radius: 6px; } .input-group-addon input[type=\"radio\"], .input-group-addon input[type=\"checkbox\"] { margin-top: 0; } .input-group .form-control:first-child, .input-group-addon:first-child, .input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group > .btn, .input-group-btn:first-child > .dropdown-toggle, .input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle), .input-group-btn:last-child > .btn-group:not(:last-child) > .btn { border-bottom-right-radius: 0; border-top-right-radius: 0; } .input-group-addon:first-child { border-right: 0; } .input-group .form-control:last-child, .input-group-addon:last-child, .input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group > .btn, .input-group-btn:last-child > .dropdown-toggle, .input-group-btn:first-child > .btn:not(:first-child), .input-group-btn:first-child > .btn-group:not(:first-child) > .btn { border-bottom-left-radius: 0; border-top-left-radius: 0; } .input-group-addon:last-child { border-left: 0; } .input-group-btn { position: relative; font-size: 0; white-space: nowrap; } .input-group-btn > .btn { position: relative; } .input-group-btn > .btn + .btn { margin-left: -1px; } .input-group-btn > .btn:hover, .input-group-btn > .btn:focus, .input-group-btn > .btn:active { z-index: 2; } .input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group { margin-right: -1px; } .input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group { z-index: 2; margin-left: -1px; } .nav { margin-bottom: 0; padding-left: 0; list-style: none; } .nav:before, .nav:after { content: \" \"; display: table; } .nav:after { clear: both; } .nav > li { position: relative; display: block; } .nav > li > a { position: relative; display: block; padding: 10px 15px; } .nav > li > a:hover, .nav > li > a:focus { text-decoration: none; background-color: #eeeeee; } .nav > li.disabled > a { color: #777777; } .nav > li.disabled > a:hover, .nav > li.disabled > a:focus { color: #777777; text-decoration: none; background-color: transparent; cursor: not-allowed; } .nav .open > a, .nav .open > a:hover, .nav .open > a:focus { background-color: #eeeeee; border-color: #2196f3; } .nav .nav-divider { height: 1px; margin: 9.5px 0; overflow: hidden; background-color: #e5e5e5; } .nav > li > a > img { max-width: none; } .nav-tabs { border-bottom: 1px solid #f2f2f2; } .nav-tabs > li { float: left; margin-bottom: -1px; } .nav-tabs > li > a { margin-right: 2px; line-height: 1.57143; border: 1px solid transparent; border-radius: 4px 4px 0 0; } .nav-tabs > li > a:hover { border-color: #eeeeee #eeeeee #f2f2f2; } .nav-tabs > li.active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.active > a:focus { color: #555555; background-color: #fff; border: 1px solid #f2f2f2; border-bottom-color: transparent; cursor: default; } .nav-pills > li { float: left; } .nav-pills > li > a { border-radius: 4px; } .nav-pills > li + li { margin-left: 2px; } .nav-pills > li.active > a, .nav-pills > li.active > a:hover, .nav-pills > li.active > a:focus { color: #fff; background-color: #2196f3; } .nav-stacked > li { float: none; } .nav-stacked > li + li { margin-top: 2px; margin-left: 0; } .nav-justified, .nav-tabs.nav-justified { width: 100%; } .nav-justified > li, .nav-tabs.nav-justified > li { float: none; } .nav-justified > li > a, .nav-tabs.nav-justified > li > a { text-align: center; margin-bottom: 5px; } .nav-justified > .dropdown .dropdown-menu { top: auto; left: auto; } .nav-tabs-justified, .nav-tabs.nav-justified { border-bottom: 0; } .nav-tabs-justified > li > a, .nav-tabs.nav-justified > li > a { margin-right: 0; border-radius: 4px; } .nav-tabs-justified > .active > a, .nav-tabs.nav-justified > .active > a, .nav-tabs-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:hover, .nav-tabs-justified > .active > a:focus, .nav-tabs.nav-justified > .active > a:focus { border: 1px solid #f2f2f2; } .tab-content > .tab-pane { display: none; } .tab-content > .active { display: block; } .nav-tabs .dropdown-menu { margin-top: -1px; border-top-right-radius: 0; border-top-left-radius: 0; } .navbar { position: relative; min-height: 50px; margin-bottom: 21px; border: 1px solid transparent; } .navbar:before, .navbar:after { content: \" \"; display: table; } .navbar:after { clear: both; } .navbar-header:before, .navbar-header:after { content: \" \"; display: table; } .navbar-header:after { clear: both; } .navbar-collapse { overflow-x: visible; padding-right: 15px; padding-left: 15px; border-top: 1px solid transparent; -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1); box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1); -webkit-overflow-scrolling: touch; } .navbar-collapse:before, .navbar-collapse:after { content: \" \"; display: table; } .navbar-collapse:after { clear: both; } .navbar-collapse.in { overflow-y: auto; } .navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse { max-height: 340px; } .container > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-header, .container-fluid > .navbar-collapse { margin-right: -15px; margin-left: -15px; } .navbar-static-top { z-index: 1000; border-width: 0 0 1px; } .navbar-fixed-top, .navbar-fixed-bottom { position: fixed; right: 0; left: 0; z-index: 1030; } .navbar-fixed-top { top: 0; border-width: 0 0 1px; } .navbar-fixed-bottom { bottom: 0; margin-bottom: 0; border-width: 1px 0 0; } .navbar-brand { float: left; padding: 14.5px 15px; font-size: 18px; line-height: 21px; height: 50px; } .navbar-brand:hover, .navbar-brand:focus { text-decoration: none; } .navbar-brand > img { display: block; } .navbar-toggle { position: relative; float: right; margin-right: 15px; padding: 10px 10px; margin-top: 8px; margin-bottom: 8px; background-color: transparent; background-image: none; border: 1px solid transparent; border-radius: 4px; } .navbar-toggle:focus { outline: 0; } .navbar-toggle .icon-bar { display: block; width: 22px; height: 2px; border-radius: 1px; } .navbar-toggle .icon-bar + .icon-bar { margin-top: 3px; } .navbar-nav { margin: 7.25px -15px; } .navbar-nav > li > a { padding-top: 10px; padding-bottom: 10px; line-height: 21px; } .navbar-form { margin-left: -15px; margin-right: -15px; padding: 10px 15px; border-top: 1px solid transparent; border-bottom: 1px solid transparent; -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1),0 1px 0 rgba(255, 255, 255, 0.1); box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1),0 1px 0 rgba(255, 255, 255, 0.1); margin-top: 7.5px; margin-bottom: 7.5px; } .navbar-nav > li > .dropdown-menu { margin-top: 0; border-top-right-radius: 0; border-top-left-radius: 0; } .navbar-fixed-bottom .navbar-nav > li > .dropdown-menu { margin-bottom: 0; border-top-right-radius: 4px; border-top-left-radius: 4px; border-bottom-right-radius: 0; border-bottom-left-radius: 0; } .navbar-btn { margin-top: 7.5px; margin-bottom: 7.5px; } .navbar-btn.btn-sm { margin-top: 10px; margin-bottom: 10px; } .navbar-btn.btn-xs { margin-top: 14px; margin-bottom: 14px; } .navbar-text { margin-top: 14.5px; margin-bottom: 14.5px; } .navbar-default { background-color: #f8f8f8; border-color: #e7e7e7; } .navbar-default .navbar-brand { color: #777; } .navbar-default .navbar-brand:hover, .navbar-default .navbar-brand:focus { color: #5e5e5e; background-color: transparent; } .navbar-default .navbar-text { color: #777; } .navbar-default .navbar-nav > li > a { color: #777; } .navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus { color: #333; background-color: transparent; } .navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus { color: #555; background-color: #e7e7e7; } .navbar-default .navbar-nav > .disabled > a, .navbar-default .navbar-nav > .disabled > a:hover, .navbar-default .navbar-nav > .disabled > a:focus { color: #ccc; background-color: transparent; } .navbar-default .navbar-toggle { border-color: #ddd; } .navbar-default .navbar-toggle:hover, .navbar-default .navbar-toggle:focus { background-color: #ddd; } .navbar-default .navbar-toggle .icon-bar { background-color: #888; } .navbar-default .navbar-collapse, .navbar-default .navbar-form { border-color: #e7e7e7; } .navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .open > a:hover, .navbar-default .navbar-nav > .open > a:focus { background-color: #e7e7e7; color: #555; } .navbar-default .navbar-link { color: #777; } .navbar-default .navbar-link:hover { color: #333; } .navbar-default .btn-link { color: #777; } .navbar-default .btn-link:hover, .navbar-default .btn-link:focus { color: #333; } .navbar-default .btn-link[disabled]:hover, .navbar-default .btn-link[disabled]:focus, fieldset[disabled] .navbar-default .btn-link:hover, fieldset[disabled] .navbar-default .btn-link:focus { color: #ccc; } .navbar-inverse { background-color: #222; border-color: #090909; } .navbar-inverse .navbar-brand { color: #9d9d9d; } .navbar-inverse .navbar-brand:hover, .navbar-inverse .navbar-brand:focus { color: #fff; background-color: transparent; } .navbar-inverse .navbar-text { color: #9d9d9d; } .navbar-inverse .navbar-nav > li > a { color: #9d9d9d; } .navbar-inverse .navbar-nav > li > a:hover, .navbar-inverse .navbar-nav > li > a:focus { color: #fff; background-color: transparent; } .navbar-inverse .navbar-nav > .active > a, .navbar-inverse .navbar-nav > .active > a:hover, .navbar-inverse .navbar-nav > .active > a:focus { color: #fff; background-color: #090909; } .navbar-inverse .navbar-nav > .disabled > a, .navbar-inverse .navbar-nav > .disabled > a:hover, .navbar-inverse .navbar-nav > .disabled > a:focus { color: #444; background-color: transparent; } .navbar-inverse .navbar-toggle { border-color: #333; } .navbar-inverse .navbar-toggle:hover, .navbar-inverse .navbar-toggle:focus { background-color: #333; } .navbar-inverse .navbar-toggle .icon-bar { background-color: #fff; } .navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form { border-color: #101010; } .navbar-inverse .navbar-nav > .open > a, .navbar-inverse .navbar-nav > .open > a:hover, .navbar-inverse .navbar-nav > .open > a:focus { background-color: #090909; color: #fff; } .navbar-inverse .navbar-link { color: #9d9d9d; } .navbar-inverse .navbar-link:hover { color: #fff; } .navbar-inverse .btn-link { color: #9d9d9d; } .navbar-inverse .btn-link:hover, .navbar-inverse .btn-link:focus { color: #fff; } .navbar-inverse .btn-link[disabled]:hover, .navbar-inverse .btn-link[disabled]:focus, fieldset[disabled] .navbar-inverse .btn-link:hover, fieldset[disabled] .navbar-inverse .btn-link:focus { color: #444; } .pager { padding-left: 0; margin: 21px 0; list-style: none; text-align: center; } .pager:before, .pager:after { content: \" \"; display: table; } .pager:after { clear: both; } .pager li { display: inline; } .pager li > a, .pager li > span { display: inline-block; padding: 5px 14px; background-color: #fff; border: 1px solid #ddd; border-radius: 15px; } .pager li > a:hover, .pager li > a:focus { text-decoration: none; background-color: #eeeeee; } .pager .next > a, .pager .next > span { float: right; } .pager .previous > a, .pager .previous > span { float: left; } .pager .disabled > a, .pager .disabled > a:hover, .pager .disabled > a:focus, .pager .disabled > span { color: #777777; background-color: #fff; cursor: not-allowed; } .badge { display: inline-block; min-width: 10px; padding: 3px 7px; font-size: 12px; font-weight: bold; color: #fff; line-height: 1; vertical-align: middle; white-space: nowrap; text-align: center; background-color: #777777; border-radius: 10px; } .badge:empty { display: none; } .btn .badge { position: relative; top: -1px; } .btn-xs .badge, .btn-group-xs > .btn .badge { top: 0; padding: 1px 5px; } .list-group-item.active > .badge, .nav-pills > .active > a > .badge { color: #2196f3; background-color: #fff; } .list-group-item > .badge { float: right; } .list-group-item > .badge + .badge { margin-right: 5px; } .nav-pills > li > a > .badge { margin-left: 3px; } a.badge:hover, a.badge:focus { color: #fff; text-decoration: none; cursor: pointer; } .thumbnail { display: block; padding: 4px; margin-bottom: 21px; line-height: 1.57143; background-color: #fff; border: 1px solid #ddd; border-radius: 4px; -webkit-transition: border 0.2s ease-in-out; transition: border 0.2s ease-in-out; } .thumbnail > img, .thumbnail a > img { display: block; max-width: 100%; height: auto; margin-left: auto; margin-right: auto; } .thumbnail .caption { padding: 9px; color: #333333; } a.thumbnail:hover, a.thumbnail:focus, a.thumbnail.active { border-color: #2196f3; } .media { margin-top: 15px; } .media:first-child { margin-top: 0; } .media, .media-body { zoom: 1; overflow: hidden; } .media-body { width: 10000px; } .media-object { display: block; } .media-object.img-thumbnail { max-width: none; } .media-right, .media > .pull-right { padding-left: 10px; } .media-left, .media > .pull-left { padding-right: 10px; } .media-left, .media-right, .media-body { display: table-cell; vertical-align: top; } .media-middle { vertical-align: middle; } .media-middle .media-left, .media-middle .media-right, .media-middle .media-body { vertical-align: middle; } .media-bottom { vertical-align: bottom; } .media-bottom .media-left, .media-bottom .media-right, .media-bottom .media-body { vertical-align: bottom; } .media-heading { margin-top: 0; margin-bottom: 5px; } .media-list { padding-left: 0; list-style: none; } .embed-responsive { position: relative; display: block; height: 0; padding: 0; overflow: hidden; } .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video { position: absolute; top: 0; left: 0; bottom: 0; height: 100%; width: 100%; border: 0; } .embed-responsive-16by9 { padding-bottom: 56.25%; } .embed-responsive-4by3 { padding-bottom: 75%; } .well { min-height: 20px; padding: 19px; margin-bottom: 20px; background-color: #f5f5f5; border: 1px solid #e3e3e3; border-radius: 4px; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); } .well blockquote { border-color: #ddd; border-color: rgba(0, 0, 0, 0.15); } .well-lg { padding: 24px; border-radius: 6px; } .well-sm { padding: 9px; border-radius: 3px; } .close { float: right; font-size: 24px; line-height: 1; color: #000; text-shadow: 0 1px 0 #fff; opacity: 0.2; filter: alpha(opacity=20); } .close:hover, .close:focus { color: #000; text-decoration: none; cursor: pointer; opacity: 0.5; filter: alpha(opacity=50); } button.close { padding: 0; cursor: pointer; background: transparent; border: 0; -webkit-appearance: none; } .modal-open { overflow: hidden; } .modal { display: none; overflow: hidden; position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 1050; -webkit-overflow-scrolling: touch; outline: 0; } .modal.fade .modal-dialog { -webkit-transform: translate(0, -25%); -ms-transform: translate(0, -25%); transform: translate(0, -25%); -webkit-transition: -webkit-transform 0.3s ease-out; transition: -webkit-transform 0.3s ease-out; transition: transform 0.3s ease-out; transition: transform 0.3s ease-out,-webkit-transform 0.3s ease-out; } .modal.in .modal-dialog { -webkit-transform: translate(0, 0); -ms-transform: translate(0, 0); transform: translate(0, 0); } .modal-open .modal { overflow-x: hidden; overflow-y: auto; } .modal-dialog { position: relative; width: auto; margin: 10px; } .modal-content { position: relative; background-color: #fff; border-radius: 6px; -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, 0.05); box-shadow: 0 3px 9px rgba(0, 0, 0, 0.05); background-clip: padding-box; outline: 0; } .modal-backdrop { position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 1040; background-color: #000; } .modal-backdrop.fade { opacity: 0; filter: alpha(opacity=0); } .modal-backdrop.in { opacity: 0.5; filter: alpha(opacity=50); } .modal-header { padding: 15px; border-bottom: 1px solid #e5e5e5; } .modal-header:before, .modal-header:after { content: \" \"; display: table; } .modal-header:after { clear: both; } .modal-header .close { margin-top: -2px; } .modal-title { margin: 0; line-height: 1.57143; } .modal-body { position: relative; padding: 15px; } .modal-footer { padding: 15px; text-align: right; border-top: 1px solid #e5e5e5; } .modal-footer:before, .modal-footer:after { content: \" \"; display: table; } .modal-footer:after { clear: both; } .modal-footer .btn + .btn { margin-left: 5px; margin-bottom: 0; } .modal-footer .btn-group .btn + .btn { margin-left: -1px; } .modal-footer .btn-block + .btn-block { margin-left: 0; } .modal-scrollbar-measure { position: absolute; top: -9999px; width: 50px; height: 50px; overflow: scroll; } .tooltip { position: absolute; z-index: 1070; display: block; font-family: \"PingHei\",\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif; font-style: normal; font-weight: normal; letter-spacing: normal; line-break: auto; line-height: 1.57143; text-align: left; text-align: start; text-decoration: none; text-shadow: none; text-transform: none; white-space: normal; word-break: normal; word-spacing: normal; word-wrap: normal; font-size: 12px; opacity: 0; filter: alpha(opacity=0); } .tooltip.in { opacity: 0.9; filter: alpha(opacity=90); } .tooltip.top { margin-top: -3px; padding: 5px 0; } .tooltip.right { margin-left: 3px; padding: 0 5px; } .tooltip.bottom { margin-top: 3px; padding: 5px 0; } .tooltip.left { margin-left: -3px; padding: 0 5px; } .tooltip-inner { max-width: 200px; padding: 3px 8px; color: #fff; text-align: center; background-color: #000; border-radius: 4px; } .tooltip-arrow { position: absolute; width: 0; height: 0; border-color: transparent; border-style: solid; } .tooltip.top .tooltip-arrow { bottom: 0; left: 50%; margin-left: -5px; border-width: 5px 5px 0; border-top-color: #000; } .tooltip.top-left .tooltip-arrow { bottom: 0; right: 5px; margin-bottom: -5px; border-width: 5px 5px 0; border-top-color: #000; } .tooltip.top-right .tooltip-arrow { bottom: 0; left: 5px; margin-bottom: -5px; border-width: 5px 5px 0; border-top-color: #000; } .tooltip.right .tooltip-arrow { top: 50%; left: 0; margin-top: -5px; border-width: 5px 5px 5px 0; border-right-color: #000; } .tooltip.left .tooltip-arrow { top: 50%; right: 0; margin-top: -5px; border-width: 5px 0 5px 5px; border-left-color: #000; } .tooltip.bottom .tooltip-arrow { top: 0; left: 50%; margin-left: -5px; border-width: 0 5px 5px; border-bottom-color: #000; } .tooltip.bottom-left .tooltip-arrow { top: 0; right: 5px; margin-top: -5px; border-width: 0 5px 5px; border-bottom-color: #000; } .tooltip.bottom-right .tooltip-arrow { top: 0; left: 5px; margin-top: -5px; border-width: 0 5px 5px; border-bottom-color: #000; } .clearfix:before, .clearfix:after { content: \" \"; display: table; } .clearfix:after { clear: both; } .center-block { display: block; margin-left: auto; margin-right: auto; } .pull-right { float: right !important; } .pull-left { float: left !important; } .hide { display: none !important; } .show { display: block !important; } .invisible { visibility: hidden; } .text-hide { font: 0/0 a; color: transparent; text-shadow: none; background-color: transparent; border: 0; } .hidden { display: none !important; } .affix { position: fixed; } @-ms-viewport { width: device-width; } .visible-xs { display: none !important; } .visible-sm { display: none !important; } .visible-md { display: none !important; } .visible-lg { display: none !important; } .visible-xs-block, .visible-xs-inline, .visible-xs-inline-block, .visible-sm-block, .visible-sm-inline, .visible-sm-inline-block, .visible-md-block, .visible-md-inline, .visible-md-inline-block, .visible-lg-block, .visible-lg-inline, .visible-lg-inline-block { display: none !important; } .visible-print { display: none !important; } .visible-print-block { display: none !important; } .visible-print-inline { display: none !important; } .visible-print-inline-block { display: none !important; } /** * application */ /*! * IE10 viewport hack for Surface/desktop Windows 8 bug * Copyright 2014-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */ /* * See the Getting Started docs for more information: * http://getbootstrap.com/getting-started/#support-ie10-width */ @-ms-viewport { width: device-width; } @-o-viewport { width: device-width; } @viewport { width: device-width; } /* * scrollbar */ ::-webkit-scrollbar { width: 6px; height: 4px; background: transparent; } ::-webkit-scrollbar-thumb { background: rgba(0, 0, 0, 0.15); } ::-webkit-scrollbar-thumb:window-inactive { background: rgba(0, 0, 0, 0.1); } ::-webkit-scrollbar-thumb:vertical { height: 4px; background: rgba(0, 0, 0, 0.15); } ::-webkit-scrollbar-thumb:horizontal { width: 4px; background: rgba(0, 0, 0, 0.15); } ::-webkit-scrollbar-thumb:vertical:hover { background-color: rgba(0, 0, 0, 0.3); } ::-webkit-scrollbar-thumb:vertical:active { background-color: rgba(0, 0, 0, 0.5); } ::-webkit-scrollbar-track { background: rgba(0, 0, 0, 0.1); -webkit-box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1); box-shadow: inset 0 0 3px rgba(0, 0, 0, 0.1); } ::-webkit-scrollbar-track-piece { background: rgba(0, 0, 0, 0.15); } *, *:before, *:after { -webkit-box-sizing: border-box; box-sizing: border-box; } html, body { position: relative; overflow-x: hidden; } body { padding-right: 0 !important; font-family: \"PingHei\",\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif; font-size: 14px; line-height: 1.57143; color: #333333; background-color: #fff; } a { color: #333333; text-decoration: none; } a:focus, a:hover { color: #0a6ebd; text-decoration: none; } a.active { color: #0a6ebd; } .active > a { color: #0a6ebd; } input, button, select, textarea, .btn { outline: none !important; } input:focus, input:hover, input:active, button:focus, button:hover, button:active, select:focus, select:hover, select:active, textarea:focus, textarea:hover, textarea:active, .btn:focus, .btn:hover, .btn:active { outline: none !important; } /*------------------ Fluidity response ------------------------------*/ img, canvas, iframe, video, svg { max-width: 100%; height: auto; } /*------------------ clear ------------------------------*/ .clear { height: 0; font-size: 0; line-height: 0; overflow: hidden; clear: both; } .clearfix:before, .clearfix:after { display: table; line-height: 0; content: \"\"; } .clearfix:after { clear: both; } .clearfix { *zoom: 1; } /*other*/ .clickable { cursor: pointer; } .scrollable { overflow-x: hidden; overflow-y: auto; } /*transform*/ .transform-no { -ms-transform: none !important; -webkit-transform: none !important; transform: none !important; } /*---------------------------------------------------- * color *---------------------------------------------------*/ .text-dark { color: #333 !important; } .text-grey { color: #999 !important; } /*text-white*/ .text-white { color: #fff !important; } .text-white a:hover, .text-white a:hover i, .text-white:hover { color: rgba(255, 255, 255, 0.8); } .text-white a.list-group-item.active i { color: #fff; } .text-white .accordion-list p { font-size: 12px; height: 84px; line-height: 21px; color: rgba(255, 255, 255, 0.8); } /*background-color*/ .bg-no { background: none !important; } .bg-alpha { background-color: transparent !important; } .bg-inverse, .bg-inverse a { color: #fff; } .btn.bg-inverse:hover, .btn.bg-inverse:focus, .btn.bg-inverse.focus { color: rgba(255, 255, 255, 0.8); } .bg { background-color: #f6f6f6 !important; } /*---------------------------------------------------- * z-index *---------------------------------------------------*/ .z-no { z-index: inherit; } .z1 { z-index: 1; } .z2 { z-index: 2; } .z3 { z-index: 3; } .z4 { z-index: 4; } .zmin { z-index: -1; } .zmax { z-index: 999; } /*---------------------------------------------------- * margin *---------------------------------------------------*/ /* All */ .m { margin: 5px !important; } .m-no { margin: 0 !important; } .m-0x { margin: 10px !important; } .m-1x { margin: 15px !important; } .m-2x { margin: 20px !important; } .m-3x { margin: 30px !important; } .m-4x { margin: 60px !important; } .m-5x { margin: 100px !important; } /* Vertical */ .mv { margin-top: 5px !important; margin-bottom: 5px !important; } .mv-no { margin-top: 0 !important; margin-bottom: 0 !important; } .mv-0x { margin-top: 10px !important; margin-bottom: 10px !important; } .mv-1x { margin-top: 15px !important; margin-bottom: 15px !important; } .mv-2x { margin-top: 20px !important; margin-bottom: 20px !important; } .mv-3x { margin-top: 30px !important; margin-bottom: 30px !important; } .mv-4x { margin-top: 60px !important; margin-bottom: 60px !important; } .mv-5x { margin-top: 100px !important; margin-bottom: 100px !important; } /* Horizontal */ .mh { margin-left: 5px !important; margin-right: 5px !important; } .mh-no { margin-left: 0 !important; margin-right: 0 !important; } .mh-0x { margin-left: 10px !important; margin-right: 10px !important; } .mh-1x { margin-left: 15px !important; margin-right: 15px !important; } .mh-2x { margin-left: 20px !important; margin-right: 20px !important; } .mh-3x { margin-left: 30px !important; margin-right: 30px !important; } .mh-4x { margin-left: 60px !important; margin-right: 60px !important; } .mh-5x { margin-left: 100px !important; margin-right: 100px !important; } /* margin Top */ .mt { margin-top: 5px !important; } .mt-no { margin-top: 0 !important; } .mt-0x { margin-top: 10px !important; } .mt-1x { margin-top: 15px !important; } .mt-2x { margin-top: 20px !important; } .mt-3x { margin-top: 30px !important; } .mt-4x { margin-top: 60px !important; } .mt-5x { margin-top: 100px !important; } /* margin Bottom */ .mb { margin-bottom: 5px !important; } .mb-no { margin-bottom: 0 !important; } .mb-0x { margin-bottom: 10px !important; } .mb-1x { margin-bottom: 15px !important; } .mb-2x { margin-bottom: 20px !important; } .mb-3x { margin-bottom: 30px !important; } .mb-4x { margin-bottom: 60px !important; } .mb-5x { margin-bottom: 100px !important; } /* margin left */ .ml { margin-left: 5px !important; } .ml-no { margin-left: 0 !important; } .ml-0x { margin-left: 10px !important; } .ml-1x { margin-left: 15px !important; } .ml-2x { margin-left: 20px !important; } .ml-3x { margin-left: 30px !important; } .ml-4x { margin-left: 60px !important; } .ml-5x { margin-left: 100px !important; } /* margin right */ .mr { margin-right: 5px !important; } .mr-no { margin-right: 0 !important; } .mr-0x { margin-right: 10px !important; } .mr-1x { margin-right: 15px !important; } .mr-2x { margin-right: 20px !important; } .mr-3x { margin-right: 30px !important; } .mr-4x { margin-right: 60px !important; } .mr-5x { margin-right: 100px !important; } /*---------------------------------------------------- * padding *---------------------------------------------------*/ /* All */ .p { padding: 5px !important; } .p-no { padding: 0 !important; } .p-0x { padding: 10px !important; } .p-1x { padding: 15px !important; } .p-2x { padding: 20px !important; } .p-3x { padding: 30px !important; } .p-4x { padding: 60px !important; } .p-5x { padding: 100px !important; } /* Vertical */ .pv { padding-top: 5px !important; padding-bottom: 5px !important; } .pv-no { padding-top: 0 !important; padding-bottom: 0 !important; } .pv-0x { padding-top: 10px !important; padding-bottom: 10px !important; } .pv-1x { padding-top: 15px !important; padding-bottom: 15px !important; } .pv-2x { padding-top: 20px !important; padding-bottom: 20px !important; } .pv-3x { padding-top: 30px !important; padding-bottom: 30px !important; } .pv-4x { padding-top: 60px !important; padding-bottom: 60px !important; } .pv-5x { padding-top: 100px !important; padding-bottom: 100px !important; } /* Horizontal */ .ph { padding-left: 5px !important; padding-right: 5px !important; } .ph-no { padding-left: 0 !important; padding-right: 0 !important; } .ph-0x { padding-left: 10px !important; padding-right: 10px !important; } .ph-1x { padding-left: 15px !important; padding-right: 15px !important; } .ph-2x { padding-left: 20px !important; padding-right: 20px !important; } .ph-3x { padding-left: 30px !important; padding-right: 30px !important; } .ph-4x { padding-left: 60px !important; padding-right: 60px !important; } .ph-5x { padding-left: 100px !important; padding-right: 100px !important; } /* padding Top */ .pt { padding-top: 5px !important; } .pt-no { padding-top: 0 !important; } .pt-0x { padding-top: 10px !important; } .pt-1x { padding-top: 15px !important; } .pt-2x { padding-top: 20px !important; } .pt-3x { padding-top: 30px !important; } .pt-4x { padding-top: 60px !important; } .pt-5x { padding-top: 100px !important; } /* padding Bottom */ .pb { padding-bottom: 5px !important; } .pb-no { padding-bottom: 0 !important; } .pb-0x { padding-bottom: 10px !important; } .pb-1x { padding-bottom: 15px !important; } .pb-2x { padding-bottom: 20px !important; } .pb-3x { padding-bottom: 30px !important; } .pb-4x { padding-bottom: 60px !important; } .pb-5x { padding-bottom: 100px !important; } /* padding left */ .pl { padding-left: 5px !important; } .pl-no { padding-left: 0 !important; } .pl-0x { padding-left: 10px !important; } .pl-1x { padding-left: 15px !important; } .pl-2x { padding-left: 20px !important; } .pl-3x { padding-left: 30px !important; } .pl-4x { padding-left: 60px !important; } .pl-5x { padding-left: 100px !important; } /* padding right */ .pr { padding-right: 5px !important; } .pr-no { padding-right: 0 !important; } .pr-0x { padding-right: 10px !important; } .pr-1x { padding-right: 15px !important; } .pr-2x { padding-right: 20px !important; } .pr-3x { padding-right: 30px !important; } .pr-4x { padding-right: 60px !important; } .pr-5x { padding-right: 100px !important; } /*---------------------------------------------------- * border *---------------------------------------------------*/ .b { border: 1px solid #ddd; } .b-no { border: none !important; } /*---------------------------------------------------- * border-radius *---------------------------------------------------*/ /*----------------------css border-radius----------------*/ .r-rounded { border-radius: 2em !important; padding-left: 1em; padding-right: 1em; overflow: hidden; } .r-circle { border-radius: 50% !important; overflow: hidden; } .r-no { border-radius: 0 !important; } /*---------------------------------------------------- * width and height *---------------------------------------------------*/ .w-auto { width: auto !important; } .w-full, .w-full img { width: 100% !important; max-width: 100% !important; } /*---------------------------------------------------- * text *---------------------------------------------------*/ .lh-2x { line-height: 2.0; } /*----------------- css text --------------------*/ .text-break { word-break: break-all !important; word-wrap: break-word !important; } .text-undecorate { text-decoration: none !important; } .text-underline { text-decoration: underline !important; } .text-through { text-decoration: line-through !important; } .text-sub { vertical-align: sub !important; } .text-super { vertical-align: super !important; } .text-indent, .text-indent p, .text-indent div { text-indent: 2em; } /*text wrap*/ .text-nowrap { /*display: block;*/ max-width: 100%; overflow: hidden !important; text-overflow: ellipsis !important; white-space: nowrap !important; word-wrap: normal !important; -moz-binding: url(\"ellipsis.xml\"); } .text-nowrap-1x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 1; -webkit-box-flex: 1; line-height: 24px; height: 24px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-2x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2; line-height: 24px; height: 48px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-3x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 3; line-height: 24px; height: 72px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-4x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 4; line-height: 24px; height: 96px; word-break: break-all !important; word-wrap: break-word !important; } .text-nowrap-5x { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 5; line-height: 24px; height: 120px; word-break: break-all !important; word-wrap: break-word !important; } /*---------------------------------------------------- * thumb *---------------------------------------------------*/ .thumb { width: 16px; display: inline-block; overflow: hidden; } .thumb-xs { width: 32px; display: inline-block; overflow: hidden; } .thumb-sm { width: 48px; display: inline-block; overflow: hidden; } .thumb-md { width: 64px; display: inline-block; overflow: hidden; } .thumb-lg { width: 96px; display: inline-block; overflow: hidden; } .thumb-xl { width: 128px; display: inline-block; overflow: hidden; } .thumb-wrapper { padding: 2px; border: 1px solid #dbe2e7; } .thumb img, .thumb-0x img, .thumb-1x img, .thumb-2x img, .thumb-3x img, .thumb-4x img, .thumb-5x img, .thumb-6x img, .thumb-btn img { height: auto; max-width: 100%; vertical-align: middle; } /*---------------------------------------------------- * img hover style *---------------------------------------------------*/ /*img gray*/ img.img-gray, .img-gray img { -webkit-filter: grayscale(100%); -moz-filter: grayscale(100%); -ms-filter: grayscale(100%); -o-filter: grayscale(100%); filter: grayscale(100%); -webkit-filter: gray; filter: gray; } img.img-gray:hover, .img-gray:hover img { -webkit-filter: grayscale(0); -moz-filter: grayscale(0); -ms-filter: grayscale(0); -o-filter: grayscale(0); filter: grayscale(0); } /*img-rotate*/ img.img-rotate, .img-rotate img { -webkit-transition: -webkit-transform 0.3s ease; transition: -webkit-transform 0.3s ease; transition: transform 0.3s ease; transition: transform 0.3s ease,-webkit-transform 0.3s ease; } img.img-rotate:hover, .img-rotate:hover img { transform: rotate(360deg); -ms-transform: rotate(360deg); /* IE 9 */ -moz-transform: rotate(360deg); /* Firefox */ -webkit-transform: rotate(360deg); /* Safari and Chrome */ -o-transform: rotate(360deg); } /*img-burn*/ img.img-burn, .img-burn img { position: relative; -webkit-transition: all 0.8s ease-in-out; transition: all 0.8s ease-in-out; } img.img-burn:hover, .img-burn:hover img { -webkit-transform: scale(1.2) rotate(2deg); -ms-transform: scale(1.2) rotate(2deg); transform: scale(1.2) rotate(2deg); } /*hover-up*/ img.hover-up, .hover-up img { position: relative; top: 0; -webkit-transition: top .3s ease-out; transition: top .3s ease-out; } img.hover-up:hover, .hover-up:hover img { top: -6px; } /*Button components*/ .text-active, .active > .text, .active > .auto .text, .collapsed > .text, .collapsed > .auto .text { display: none !important; } .active > .text-active, .active > .auto .text-active, .collapsed > .text-active, .collapsed > .auto .text-active { display: inline-block !important; } /*Button components end here*/ /** * paper */ .shadow-no { -webkit-box-shadow: none; box-shadow: none; } .shadow, .hover-shadow:hover { -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); } /*radio*/ .radio { margin-left: 20px; } .radio label { display: inline-block; position: relative; padding-left: 5px; } .radio label:before { content: \"\"; display: inline-block; position: absolute; width: 17px; height: 17px; left: 0; margin-left: -20px; border: 1px solid #cccccc; border-radius: 50%; background-color: #fff; -webkit-transition: border 0.15s ease-in-out; transition: border 0.15s ease-in-out; } .radio label:after { display: inline-block; position: absolute; content: \" \"; width: 11px; height: 11px; left: 3px; top: 3px; margin-left: -20px; border-radius: 50%; background-color: #555555; -webkit-transform: scale(0, 0); -ms-transform: scale(0, 0); transform: scale(0, 0); -webkit-transition: -webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); transition: -webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); transition: transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); transition: transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33),-webkit-transform 0.1s cubic-bezier(0.8, -0.33, 0.2, 1.33); } .radio input[type=radio] { display: none; } .radio input[type=radio]:checked + label:after { -webkit-transform: scale(1, 1); -ms-transform: scale(1, 1); transform: scale(1, 1); } .radio input[type=radio]:disabled + label { opacity: 0.65; } .radio input[type=radio]:disabled + label:before { cursor: not-allowed; } .hover-grow { -webkit-transition: all .2s linear; transition: all .2s linear; } .hover-grow:hover { -webkit-transform: translate3d(0, -2px, 0); transform: translate3d(0, -2px, 0); } fieldset { padding: 0; margin: 0; border: 0; min-width: 0; } legend { display: block; width: 100%; padding: 0; margin-bottom: 21px; font-size: 21px; line-height: inherit; color: #333333; border: 0; border-bottom: 1px solid #e5e5e5; } label { display: inline-block; max-width: 100%; margin-bottom: 5px; font-weight: bold; } input[type=\"search\"] { -webkit-box-sizing: border-box; box-sizing: border-box; } input[type=\"radio\"], input[type=\"checkbox\"] { margin: 4px 0 0; margin-top: 1px \\9; line-height: normal; } input[type=\"file\"] { display: block; } input[type=\"range\"] { display: block; width: 100%; } select[multiple], select[size] { height: auto; } input[type=\"file\"]:focus, input[type=\"radio\"]:focus, input[type=\"checkbox\"]:focus { outline: 5px auto -webkit-focus-ring-color; outline-offset: -2px; } output { display: block; padding-top: 7px; font-size: 14px; line-height: 1.57143; color: #555555; } .form-control { display: block; width: 100%; height: 35px; padding: 6px 12px; font-size: 14px; line-height: 1.57143; color: #555555; background-color: #fff; background-image: none; border: 1px solid #ccc; border-radius: 4px; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075); -webkit-transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s; -webkit-transition: border-color ease-in-out 0.15s,-webkit-box-shadow ease-in-out 0.15s; transition: border-color ease-in-out 0.15s,-webkit-box-shadow ease-in-out 0.15s; transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s; transition: border-color ease-in-out 0.15s,box-shadow ease-in-out 0.15s,-webkit-box-shadow ease-in-out 0.15s; } .form-control:focus { border-color: #66afe9; outline: 0; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 8px rgba(102, 175, 233, 0.6); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),0 0 8px rgba(102, 175, 233, 0.6); } .form-control::-moz-placeholder { color: #999; opacity: 1; } .form-control:-ms-input-placeholder { color: #999; } .form-control::-webkit-input-placeholder { color: #999; } .form-control::-ms-expand { border: 0; background-color: transparent; } .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control { background-color: #eeeeee; opacity: 1; } .form-control[disabled], fieldset[disabled] .form-control { cursor: not-allowed; } textarea.form-control { height: auto; } input[type=\"search\"] { -webkit-appearance: none; } /* * Component: list * ---------------- */ .list-disc { list-style: disc !important; } .list-alpha { list-style: upper-alpha !important; } .list-decimal { list-style: decimal !important; } .list-outside { list-style-position: outside !important; } .list-inside { list-style-position: inside !important; } .list-square { list-style: none; } .list-square li:before { color: #ccc; content: \"▪\"; font-size: 12px; margin-right: 6px; -webkit-transition: 0.2s ease; transition: 0.2s ease; } .list-circle-num, .list-square-num { counter-reset: list1; } .list-circle-num > li, .list-square-num > li { list-style: none outside none; margin-bottom: 13px; } .list-circle-num > li:before { counter-increment: list1; content: counter(list1) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 12px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-square-num > li:before { counter-increment: list1; content: counter(list1) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 5px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-circle-num > li > ol, .list-square-num > li > ol { counter-reset: list2; } .list-circle-num > li > ol > li, .list-square-num > li > ol > li { margin-bottom: 13px; } .list-circle-num > li > ol > li:before { counter-increment: list2; content: counter(list1) \".\" counter(list2) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 12px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-square-num > li > ol > li:before { counter-increment: list2; content: counter(list1) \".\" counter(list2) \"\"; width: 24px; height: 24px; text-align: center; border-radius: 5px; font-size: 15px; border-width: 1px; border-style: solid; margin: 0 16px 0 0; display: inline-block; vertical-align: middle; } .list-circle-num[class*=\"list-full\"] > li::before, .list-square-num[class*=\"list-full\"] > li::before { background: #de4a32; color: #ffffff; } .label { display: inline-block; padding: .3em .6em; font-size: 75%; font-weight: bold; line-height: 1; color: #777777; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; } .label:empty { display: none; } .btn .label { position: relative; top: -1px; } a.label:hover, a.label:focus { color: #333333; text-decoration: none; cursor: pointer; } .label-default { background-color: #eeeeee; } .label-default[href]:hover, .label-default[href]:focus { background-color: #d5d5d5; } .label-primary { background-color: #2196f3; color: #fff; } .label-primary[href]:hover, .label-primary[href]:focus { background-color: #0c7cd5; } .label-success { background-color: #5cb85c; color: #fff; } .label-success[href]:hover, .label-success[href]:focus { background-color: #449d44; } .label-info { background-color: #56CCF2; color: #fff; } .label-info[href]:hover, .label-info[href]:focus { background-color: #27beee; } .label-warning { background-color: #F09819; color: #fff; } .label-warning[href]:hover, .label-warning[href]:focus { background-color: #c97c0d; } .label-danger { background-color: #FF512F; color: #fff; } .label-danger[href]:hover, .label-danger[href]:focus { background-color: #fb2900; } .panel { margin-bottom: 21px; background-color: #fff; border: 1px solid #f2f2f2; } .panel .article-title { display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2; font-size: 18px; line-height: 32px; height: 64px; word-break: break-all !important; word-wrap: break-word !important; } .panel-body { padding: 15px; } .panel-body:before, .panel-body:after { content: \" \"; display: table; } .panel-body:after { clear: both; } .panel-heading { padding: 10px 15px; border-bottom: 1px solid #f2f2f2; } .panel-heading > .dropdown .dropdown-toggle { color: inherit; } .panel-title { margin-top: 0; margin-bottom: 0; font-size: 16px; color: inherit; } .panel-title > a, .panel-title > small, .panel-title > .small, .panel-title > small > a, .panel-title > .small > a { color: inherit; text-decoration: none; } .panel-footer { padding: 10px 15px; border-top: 1px solid #f2f2f2; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; } /** * panel-group-base */ .panel.b-no { border: 0; margin-bottom: 0; } .panel.b-no .panel-heading, .panel.b-no .panel-body, .panel.b-no .panel-footer { border: 0; padding-left: 0; padding-right: 0; } /* Badger*/ .panel-badger { position: relative; } .panel-badger:after { content: \"\"; position: absolute; top: 0; width: 0; height: 0; border-width: 4px; border-style: solid; border-color: #777777 transparent transparent #777777; } .panel-badger:hover:after { border-color: #2196f3 transparent transparent #2196f3; } .badger-danger:after { border-color: #FF512F transparent transparent #FF512F; } .badger-warning:after { border-color: #F09819 transparent transparent #F09819; } .badger-success:after { border-color: #5cb85c transparent transparent #5cb85c; } .badger-info:after { border-color: #56CCF2 transparent transparent #56CCF2; } .badger-primary:after { border-color: #2196f3 transparent transparent #2196f3; } /* bg shortcodes */ .bg-gradient-info span, .bg-gradient-info:before { background: #56CCF2; background: -webkit-linear-gradient(left, #56CCF2 0%, #2F80ED 80%, #2F80ED 100%); background: -webkit-gradient(linear, left top, right top, from(#56CCF2), color-stop(80%, #2F80ED), to(#2F80ED)); background: linear-gradient(to right, #56CCF2 0%, #2F80ED 80%, #2F80ED 100%); } .bg-gradient-primary span, .bg-gradient-primary:before { background: #396afc; background: -webkit-linear-gradient(left, #396afc 0%, #2948ff 80%, #2948ff 100%); background: -webkit-gradient(linear, left top, right top, from(#396afc), color-stop(80%, #2948ff), to(#2948ff)); background: linear-gradient(to right, #396afc 0%, #2948ff 80%, #2948ff 100%); } .bg-gradient-success span, .bg-gradient-success:before { background: #44ea76; background: -webkit-linear-gradient(left, #44ea76 0%, #39fad7 80%, #39fad7 100%); background: -webkit-gradient(linear, left top, right top, from(#44ea76), color-stop(80%, #39fad7), to(#39fad7)); background: linear-gradient(to right, #44ea76 0%, #39fad7 80%, #39fad7 100%); } .bg-gradient-warning span, .bg-gradient-warning:before { background: #FF512F; background: -webkit-linear-gradient(left, #FF512F 0%, #F09819 80%, #F09819 100%); background: -webkit-gradient(linear, left top, right top, from(#FF512F), color-stop(80%, #F09819), to(#F09819)); background: linear-gradient(to right, #FF512F 0%, #F09819 80%, #F09819 100%); } .bg-gradient-danger span, .bg-gradient-danger:before { background: #FF512F; background: -webkit-linear-gradient(left, #FF512F 0%, #DD2476 80%, #DD2476 100%); background: -webkit-gradient(linear, left top, right top, from(#FF512F), color-stop(80%, #DD2476), to(#DD2476)); background: linear-gradient(to right, #FF512F 0%, #DD2476 80%, #DD2476 100%); } /* Button fancy */ .btn-fancy { display: inline-block; font-size: 17px; letter-spacing: 0.03em; text-transform: uppercase; color: #ffffff; position: relative; } .btn-fancy:before { content: ''; display: inline-block; height: 40px; position: absolute; bottom: -5px; left: 30px; right: 30px; z-index: -1; -webkit-filter: blur(20px) brightness(0.95); filter: blur(20px) brightness(0.95); -webkit-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: all 0.3s ease-out; transition: all 0.3s ease-out; } .btn-fancy i { margin-top: -1px; margin-right: 20px; font-size: 1.265em; vertical-align: middle; } .btn-fancy span { display: inline-block; padding: 18px 60px; border-radius: 50em; position: relative; z-index: 2; will-change: transform,filter; -webkit-transform-style: preserve-3d; transform-style: preserve-3d; -webkit-transition: all 0.3s ease-out; transition: all 0.3s ease-out; } .btn-fancy:focus, .btn-fancy:active { color: #ffffff; } .btn-fancy:hover { color: #ffffff; } .btn-fancy:hover span { -webkit-filter: brightness(1.05) contrast(1.05); filter: brightness(1.05) contrast(1.05); -webkit-transform: scale(0.95); -ms-transform: scale(0.95); transform: scale(0.95); } .btn-fancy:hover:before { bottom: 0; -webkit-filter: blur(10px) brightness(0.95); filter: blur(10px) brightness(0.95); } .btn-fancy.pop-onhover:before { opacity: 0; bottom: 10px; } .btn-fancy.pop-onhover:hover:before { bottom: -7px; opacity: 1; -webkit-filter: blur(20px); filter: blur(20px); } .btn-fancy.pop-onhover:hover span { -webkit-transform: scale(1.04); -ms-transform: scale(1.04); transform: scale(1.04); } .btn-fancy.pop-onhover:hover:active span { -webkit-filter: brightness(1) contrast(1); filter: brightness(1) contrast(1); -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); -webkit-transition: all 0.15s ease-out; transition: all 0.15s ease-out; } .btn-fancy.pop-onhover:hover:active:before { bottom: 0; -webkit-filter: blur(10px) brightness(0.95); filter: blur(10px) brightness(0.95); -webkit-transition: all 0.2s ease-out; transition: all 0.2s ease-out; } /* * Component: table * css like github * ---------------- */ table { border: 1px solid #f2f2f2; } table > thead > tr > th, table > thead > tr > td, table > tbody > tr > th, table > tbody > tr > td, table > tfoot > tr > th, table > tfoot > tr > td { border: 1px solid #f2f2f2; } table > tbody > tr:nth-of-type(odd) { background-color: #f8f8f8; } table > tbody > tr:hover { background-color: #fbfbfb; } table { padding: 0; width: 100%; max-width: 100%; margin: 10px 0; } table > thead > tr > th, table > thead > tr > td, table > tbody > tr > th, table > tbody > tr > td, table > tfoot > tr > th, table > tfoot > tr > td { padding: 6px 13px; } table > tbody + tbody { border-top: 2px solid #f2f2f2; } table table { background-color: #fff; } .modal button.close { position: absolute; right: 10px; top: 10px; z-index: 99; } .modal-small .modal-dialog { width: 480px; } @font-face { font-family: \"icon\"; src: url(\"iconfont.eot?t=1525101408939\"); /* IE9*/ src: url(\"iconfont.eot?t=1525101408939#iefix\") format(\"embedded-opentype\"),url(\"data:application/x-font-woff;charset=utf-8;base64,\") format(\"woff\"),url(\"iconfont.ttf?t=1525101408939\") format(\"truetype\"),url(\"iconfont.svg?t=1525101408939#icon\") format(\"svg\"); } .icon { display: inline-block; font: normal normal normal 14px/1 icon; font-size: inherit; text-rendering: auto; -webkit-font-smoothing: antialiased; -webkit-text-stroke-width: 0.2px; -moz-osx-font-smoothing: grayscale; } .icon-diandian:before { content: \"\\e63a\"; } .icon-huaban:before { content: \"\\e63c\"; } .icon-code-fork:before { content: \"\\e67a\"; } .icon-more:before { content: \"\\e6c0\"; } .icon-zhihu:before { content: \"\\e6d1\"; } .icon-linkedin:before { content: \"\\e724\"; } .icon-eye-fill:before { content: \"\\e64f\"; } .icon-stackexchange:before { content: \"\\e8b2\"; } .icon-tag:before { content: \"\\e6a3\"; } .icon-starfish:before { content: \"\\e62e\"; } .icon-home:before { content: \"\\e660\"; } .icon-search:before { content: \"\\e61c\"; } .icon-project:before { content: \"\\e63e\"; } .icon-dialog:before { content: \"\\e613\"; } .icon-twitter:before { content: \"\\ec9c\"; } .icon-github:before { content: \"\\e70a\"; } .icon-time:before { content: \"\\e669\"; } .icon-voice:before { content: \"\\e65a\"; } .icon-google:before { content: \"\\e601\"; } .icon-weibo:before { content: \"\\e64b\"; } .icon-segmentfault:before { content: \"\\e610\"; } .icon-star-fill:before { content: \"\\e630\"; } .icon-phone:before { content: \"\\e68a\"; } .icon-cup-fill:before { content: \"\\e614\"; } .icon-jiaju:before { content: \"\\e671\"; } .icon-qzone:before { content: \"\\e603\"; } .icon-home-fill:before { content: \"\\e617\"; } .icon-clock:before { content: \"\\e618\"; } .icon-file:before { content: \"\\e66f\"; } .icon-comment:before { content: \"\\e61a\"; } .icon-cup:before { content: \"\\e62c\"; } .icon-share:before { content: \"\\e66a\"; } .icon-star-half:before { content: \"\\e62f\"; } .icon-star:before { content: \"\\e619\"; } .icon-tencent-weibo:before { content: \"\\e602\"; } .icon-book:before { content: \"\\e79d\"; } .icon-bitbucket:before { content: \"\\e64e\"; } .icon-facebook:before { content: \"\\e6e3\"; } .icon-email:before { content: \"\\e667\"; } .icon-zcool:before { content: \"\\e60c\"; } .icon-social-media:before { content: \"\\e68b\"; } .icon-douban:before { content: \"\\e60f\"; } .icon-coding:before { content: \"\\e600\"; } .icon-github-fill:before { content: \"\\e71d\"; } .icon-qq:before { content: \"\\e611\"; } .icon-shu-fill:before { content: \"\\e615\"; } .icon-pinterest:before { content: \"\\e697\"; } .icon-tags:before { content: \"\\e6c4\"; } .icon-bill:before { content: \"\\e61b\"; } .icon-shu:before { content: \"\\e616\"; } .icon-book-shelf:before { content: \"\\e60d\"; } .icon-target:before { content: \"\\e695\"; } .icon-profile:before { content: \"\\e6e2\"; } .icon-alipay:before { content: \"\\e938\"; } .icon-skype:before { content: \"\\e604\"; } .icon-juejin:before { content: \"\\e605\"; } .icon-code:before { content: \"\\e73f\"; } .icon-list:before { content: \"\\e61e\"; } .icon-map-marker:before { content: \"\\e609\"; } .icon-stackoverflow:before { content: \"\\e606\"; } .icon-hourglass:before { content: \"\\e60e\"; } .icon-behance:before { content: \"\\e67b\"; } .icon-folder-open:before { content: \"\\e6b4\"; } .icon-folder:before { content: \"\\e60a\"; } .icon-menu:before { content: \"\\e607\"; } .icon-users:before { content: \"\\e60b\"; } .icon-eye:before { content: \"\\e657\"; } .icon-wechat:before { content: \"\\e65e\"; } .icon-number:before { content: \"\\e658\"; } .icon-gitlab:before { content: \"\\e67c\"; } .icon-rss:before { content: \"\\e63d\"; } .icon-archives:before { content: \"\\e62d\"; } .icon-68design:before { content: \"\\e608\"; } .icon-dribble:before { content: \"\\e982\"; } .icon-wepay:before { content: \"\\e629\"; } .icon-youdao-note:before { content: \"\\e8a6\"; } .icon-book-fill:before { content: \"\\e659\"; } .icon-hezuo:before { content: \"\\e6e5\"; } .icon-link:before { content: \"\\e635\"; } .icon-archives-fill:before { content: \"\\e694\"; } .icon-anchor:before { content: \"\\e858\"; } .icon-angle-down:before { content: \"\\e85e\"; } .icon-angle-left:before { content: \"\\e85f\"; } .icon-angle-up:before { content: \"\\e860\"; } .icon-angle-right:before { content: \"\\e862\"; } .icon-calendar:before { content: \"\\e895\"; } .icon-calendar-check:before { content: \"\\e896\"; } .icon-calendar-minus:before { content: \"\\e897\"; } .icon-calendar-plus:before { content: \"\\e899\"; } .icon-calendar-times:before { content: \"\\e89a\"; } .icon-close:before { content: \"\\e8c4\"; } .icon-delicious:before { content: \"\\e8e2\"; } .icon-plus:before { content: \"\\e99d\"; } .icon-gg:before { content: \"\\e6fd\"; } .icon-friendship:before { content: \"\\e612\"; } .icon-gitee:before { content: \"\\e61d\"; } pre .comment { color: #8e908c; } pre .variable, pre .attribute, pre .tag, pre .regexp, pre .ruby .constant, pre .xml .tag .title, pre .xml .pi, pre .xml .doctype, pre .html .doctype, pre .css .id, pre .css .class, pre .css .pseudo { color: #c82829; } pre .number, pre .preprocessor, pre .built_in, pre .literal, pre .params, pre .constant { color: #f5871f; } pre .ruby .class .title, pre .css .rules .attribute { color: #718c00; } pre .string, pre .value, pre .inheritance, pre .header, pre .ruby .symbol, pre .xml .cdata { color: #718c00; } pre .title, pre .css .hexcolor { color: #3e999f; } pre .function, pre .python .decorator, pre .python .title, pre .ruby .function .title, pre .ruby .title .keyword, pre .perl .sub, pre .javascript .title, pre .js .title, pre .coffeescript .title { color: #4271ae; } pre .keyword, pre .javascript .function, pre .js .function { color: #8959a8; } pre, .highlight { background: #fafafa; margin: 10px 0; padding: 15px 10px; overflow: auto; font-size: 13px; color: #4d4d4c; line-height: 1.5; } .highlight .gutter pre, .gist .gist-file .gist-data .line-numbers { color: #666; } code { text-shadow: 0 1px #fff; padding: 0.2em 0.4em; margin: 0 0.3em; color: #555; background: #eee; border-radius: 3px; font-size: 85%; } pre code { background: none; text-shadow: none; padding: 0; } .highlight { position: relative; padding: 32px 10px 0 10px; border-radius: 4px; } .highlight:before { display: block; content: ' '; height: 32px; position: absolute; top: 0; left: 0; right: 0; background-color: #f6f6f6; padding: 0 10px; border-top-left-radius: 4px; border-top-right-radius: 4px; } .highlight:after { content: \" \"; position: absolute; border-radius: 50%; background: #fc625d; width: 10px; height: 10px; top: 0; left: 15px; margin-top: 11px; -webkit-box-shadow: 20px 0 #fdbc40,40px 0 #35cd4b; box-shadow: 20px 0 #fdbc40,40px 0 #35cd4b; } .highlight pre { border: none; margin: 0; } .highlight table { position: relative; border: none; width: 100%; margin: 0; padding: 0; } .highlight tr { border: none; } .highlight td, .highlight th { border: none; padding: 0; } .highlight td.code, .highlight th.code { width: 100% !important; } .highlight figcaption { font-size: 0.85em; color: #8e908c; line-height: 1em; margin-bottom: 1em; } .highlight figcaption a { float: right; } .highlight .line { height: 24px; line-height: 24px; } .highlight .gutter pre { text-align: right; padding-right: 0; padding-left: 0; color: #ccc; } /* * Sidebar */ /* Hide for mobile, show later */ .header { background-color: #fbfbfb; } .sidebar { background-color: #fdfdfd; } .sidebar .slimContent { padding: 20px; } .main { position: relative; min-height: 100vh; padding: 15px; } .main:before, .main:after { content: \" \"; display: table; } .main:after { clear: both; } .footer { padding: 20px; background-color: #fbfbfb; } /* * main-center */ body.main-center .sidebar { left: auto; right: 0; border-left: 1px solid #f6f6f6; border-right: 0; } /* * main-left */ body.main-left .header { left: auto; right: 0; border-left: 1px solid #f6f6f6; border-right: 0; } body.main-left .sidebar { left: auto; right: 0; border-left: 1px solid #f6f6f6; border-right: 0; } body.main-left .footer { left: auto; right: 0; } /* * main-right */ body.no-sidebar .sidebar { display: none !important; } /** * Sidebar navigation */ .main-nav { float: none !important; } .main-nav > li { display: block; width: 100%; position: relative; } .main-nav > li > a { color: #555555; } .main-nav > li .menu-title { margin-left: 15px; } .main-nav > .active a, .main-nav > .active a:hover, .main-nav > .active a:focus { color: #333333; background: #f4f4f4; } /** * profile-block */ .profile-block { padding: 20px 15px 10px 15px; } #avatar { width: 64px; height: 64px; display: inline-block; } #avatar img { width: 100%; max-height: 100%; height: auto !important; } #name { font-size: 18px; margin-top: 10px; margin-bottom: 0; } #title { font-size: 13px; margin-top: 5px; margin-bottom: 5px; } /** * search */ .sidebar-form { border-radius: 3px; border: 1px solid #eee; margin: 0 15px 15px 15px; } .sidebar-form input[type=\"text\"], .sidebar-form .btn { -webkit-box-shadow: none; box-shadow: none; background-color: transparent; border: 1px solid transparent; height: 32px; } .sidebar-form input[type=\"text\"]:focus, .sidebar-form .btn:focus { outline: none; } .sidebar-form input[type=\"text\"] { color: #666; border-top-left-radius: 2px; border-top-right-radius: 0; border-bottom-right-radius: 0; border-bottom-left-radius: 2px; } .sidebar-form input[type=\"text\"]:focus, .sidebar-form input[type=\"text\"]:focus + .input-group-btn .btn { background-color: #fff; color: #666; } .sidebar-form .btn { color: #999; border-top-left-radius: 0; border-top-right-radius: 2px; border-bottom-right-radius: 2px; border-bottom-left-radius: 0; } .header { /** * navbar */ } .header .navbar-collapse { padding-left: 0; padding-right: 0; } .header .navbar-collapse .navbar-nav { margin: 0; } .header .navbar-toggle .icon-bar { background-color: #2196f3; } /* * Main content */ .main .pager { text-align: left; margin: 10px 0; } .main .pager .disabled { cursor: not-allowed; } .main .pager > a, .main .pager > .page-number { line-height: 32px; /* float: left; */ } .main .pager a { color: #666; border: 0; line-height: 32px; padding: 0; } .main .pager a:link, .main .pager a:visited { background-color: transparent; } .main .pager a:hover { color: #0a6ebd; background-color: transparent; } .main .pager .prev { margin-right: 10px; } .main .pager .page-number.current { color: #2196f3; } .main .pager .page-number + .page-number { margin-left: 10px; } .main .pager .page-number + .next { margin-left: 10px; } .main .total-article { margin: 10px 0; line-height: 32px; color: #999; } .main .page-header { margin-top: 0; } .main .article-list article { border-bottom: 1px solid #f2f2f2; } .main .article-list article:last-child { border-bottom: 0; } .main .article-meta { font-size: 13px; color: #999; } .main .article-meta a { color: #999; } .main .article-meta a:hover { color: #0a6ebd; text-decoration: none; } .main .article-meta span + span { margin-left: 10px; } .main .content { min-height: 85vh; } .main.has-sticky .content { margin-bottom: 70px; } #comments .gitment-footer-container, #comments .gitment-footer-project-link { display: none !important; } .panel .label, .widget .label { font-weight: normal; } .widget:before, .widget:after { content: \" \"; display: table; } .widget:after { clear: both; } .widget .widget-title { font-size: 18px; color: #000; } .widget time { color: #999; font-size: 12px; text-transform: uppercase; } .widget p { margin-bottom: 0; } .widget ul { margin-left: 0; padding-left: 0; list-style: none; } .widget .category-link { color: #0a6ebd; } .category-list-count, .tag-list-count, .archive-list-count { padding-left: 5px; color: #999; font-size: 0.85em; } .category-list-count:before, .tag-list-count:before, .archive-list-count:before { content: \"(\"; } .category-list-count:after, .tag-list-count:after, .archive-list-count:after { content: \")\"; } .category-list, .archive-list, .tag-list { line-height: 1.75; } .category-list li:before, .archive-list li:before, .tag-list li:before { color: #ccc; content: \"▪\"; font-size: 12px; margin-right: 6px; -webkit-transition: 0.2s ease; transition: 0.2s ease; } .category-list-child { padding-left: 15px; } .recent-post-list li + li { margin-top: 15px; } .recent-post-list li .item-thumb, .recent-post-list li .item-inner { display: table-cell; vertical-align: middle; } .recent-post-list li .item-thumb { opacity: 1; padding-right: 10px; -webkit-transition: all 0.2s ease; transition: all 0.2s ease; } .recent-post-list li .item-thumb .thumb { width: 50px; height: 50px; display: block; position: relative; overflow: hidden; } .recent-post-list li .item-thumb .thumb span { width: 100%; height: 100%; display: block; } .recent-post-list li .item-thumb .thumb .thumb-image { position: absolute; background-size: cover; background-position: center; } .recent-post-list li .item-thumb .thumb .thumb-none { background-image: url(\"../images/thumb-default.png\"); background-size: 100% 100%; } .recent-post-list li:hover .item-thumb { opacity: 0.8; } .sidebar-toc.collapse { display: none !important; } .sidebar-toc.in { display: block !important; } .tagcloud a { display: inline-block; margin-bottom: 0.2em; padding: .3em .6em; font-size: 75% !important; line-height: 1; background-color: #eee; text-align: center; white-space: nowrap; vertical-align: baseline; border-radius: .25em; } .bar .pager .next > a, .bar .pager .next > span { float: none; } .bar.bar-footer { position: relative; background-color: #fff; bottom: -15px; } .bar.bar-footer:before { content: ''; position: absolute; width: -webkit-calc(100% + 30px); width: calc(100% + 30px); height: 52px; left: -15px; border-top: 1px solid #f6f6f6; border-bottom: 1px solid #fff; background-color: #fff; } .bar .bar-inner { position: relative; z-index: 9; } .bar .bar-inner:before, .bar .bar-inner:after { content: \" \"; display: table; } .bar .bar-inner:after { clear: both; } .bar .bar-right { margin: 10px 0; float: right; } .toggle-toc { cursor: pointer; margin-left: 10px; } .toggle-toc a { display: inline-block; line-height: 32px; text-align: center; } /** * footer */ .footer { color: #999; } .footer .copyright { font-size: 12px; } .footer .copyright a { color: #999; text-decoration: none; } .footer .copyright a:hover { color: #0a6ebd; } /** * .wave-icon */ .wave-icon { display: inline-block; position: relative; } .wave-icon .wave-circle { display: block; border-radius: 50%; background-color: transparent; } .wave-icon .wave-circle:before, .wave-icon .wave-circle:after { content: ''; border: 10px solid #2196f3; background: #2196f3; border-radius: 50%; position: absolute; top: 50%; left: 50%; z-index: 1; } .wave-icon .wave-circle:before { height: 74px; width: 74px; -webkit-animation: pulse 5s ease-out; animation: pulse 5s ease-out; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; margin-top: -37px; margin-left: -37px; opacity: 0; } .wave-icon .wave-circle:after { height: 98px; width: 98px; -webkit-animation: pulse 5s ease-out; animation: pulse 5s ease-out; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; margin-top: -49px; margin-left: -49px; opacity: 0.3; } .wave-icon .icon { position: relative; display: block; width: 50px; height: 50px; line-height: 50px; text-align: center; background-color: #2196f3; border-radius: 50%; font-size: 24px; color: #fff; z-index: 2; } .wave-icon.wave-icon-info .wave-circle:before, .wave-icon.wave-icon-info .wave-circle:after { border: 10px solid #56CCF2; background: #56CCF2; } .wave-icon.wave-icon-info .icon { background-color: #56CCF2; } .wave-icon.wave-icon-primary .wave-circle:before, .wave-icon.wave-icon-primary .wave-circle:after { border: 10px solid #2196f3; background: #2196f3; } .wave-icon.wave-icon-primary .icon { background-color: #2196f3; } .wave-icon.wave-icon-warning .wave-circle:before, .wave-icon.wave-icon-warning .wave-circle:after { border: 10px solid #F09819; background: #F09819; } .wave-icon.wave-icon-warning .icon { background-color: #F09819; } .wave-icon.wave-icon-success .wave-circle:before, .wave-icon.wave-icon-success .wave-circle:after { border: 10px solid #5cb85c; background: #5cb85c; } .wave-icon.wave-icon-success .icon { background-color: #5cb85c; } .wave-icon.wave-icon-danger .wave-circle:before, .wave-icon.wave-icon-danger .wave-circle:after { border: 10px solid #FF512F; background: #FF512F; } .wave-icon.wave-icon-danger .icon { background-color: #FF512F; } @-webkit-keyframes pulse { 0% { -webkit-transform: scale(0); opacity: 0.0; } 25% { -webkit-transform: scale(0); opacity: 0.1; } 50% { -webkit-transform: scale(0.1); opacity: 0.3; } 75% { -webkit-transform: scale(0.5); opacity: 0.5; } 100% { -webkit-transform: scale(1); opacity: 0.0; } } .repo-list { list-style: none; padding-left: 0; } .repo { position: relative; list-style-type: none; border: 1px solid #f2f2f2; margin-bottom: 15px; overflow: hidden; } .repo-title { padding: 0 15px; margin: 15px 0; font-size: 16px; font-weight: 600; } .repo-body { display: -webkit-box; padding: 0 15px; margin: 0 0 20px; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2; line-height: 1.5em; height: 3em; word-break: break-all !important; word-wrap: break-word !important; } .repo-image { position: relative; display: table; width: 101%; height: 3px; margin: -1px -1px 15px; background-color: #666; } .repo-meta { padding: 0 15px; margin-top: 5px; margin-bottom: 15px; color: #777; font-size: 12px; text-align: right; } .repo-meta:before, .repo-meta:after { content: \" \"; display: table; } .repo-meta:after { clear: both; } .repo-meta .meta + .meta { margin-left: 15px; } /* * Global add-ons */ .text-collapsed { display: none; } .text-in { display: inline-block; } .collapsed .text-collapsed { display: inline-block; } .collapsed .text-in { display: none; } .sub-header { padding-bottom: 10px; border-bottom: 1px solid #eee; } .article-header { margin-bottom: 20px; } .article-footer { margin-top: 20px; } /** * collection */ .collection { position: relative; } .collection a.collection-item { display: block; -webkit-transition: .25s; transition: .25s; color: #777777; } .collection a:not(.active):hover { color: #333333; } .collection .collection-item { padding: 8px 0; margin: 0; } .article-list .article-title { font-size: 18px; } .article-toc .toc-title { font-size: 18px; color: #000; } .article-toc .toc { list-style: none; padding-left: 0; line-height: 2.0; } .article-toc .toc ol { list-style: none; padding-left: 10px; } .article-toc .toc .toc-item { position: relative; } .article-toc .toc .toc-item .markdownIt-Anchor { position: absolute; left: 0; right: 0; top: 0; padding: 14px 0; } .marked-body h1, .marked-body h2, .marked-body h3, .marked-body h4, .marked-body h5, .marked-body h6 { margin-top: 24px; margin-bottom: 16px; font-weight: 600; line-height: 1.25; } .marked-body h1 { padding-bottom: 0.3em; font-size: 2em; border-bottom: 1px solid #f2f2f2; } .marked-body h2 { padding-bottom: 0.3em; font-size: 1.5em; border-bottom: 1px solid #f2f2f2; } .marked-body a { color: #2196f3; text-decoration: none; } .marked-body a:focus, .marked-body a:hover { color: #0a6ebd; text-decoration: none; } .marked-body ul, .marked-body ol { padding-left: 0; margin-left: 20px; } /* * We are hiding the invisible nav outside the screen * so we need to avoid the horizontal scroll */ body.okayNav-loaded { overflow-x: hidden; } .okayNav { position: relative; } .okayNav:before, .okayNav:after { content: \" \"; display: table; } .okayNav:after { clear: both; } .okayNav:not(.loaded) { visibility: hidden; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .okayNav ul { /* We want two navigations - one hidden and one visible */ float: left; padding-left: 0; } .okayNav ul li { display: inline-block; margin-left: 15px; } .okayNav a { position: relative; z-index: 1; } .okayNav a.active { color: #0a6ebd; } .okayNav__nav--visible { overflow: hidden; white-space: nowrap; } .okayNav__nav--visible li { display: inline-block; margin-left: 15px; } .okayNav__nav--visible li:first-child { margin-left: 0; } .okayNav__nav--visible a { /* Link styling for the visible part of the nav */ display: block; -webkit-transition: color 200ms cubic-bezier(0.55, 0, 0.1, 1); transition: color 200ms cubic-bezier(0.55, 0, 0.1, 1); } .okayNav__nav--visible:empty ~ .okayNav__menu-toggle { top: 0; } /* Link styling for the off-screen part of the nav */ .okayNav__nav--invisible { display: none; position: absolute; width: 100%; top: 24px; overflow-y: auto; -webkit-overflow-scrolling: touch; -webkit-box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); padding-top: 15px; padding-bottom: 15px; background: #fff; } .okayNav__nav--invisible li { display: inline-block; } .okayNav__nav--invisible li a { display: block; padding: 6px 15px; min-width: 100px; } .okayNav__nav--invisible.nav-left { left: 0; } .okayNav__nav--invisible.nav-right { right: 0; } .okayNav__nav--invisible.transition-enabled { -webkit-transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1),-webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); } .okayNav__nav--invisible.nav-open { display: block; z-index: 99; border: 1px solid #f2f2f2; } /* Kebab icon */ .okayNav__menu-toggle { position: relative; z-index: 1; float: right; cursor: pointer; -webkit-transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: -webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1); transition: transform 400ms cubic-bezier(0.55, 0, 0.1, 1),-webkit-transform 400ms cubic-bezier(0.55, 0, 0.1, 1); } .okayNav__menu-toggle.okay-invisible { position: absolute; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; pointer-events: none; opacity: 0; } .okayNav__menu-toggle span { background: #666; display: inline-block; width: 2px; height: 2px; margin: auto 1px; pointer-events: none; border-radius: 50%; vertical-align: middle; } .okayNav__menu-toggle.icon--active { /* Kebab icon when off-screen nav is open */ } .okayNav__menu-toggle.icon--active span { background: #0a6ebd; } .okayNav a { color: #2e2e33; font-weight: 400; } .okayNav a:hover { color: #0a6ebd; } /** * social-links */ .social-links { list-style: none; padding: 0; text-align: left; } .social-links li { list-style: none; display: inline-block; margin-left: 10px; } .social-links li:first-child { margin-left: 0; } .header .social-links { padding: 10px 20px; } .footer .social-links { margin-bottom: 5px; } @font-face { font-family: \"socialshare\"; src: url(\"../fonts/iconfont.eot\"); /* IE9*/ src: url(\"../fonts/iconfont.eot?#iefix\") format(\"embedded-opentype\"),url(\"../fonts/iconfont.woff\") format(\"woff\"),url(\"../fonts/iconfont.ttf\") format(\"truetype\"),url(\"../fonts/iconfont.svg#iconfont\") format(\"svg\"); } .social-share { display: inline-block; font-size: 16px; } .social-share a { position: relative; text-decoration: none; margin-left: 16px; display: inline-block; outline: none; line-height: 32px; } .social-share .social-share-icon { position: relative; display: inline-block; height: 32px; line-height: 32px; color: #999; text-align: center; vertical-align: middle; -webkit-transition: background 0.6s ease-out 0s; transition: background 0.6s ease-out 0s; } .social-share .social-share-icon:hover { color: #666; } .social-share .icon-weibo:hover { color: #ff763b; } .social-share .icon-tencent:hover { color: #56b6e7; } .social-share .icon-qq:hover { color: #56b6e7; } .social-share .icon-qzone:hover { color: #FDBE3D; } .social-share .icon-douban:hover { color: #33b045; } .social-share .icon-linkedin:hover { color: #0077B5; } .social-share .icon-facebook:hover { color: #44619D; } .social-share .icon-google:hover { color: #db4437; } .social-share .icon-twitter:hover { color: #55acee; } .social-share .icon-diandian:hover { color: #307DCA; } .social-share .icon-wechat { position: relative; } .social-share .icon-wechat:hover { color: #7bc549; } .social-share .icon-wechat .wechat-qrcode { display: none; border: 1px solid #eee; position: absolute; z-index: 9; top: -209px; left: -90px; width: 200px; height: 200px; color: #666; font-size: 12px; text-align: center; background-color: #fff; -webkit-transition: all 200ms; transition: all 200ms; -webkit-tansition: all 350ms; -moz-transition: all 350ms; } .social-share .icon-wechat .wechat-qrcode.bottom { top: 40px; left: -84px; } .social-share .icon-wechat .wechat-qrcode.bottom:after { display: none; } .social-share .icon-wechat .wechat-qrcode h4 { font-weight: normal; height: 26px; line-height: 26px; font-size: 12px; background-color: #f3f3f3; margin: 0; padding: 0; color: #777; } .social-share .icon-wechat .wechat-qrcode .qrcode { width: 105px; margin: 15px auto; } .social-share .icon-wechat .wechat-qrcode .qrcode table { margin: 0 !important; } .social-share .icon-wechat .wechat-qrcode .help p { font-weight: normal; line-height: 16px; padding: 0; margin: 0; } .social-share .icon-wechat .wechat-qrcode:before { content: ''; position: absolute; left: 50%; margin-left: -6px; bottom: -15px; width: 0; height: 0; border-width: 8px 6px 6px 6px; border-style: solid; border-color: #eee transparent transparent transparent; } .social-share .icon-wechat .wechat-qrcode:after { content: ''; position: absolute; left: 50%; margin-left: -6px; bottom: -13px; width: 0; height: 0; border-width: 8px 6px 6px 6px; border-style: solid; border-color: #fff transparent transparent transparent; } .social-share .icon-wechat:hover .wechat-qrcode { display: block; } .btn-donate { position: absolute; bottom: 10px; left: 50%; margin-left: -25px; width: 50px; height: 50px; line-height: 50px; padding: 0; border-radius: 50%; font-size: 18px; cursor: pointer; z-index: 99; } .btn-donate:focus, .btn-donate:hover, .btn-donate:active { border-color: transparent !important; outline: none !important; } .btn-donate.btn-fancy { background-color: transparent; } .btn-donate.btn-fancy span { width: 50px; height: 50px; padding: 0; } .donate { overflow: hidden; } .donate-box { text-align: center; padding-top: 30px; } .donate-box .donate-head { width: 100%; height: 80px; text-align: center; line-height: 60px; color: #a3a3a3; font-size: 16px; position: relative; } .donate-box .donate-head:before, .donate-box .donate-head:after { font-family: Arial,Helvetica,sans-serif; background: none; width: 0px; height: 0px; font-style: normal; color: #eee; font-size: 100px; position: absolute; top: 15px; } .donate-box .donate-head:before { content: '\\201c'; left: 30px; } .donate-box .donate-head:after { content: '\\201d'; right: 70px; } .donate-box .donate-footer { padding-top: 35px; } .donate-box .donate-payimg { display: inline-block; padding: 10px; border: 6px solid #ea5f00; margin: 0 auto; border-radius: 3px; } .donate-box .donate-payimg img { display: block; text-align: center; width: 140px; height: 140px; } .book .media-middle { display: inline-block; width: 115px; } .ins-search { display: none; } .ins-search.show { display: block; } .ins-selectable { cursor: pointer; } .ins-search-mask, .ins-search-container { position: fixed; } .ins-search-mask { top: 0; left: 0; width: 100%; height: 100%; z-index: 1050; background: rgba(0, 0, 0, 0.5); } .ins-input-wrapper { position: relative; } .ins-search-input { width: 100%; border: none; outline: none; font-size: 16px; -webkit-box-shadow: none; box-shadow: none; font-weight: 200; border-radius: 0; background: #fff; line-height: 20px; -webkit-box-sizing: border-box; box-sizing: border-box; padding: 12px 28px 12px 20px; border-bottom: 1px solid #e2e2e2; font-family: \"Microsoft Yahei Light\",\"Microsoft Yahei\",Helvetica,Arial,sans-serif; } .ins-close { top: 50%; right: 6px; width: 20px; height: 20px; font-size: 24px; margin-top: -15px; position: absolute; text-align: center; opacity: 1.0; color: #666; display: inline-block; } .ins-close:hover { color: #006bde; } .ins-search-container { left: 50%; top: 100px; z-index: 1051; bottom: 100px; -webkit-box-sizing: border-box; box-sizing: border-box; width: 540px; margin-left: -270px; } .ins-section-wrapper { left: 0; right: 0; top: 45px; bottom: 0; overflow-y: auto; position: absolute; } .ins-section-container { position: relative; background: #f7f7f7; } .ins-section { font-size: 14px; line-height: 16px; } .ins-section .ins-section-header, .ins-section .ins-search-item { padding: 8px 15px; } .ins-section .ins-section-header { color: #9a9a9a; border-bottom: 1px solid #e2e2e2; } .ins-section .ins-slug { margin-left: 5px; color: #9a9a9a; } .ins-section .ins-slug:before { content: '('; } .ins-section .ins-slug:after { content: ')'; } .ins-section .ins-search-item header, .ins-section .ins-search-item .ins-search-preview { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .ins-section .ins-search-item header .icon { margin-right: 8px; } .ins-section .ins-search-item .ins-search-preview { height: 15px; font-size: 12px; color: #9a9a9a; margin: 5px 0 0 20px; } .ins-section .ins-search-item:hover, .ins-section .ins-search-item.active { color: #fff; background: #006bde; } .ins-section .ins-search-item:hover .ins-slug, .ins-section .ins-search-item.active .ins-slug, .ins-section .ins-search-item:hover .ins-search-preview, .ins-section .ins-search-item.active .ins-search-preview { color: #fff; } .theme-black .header, .theme-blue .header, .theme-green .header, .theme-purple .header { color: #fff; } .theme-black .header a, .theme-blue .header a, .theme-green .header a, .theme-purple .header a { color: #efefef; } .theme-black .header #location, .theme-blue .header #location, .theme-green .header #location, .theme-purple .header #location { color: rgba(255, 255, 255, 0.75) !important; } .theme-black .header .navbar-toggle .icon-bar, .theme-blue .header .navbar-toggle .icon-bar, .theme-green .header .navbar-toggle .icon-bar, .theme-purple .header .navbar-toggle .icon-bar { background-color: #fff; } .theme-black .footer, .theme-blue .footer, .theme-green .footer, .theme-purple .footer { color: rgba(255, 255, 255, 0.75); } .theme-black .footer a, .theme-blue .footer a, .theme-green .footer a, .theme-purple .footer a { color: rgba(255, 255, 255, 0.75); } .theme-black .header a:focus, .theme-black .header a:hover, .theme-black .header a.active, .theme-black .footer a:focus, .theme-black .footer a:hover, .theme-black .footer a.active, .theme-blue .header a:focus, .theme-blue .header a:hover, .theme-blue .header a.active, .theme-blue .footer a:focus, .theme-blue .footer a:hover, .theme-blue .footer a.active, .theme-green .header a:focus, .theme-green .header a:hover, .theme-green .header a.active, .theme-green .footer a:focus, .theme-green .footer a:hover, .theme-green .footer a.active, .theme-purple .header a:focus, .theme-purple .header a:hover, .theme-purple .header a.active, .theme-purple .footer a:focus, .theme-purple .footer a:hover, .theme-purple .footer a.active { color: #fff; } .theme-black .main-nav > li > a:focus, .theme-black .main-nav > li > a:hover, .theme-black .main-nav > li > a.active, .theme-blue .main-nav > li > a:focus, .theme-blue .main-nav > li > a:hover, .theme-blue .main-nav > li > a.active, .theme-green .main-nav > li > a:focus, .theme-green .main-nav > li > a:hover, .theme-green .main-nav > li > a.active, .theme-purple .main-nav > li > a:focus, .theme-purple .main-nav > li > a:hover, .theme-purple .main-nav > li > a.active { color: #fff; background: rgba(0, 0, 0, 0.15); } .theme-black .main-nav > .active a, .theme-black .main-nav > .active a:focus, .theme-black .main-nav > .active a:hover, .theme-black .main-nav > .active a.active, .theme-blue .main-nav > .active a, .theme-blue .main-nav > .active a:focus, .theme-blue .main-nav > .active a:hover, .theme-blue .main-nav > .active a.active, .theme-green .main-nav > .active a, .theme-green .main-nav > .active a:focus, .theme-green .main-nav > .active a:hover, .theme-green .main-nav > .active a.active, .theme-purple .main-nav > .active a, .theme-purple .main-nav > .active a:focus, .theme-purple .main-nav > .active a:hover, .theme-purple .main-nav > .active a.active { color: #fff; background: rgba(0, 0, 0, 0.2); } .theme-black .search .sidebar-form, .theme-blue .search .sidebar-form, .theme-green .search .sidebar-form, .theme-purple .search .sidebar-form { border: 0; background: rgba(0, 0, 0, 0.2); } .theme-black .search .sidebar-form input::-webkit-input-placeholder, .theme-blue .search .sidebar-form input::-webkit-input-placeholder, .theme-green .search .sidebar-form input::-webkit-input-placeholder, .theme-purple .search .sidebar-form input::-webkit-input-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search .sidebar-form input:-moz-placeholder, .theme-blue .search .sidebar-form input:-moz-placeholder, .theme-green .search .sidebar-form input:-moz-placeholder, .theme-purple .search .sidebar-form input:-moz-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search .sidebar-form input::-moz-placeholder, .theme-blue .search .sidebar-form input::-moz-placeholder, .theme-green .search .sidebar-form input::-moz-placeholder, .theme-purple .search .sidebar-form input::-moz-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search .sidebar-form input:-ms-input-placeholder, .theme-blue .search .sidebar-form input:-ms-input-placeholder, .theme-green .search .sidebar-form input:-ms-input-placeholder, .theme-purple .search .sidebar-form input:-ms-input-placeholder { color: rgba(255, 255, 255, 0.5); } .theme-black .search input[type=\"text\"], .theme-blue .search input[type=\"text\"], .theme-green .search input[type=\"text\"], .theme-purple .search input[type=\"text\"] { color: #666; } .theme-black .search input[type=\"text\"] + .input-group-btn .btn, .theme-blue .search input[type=\"text\"] + .input-group-btn .btn, .theme-green .search input[type=\"text\"] + .input-group-btn .btn, .theme-purple .search input[type=\"text\"] + .input-group-btn .btn { color: rgba(255, 255, 255, 0.5); } .theme-black .search input[type=\"text\"]:focus, .theme-black .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-blue .search input[type=\"text\"]:focus, .theme-blue .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-green .search input[type=\"text\"]:focus, .theme-green .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-purple .search input[type=\"text\"]:focus, .theme-purple .search input[type=\"text\"]:focus + .input-group-btn .btn { background-color: #fff; color: #666; } .theme-black .header { background: #1a2433; background: -webkit-linear-gradient(left, #1a2433 0%, #253449 80%, #253449 100%); background: -webkit-gradient(linear, left top, right top, from(#1a2433), color-stop(80%, #253449), to(#253449)); background: linear-gradient(to right, #1a2433 0%, #253449 80%, #253449 100%); } .theme-blue .header { background: #0062c5; background: -webkit-linear-gradient(left, #0062c5 0%, #0073e6 80%, #0073e6 100%); background: -webkit-gradient(linear, left top, right top, from(#0062c5), color-stop(80%, #0073e6), to(#0073e6)); background: linear-gradient(to right, #0062c5 0%, #0073e6 80%, #0073e6 100%); } .theme-green .header { background: #08a283; background: -webkit-linear-gradient(left, #08a283 0%, #0ac29d 80%, #0ac29d 100%); background: -webkit-gradient(linear, left top, right top, from(#08a283), color-stop(80%, #0ac29d), to(#0ac29d)); background: linear-gradient(to right, #08a283 0%, #0ac29d 80%, #0ac29d 100%); } .theme-purple .header { background: #494683; background: -webkit-linear-gradient(left, #494683 0%, #555299 80%, #555299 100%); background: -webkit-gradient(linear, left top, right top, from(#494683), color-stop(80%, #555299), to(#555299)); background: linear-gradient(to right, #494683 0%, #555299 80%, #555299 100%); } @media (min-width: 767px) { .modal-center { text-align: center; padding: 0 !important; } .modal-center:before { content: ''; display: inline-block; height: 100%; vertical-align: middle; margin-right: -4px; } .modal-center .modal-dialog { display: inline-block; text-align: left; vertical-align: middle; } .donate-box .donate-footer { margin: 0 -15px -16px -15px; } } @media (min-width: 768px) { .lead { font-size: 21px; } .dl-horizontal dt { float: left; width: 160px; clear: left; text-align: right; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } .dl-horizontal dd { margin-left: 180px; } .container { width: 750px; } .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 { float: left; } .col-sm-1 { width: 8.33333%; } .col-sm-2 { width: 16.66667%; } .col-sm-3 { width: 25%; } .col-sm-4 { width: 33.33333%; } .col-sm-5 { width: 41.66667%; } .col-sm-6 { width: 50%; } .col-sm-7 { width: 58.33333%; } .col-sm-8 { width: 66.66667%; } .col-sm-9 { width: 75%; } .col-sm-10 { width: 83.33333%; } .col-sm-11 { width: 91.66667%; } .col-sm-12 { width: 100%; } .col-sm-pull-0 { right: auto; } .col-sm-pull-1 { right: 8.33333%; } .col-sm-pull-2 { right: 16.66667%; } .col-sm-pull-3 { right: 25%; } .col-sm-pull-4 { right: 33.33333%; } .col-sm-pull-5 { right: 41.66667%; } .col-sm-pull-6 { right: 50%; } .col-sm-pull-7 { right: 58.33333%; } .col-sm-pull-8 { right: 66.66667%; } .col-sm-pull-9 { right: 75%; } .col-sm-pull-10 { right: 83.33333%; } .col-sm-pull-11 { right: 91.66667%; } .col-sm-pull-12 { right: 100%; } .col-sm-push-0 { left: auto; } .col-sm-push-1 { left: 8.33333%; } .col-sm-push-2 { left: 16.66667%; } .col-sm-push-3 { left: 25%; } .col-sm-push-4 { left: 33.33333%; } .col-sm-push-5 { left: 41.66667%; } .col-sm-push-6 { left: 50%; } .col-sm-push-7 { left: 58.33333%; } .col-sm-push-8 { left: 66.66667%; } .col-sm-push-9 { left: 75%; } .col-sm-push-10 { left: 83.33333%; } .col-sm-push-11 { left: 91.66667%; } .col-sm-push-12 { left: 100%; } .col-sm-offset-0 { margin-left: 0%; } .col-sm-offset-1 { margin-left: 8.33333%; } .col-sm-offset-2 { margin-left: 16.66667%; } .col-sm-offset-3 { margin-left: 25%; } .col-sm-offset-4 { margin-left: 33.33333%; } .col-sm-offset-5 { margin-left: 41.66667%; } .col-sm-offset-6 { margin-left: 50%; } .col-sm-offset-7 { margin-left: 58.33333%; } .col-sm-offset-8 { margin-left: 66.66667%; } .col-sm-offset-9 { margin-left: 75%; } .col-sm-offset-10 { margin-left: 83.33333%; } .col-sm-offset-11 { margin-left: 91.66667%; } .col-sm-offset-12 { margin-left: 100%; } .navbar-right .dropdown-menu { right: 0; left: auto; } .navbar-right .dropdown-menu-left { left: 0; right: auto; } .nav-justified > li, .nav-tabs.nav-justified > li { display: table-cell; width: 1%; } .nav-justified > li > a, .nav-tabs.nav-justified > li > a { margin-bottom: 0; } .nav-tabs-justified > li > a, .nav-tabs.nav-justified > li > a { border-bottom: 1px solid #f2f2f2; border-radius: 4px 4px 0 0; } .nav-tabs-justified > .active > a, .nav-tabs.nav-justified > .active > a, .nav-tabs-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:hover, .nav-tabs-justified > .active > a:focus, .nav-tabs.nav-justified > .active > a:focus { border-bottom-color: #fff; } .navbar { border-radius: 4px; } .navbar-header { float: left; } .navbar-collapse { width: auto; border-top: 0; -webkit-box-shadow: none; box-shadow: none; } .navbar-collapse.collapse { display: block !important; height: auto !important; padding-bottom: 0; overflow: visible !important; } .navbar-collapse.in { overflow-y: visible; } .navbar-fixed-top .navbar-collapse, .navbar-static-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse { padding-left: 0; padding-right: 0; } .container > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-header, .container-fluid > .navbar-collapse { margin-right: 0; margin-left: 0; } .navbar-static-top { border-radius: 0; } .navbar-fixed-top, .navbar-fixed-bottom { border-radius: 0; } .navbar > .container .navbar-brand, .navbar > .container-fluid .navbar-brand { margin-left: -15px; } .navbar-toggle { display: none; } .navbar-nav { float: left; margin: 0; } .navbar-nav > li { float: left; } .navbar-nav > li > a { padding-top: 14.5px; padding-bottom: 14.5px; } .navbar-form .form-group { display: inline-block; margin-bottom: 0; vertical-align: middle; } .navbar-form .form-control { display: inline-block; width: auto; vertical-align: middle; } .navbar-form .form-control-static { display: inline-block; } .navbar-form .input-group { display: inline-table; vertical-align: middle; } .navbar-form .input-group .input-group-addon, .navbar-form .input-group .input-group-btn, .navbar-form .input-group .form-control { width: auto; } .navbar-form .input-group > .form-control { width: 100%; } .navbar-form .control-label { margin-bottom: 0; vertical-align: middle; } .navbar-form .radio, .navbar-form .checkbox { display: inline-block; margin-top: 0; margin-bottom: 0; vertical-align: middle; } .navbar-form .radio label, .navbar-form .checkbox label { padding-left: 0; } .navbar-form .radio input[type=\"radio\"], .navbar-form .checkbox input[type=\"checkbox\"] { position: relative; margin-left: 0; } .navbar-form .has-feedback .form-control-feedback { top: 0; } .navbar-form { width: auto; border: 0; margin-left: 0; margin-right: 0; padding-top: 0; padding-bottom: 0; -webkit-box-shadow: none; box-shadow: none; } .navbar-text { float: left; margin-left: 15px; margin-right: 15px; } .navbar-left { float: left !important; } .navbar-right { float: right !important; margin-right: -15px; } .navbar-right ~ .navbar-right { margin-right: 0; } .modal-dialog { width: 600px; margin: 30px auto; } .modal-content { -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05); } .modal-sm { width: 300px; } .header { position: fixed; top: 0; bottom: 0; left: 0; z-index: 1000; display: block; padding: 0; overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */ border-right: 1px solid #f6f6f6; width: 4.16667%; } .sidebar { position: fixed; top: 0; bottom: 0; left: 0; display: block; padding: 0; overflow-x: hidden; overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */ border-right: 1px solid #f6f6f6; width: 33.33333%; } .main { width: 62.5%; padding-right: 20px; padding-left: 20px; } .footer { position: fixed; left: 0; bottom: 0; background-color: transparent; z-index: 1050; width: 4.16667%; } body.main-center .main { margin-left: 4.16667%; } body.main-left .sidebar { margin-right: 4.16667%; } body.main-right .sidebar { margin-left: 4.16667%; } body.main-right .main { margin-left: 37.5%; } body.no-sidebar.main-left .main { width: 95.83333333%; margin-right: 4.16667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 95.83333333%; margin-left: 4.16667%; } .header .navbar-header { float: none; } #avatar img { padding: 5px; } .bar.bar-footer:before { width: -webkit-calc(100% + 40px); width: calc(100% + 40px); left: -20px; } .header .social-links { display: none; } } @media (min-width: 992px) { .slimContent{ margin-top: 20px; } .container { width: 970px; } .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 { float: left; } .col-md-1 { width: 8.33333%; } .col-md-2 { width: 16.66667%; } .col-md-3 { width: 25%; } .col-md-4 { width: 33.33333%; } .col-md-5 { width: 41.66667%; } .col-md-6 { width: 50%; } .col-md-7 { width: 58.33333%; } .col-md-8 { width: 66.66667%; } .col-md-9 { width: 75%; } .col-md-10 { width: 83.33333%; } .col-md-11 { width: 91.66667%; } .col-md-12 { width: 100%; } .col-md-pull-0 { right: auto; } .col-md-pull-1 { right: 8.33333%; } .col-md-pull-2 { right: 16.66667%; } .col-md-pull-3 { right: 25%; } .col-md-pull-4 { right: 33.33333%; } .col-md-pull-5 { right: 41.66667%; } .col-md-pull-6 { right: 50%; } .col-md-pull-7 { right: 58.33333%; } .col-md-pull-8 { right: 66.66667%; } .col-md-pull-9 { right: 75%; } .col-md-pull-10 { right: 83.33333%; } .col-md-pull-11 { right: 91.66667%; } .col-md-pull-12 { right: 100%; } .col-md-push-0 { left: auto; } .col-md-push-1 { left: 8.33333%; } .col-md-push-2 { left: 16.66667%; } .col-md-push-3 { left: 25%; } .col-md-push-4 { left: 33.33333%; } .col-md-push-5 { left: 41.66667%; } .col-md-push-6 { left: 50%; } .col-md-push-7 { left: 58.33333%; } .col-md-push-8 { left: 66.66667%; } .col-md-push-9 { left: 75%; } .col-md-push-10 { left: 83.33333%; } .col-md-push-11 { left: 91.66667%; } .col-md-push-12 { left: 100%; } .col-md-offset-0 { margin-left: 0%; } .col-md-offset-1 { margin-left: 8.33333%; } .col-md-offset-2 { margin-left: 16.66667%; } .col-md-offset-3 { margin-left: 25%; } .col-md-offset-4 { margin-left: 33.33333%; } .col-md-offset-5 { margin-left: 41.66667%; } .col-md-offset-6 { margin-left: 50%; } .col-md-offset-7 { margin-left: 58.33333%; } .col-md-offset-8 { margin-left: 66.66667%; } .col-md-offset-9 { margin-left: 75%; } .col-md-offset-10 { margin-left: 83.33333%; } .col-md-offset-11 { margin-left: 91.66667%; } .col-md-offset-12 { margin-left: 100%; } .modal-lg { width: 900px; } .header { width: 16.66667%; } .sidebar { width: 25%; } .sidebar .slimContent { padding-right: 25px; padding-left: 25px; } .main { width: 58.33333%; padding-right: 25px; padding-left: 25px; } .footer { width: 16.66667%; } body.main-center .main { margin-left: 16.66667%; } body.main-left .sidebar { margin-right: 16.66667%; } body.main-right .sidebar { margin-left: 16.66667%; } body.main-right .main { margin-left: 41.66667%; } body.no-sidebar.main-left .main { width: 83.33333333%; margin-right: 16.66667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 83.33333333%; margin-left: 16.66667%; } .bar.bar-footer:before { width: -webkit-calc(100% + 50px); width: calc(100% + 50px); left: -25px; } .marked-body .headerlink:before, .marked-body .markdownIt-Anchor:before { display: inline-block; width: 18px; content: \"#\"; color: #0a6ebd; text-align: right; float: left; visibility: hidden; } .marked-body .headerlink:before { margin-left: -15px; padding-right: 2px; } .marked-body .markdownIt-Anchor:before { margin-left: -20px; } .marked-body h1:hover .headerlink:before, .marked-body h1:hover .markdownIt-Anchor:before, .marked-body h2:hover .headerlink:before, .marked-body h2:hover .markdownIt-Anchor:before, .marked-body h3:hover .headerlink:before, .marked-body h3:hover .markdownIt-Anchor:before, .marked-body h4:hover .headerlink:before, .marked-body h4:hover .markdownIt-Anchor:before, .marked-body h5:hover .headerlink:before, .marked-body h5:hover .markdownIt-Anchor:before, .marked-body h6:hover .headerlink:before, .marked-body h6:hover .markdownIt-Anchor:before { visibility: visible; } } @media (min-width: 1200px) { .container { width: 1170px; } .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 { float: left; } .col-lg-1 { width: 8.33333%; } .col-lg-2 { width: 16.66667%; } .col-lg-3 { width: 25%; } .col-lg-4 { width: 33.33333%; } .col-lg-5 { width: 41.66667%; } .col-lg-6 { width: 50%; } .col-lg-7 { width: 58.33333%; } .col-lg-8 { width: 66.66667%; } .col-lg-9 { width: 75%; } .col-lg-10 { width: 83.33333%; } .col-lg-11 { width: 91.66667%; } .col-lg-12 { width: 100%; } .col-lg-pull-0 { right: auto; } .col-lg-pull-1 { right: 8.33333%; } .col-lg-pull-2 { right: 16.66667%; } .col-lg-pull-3 { right: 25%; } .col-lg-pull-4 { right: 33.33333%; } .col-lg-pull-5 { right: 41.66667%; } .col-lg-pull-6 { right: 50%; } .col-lg-pull-7 { right: 58.33333%; } .col-lg-pull-8 { right: 66.66667%; } .col-lg-pull-9 { right: 75%; } .col-lg-pull-10 { right: 83.33333%; } .col-lg-pull-11 { right: 91.66667%; } .col-lg-pull-12 { right: 100%; } .col-lg-push-0 { left: auto; } .col-lg-push-1 { left: 8.33333%; } .col-lg-push-2 { left: 16.66667%; } .col-lg-push-3 { left: 25%; } .col-lg-push-4 { left: 33.33333%; } .col-lg-push-5 { left: 41.66667%; } .col-lg-push-6 { left: 50%; } .col-lg-push-7 { left: 58.33333%; } .col-lg-push-8 { left: 66.66667%; } .col-lg-push-9 { left: 75%; } .col-lg-push-10 { left: 83.33333%; } .col-lg-push-11 { left: 91.66667%; } .col-lg-push-12 { left: 100%; } .col-lg-offset-0 { margin-left: 0%; } .col-lg-offset-1 { margin-left: 8.33333%; } .col-lg-offset-2 { margin-left: 16.66667%; } .col-lg-offset-3 { margin-left: 25%; } .col-lg-offset-4 { margin-left: 33.33333%; } .col-lg-offset-5 { margin-left: 41.66667%; } .col-lg-offset-6 { margin-left: 50%; } .col-lg-offset-7 { margin-left: 58.33333%; } .col-lg-offset-8 { margin-left: 66.66667%; } .col-lg-offset-9 { margin-left: 75%; } .col-lg-offset-10 { margin-left: 83.33333%; } .col-lg-offset-11 { margin-left: 91.66667%; } .col-lg-offset-12 { margin-left: 100%; } .visible-lg { display: block !important; } table.visible-lg { display: table !important; } tr.visible-lg { display: table-row !important; } th.visible-lg, td.visible-lg { display: table-cell !important; } .visible-lg-block { display: block !important; } .visible-lg-inline { display: inline !important; } .visible-lg-inline-block { display: inline-block !important; } .hidden-lg { display: none !important; } .header { width: 16.66667%; } .sidebar { width: 23%; } .sidebar .slimContent { padding-right: 30px; padding-left: 30px; } .main { width: 60.33333%; padding-right: 30px; padding-left: 30px; } .footer { width: 16.66667%; } body.main-center .main { margin-left: 16.66667%; } body.main-left .sidebar { margin-right: 16.66667%; } body.main-right .sidebar { margin-left: 16.66667%; } body.main-right .main { margin-left: 39.66667%; } body.no-sidebar.main-left .main { width: 83.33333333%; margin-right: 16.66667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 83.33333333%; margin-left: 16.66667%; } .main-nav > li > a { padding: 10px 20px; } .bar.bar-footer:before { width: -webkit-calc(100% + 60px); width: calc(100% + 60px); left: -30px; } } @media (min-width: 1440px) { .header { width: 16.66667%; } .sidebar { width: 21%; } .main { width: 62.33333%; } .footer { width: 16.66667%; } body.main-center .main { margin-left: 16.66667%; } body.main-left .sidebar { margin-right: 16.66667%; } body.main-right .sidebar { margin-left: 16.66667%; } body.main-right .main { margin-left: 37.66667%; } body.no-sidebar.main-left .main { width: 83.33333333%; margin-right: 16.66667%; } body.no-sidebar.main-right .main, body.no-sidebar.main-center .main { width: 83.33333333%; margin-left: 16.66667%; } .header #title { font-size: 15px; } } @media (max-width: 1199px) { .main-nav > li > a { padding: 6px 20px; } .bar .pager li a span { display: none; } .footer .copyright { display: none; } } @media (max-width: 767px) { .navbar-nav .open .dropdown-menu { position: static; float: none; width: auto; margin-top: 0; background-color: transparent; border: 0; -webkit-box-shadow: none; box-shadow: none; } .navbar-nav .open .dropdown-menu > li > a, .navbar-nav .open .dropdown-menu .dropdown-header { padding: 5px 15px 5px 25px; } .navbar-nav .open .dropdown-menu > li > a { line-height: 21px; } .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-nav .open .dropdown-menu > li > a:focus { background-image: none; } .navbar-form .form-group { margin-bottom: 5px; } .navbar-form .form-group:last-child { margin-bottom: 0; } .navbar-default .navbar-nav .open .dropdown-menu > li > a { color: #777; } .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus { color: #333; background-color: transparent; } .navbar-default .navbar-nav .open .dropdown-menu > .active > a, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus { color: #555; background-color: #e7e7e7; } .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus { color: #ccc; background-color: transparent; } .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header { border-color: #090909; } .navbar-inverse .navbar-nav .open .dropdown-menu .divider { background-color: #090909; } .navbar-inverse .navbar-nav .open .dropdown-menu > li > a { color: #9d9d9d; } .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus { color: #fff; background-color: transparent; } .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus { color: #fff; background-color: #090909; } .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus { color: #444; background-color: transparent; } .visible-xs { display: block !important; } table.visible-xs { display: table !important; } tr.visible-xs { display: table-row !important; } th.visible-xs, td.visible-xs { display: table-cell !important; } .visible-xs-block { display: block !important; } .visible-xs-inline { display: inline !important; } .visible-xs-inline-block { display: inline-block !important; } .hidden-xs { display: none !important; } body { padding-top: 53px; } .list-circle-num, .list-square-num { margin: 0 0 40px; } .modal-xs-full .modal-dialog, .modal-xs-full .modal-content { height: 100%; width: 100%; margin: 0; border-radius: 0; -webkit-box-shadow: none; box-shadow: none; } .modal-xs-full .modal-dialog .donate-box, .modal-xs-full .modal-content .donate-box { padding-top: 50px; } .highlight table:before { display: block; content: ' '; height: 38px; position: absolute; top: 0; left: 0; right: 0; margin-left: -10px; margin-right: -10px; margin-top: -38px; background-color: #f6f6f6; border-top-left-radius: 4px; border-top-right-radius: 4px; } .header { position: fixed; left: 0; right: 0; top: 0; width: 100%; z-index: 1050; } .header:before, .header:after { content: \" \"; display: table; } .header:after { clear: both; } .sidebar { display: none; } .main { min-height: auto; } .main-nav > li > a { padding: 10px 20px; } .sidebar-form { border: 0; margin: 9px 45px 9px 0; } .sidebar-form .input-group-btn .btn { color: #2196f3; } .sidebar-form input[type=\"text\"]:focus { background-color: transparent; } .sidebar-form input[type=\"text\"]:focus + .input-group-btn .btn { color: #2196f3; background-color: transparent; } .header .navbar-toggle { position: absolute; top: 0; right: 0; margin-right: 5px; } .header .navbar-toggle .icon-bar { width: 18px; } .header .search { width: 90%; float: right; } .header .profile-block { padding: 0; margin: 10px 0; width: 8.33333%; float: left; } .header #avatar { width: 32px; height: 32px; } .header #name, .header #title, .header #location { display: none; } #main-navbar { position: absolute; width: 100%; background-color: #fbfbfb; border-bottom: 1px solid #f6f6f6; z-index: 99; } .main .content { min-height: auto; } .sidebar-toc.in { position: fixed; top: 50px; bottom: 50px; z-index: 9; } .bar.bar-footer { top: auto !important; bottom: 0 !important; } .footer { display: none; position: static; } .footer .copyright { display: block; } .social-links .tooltip { display: none !important; visibility: hidden; } .theme-black .search input[type=\"text\"]:focus, .theme-blue .search input[type=\"text\"]:focus, .theme-green .search input[type=\"text\"]:focus, .theme-purple .search input[type=\"text\"]:focus { background-color: transparent; } .theme-black .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-blue .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-green .search input[type=\"text\"]:focus + .input-group-btn .btn, .theme-purple .search input[type=\"text\"]:focus + .input-group-btn .btn { color: rgba(255, 255, 255, 0.5); background-color: transparent; } .theme-black #main-navbar { background: #1a2433; background: -webkit-linear-gradient(left, #1a2433 0%, #253449 80%, #253449 100%); background: -webkit-gradient(linear, left top, right top, from(#1a2433), color-stop(80%, #253449), to(#253449)); background: linear-gradient(to right, #1a2433 0%, #253449 80%, #253449 100%); } .theme-blue #main-navbar { background: #0062c5; background: -webkit-linear-gradient(left, #0062c5 0%, #0073e6 80%, #0073e6 100%); background: -webkit-gradient(linear, left top, right top, from(#0062c5), color-stop(80%, #0073e6), to(#0073e6)); background: linear-gradient(to right, #0062c5 0%, #0073e6 80%, #0073e6 100%); } .theme-green #main-navbar { background: #08a283; background: -webkit-linear-gradient(left, #08a283 0%, #0ac29d 80%, #0ac29d 100%); background: -webkit-gradient(linear, left top, right top, from(#08a283), color-stop(80%, #0ac29d), to(#0ac29d)); background: linear-gradient(to right, #08a283 0%, #0ac29d 80%, #0ac29d 100%); } .theme-purple #main-navbar { background: #494683; background: -webkit-linear-gradient(left, #494683 0%, #555299 80%, #555299 100%); background: -webkit-gradient(linear, left top, right top, from(#494683), color-stop(80%, #555299), to(#555299)); background: linear-gradient(to right, #494683 0%, #555299 80%, #555299 100%); } } @media screen and (max-width: 559px),screen and (max-height: 479px) { .ins-search-container { top: 0; left: 0; margin: 0; width: 100%; height: 100%; background: #f7f7f7; } } @media (max-width: 480px) { .header #avatar { width: 24px; height: 24px; margin-top: 3px; margin-left: 15px; } } @media (min-width: 768px) and (max-width: 991px) { .visible-sm { display: block !important; } table.visible-sm { display: table !important; } tr.visible-sm { display: table-row !important; } th.visible-sm, td.visible-sm { display: table-cell !important; } .visible-sm-block { display: block !important; } .visible-sm-inline { display: inline !important; } .visible-sm-inline-block { display: inline-block !important; } .hidden-sm { display: none !important; } .sidebar-form { display: none; } .header .main-nav > li > a { text-align: center; padding-left: 0; padding-right: 0; } .header .main-nav > li > a span { display: none; } .header .profile-block { padding-top: 10px; padding-left: 0; padding-right: 0; } .header #avatar { width: 32px; height: 32px; } .footer { padding-left: 0; padding-right: 0; } .social-links { display: block; width: 100%; text-align: center; margin-bottom: 0; } .social-links:before, .social-links:after { content: \" \"; display: table; } .social-links:after { clear: both; } .social-links li { display: block; margin-left: 0; margin-top: 10px; } .social-links li:before, .social-links li:after { content: \" \"; display: table; } .social-links li:after { clear: both; } .social-links .tooltip { display: none !important; visibility: hidden; } } @media (min-width: 992px) and (max-width: 1199px) { .visible-md { display: block !important; } table.visible-md { display: table !important; } tr.visible-md { display: table-row !important; } th.visible-md, td.visible-md { display: table-cell !important; } .visible-md-block { display: block !important; } .visible-md-inline { display: inline !important; } .visible-md-inline-block { display: inline-block !important; } .hidden-md { display: none !important; } } @media print { *, *:before, *:after { background: transparent !important; color: #000 !important; -webkit-box-shadow: none !important; box-shadow: none !important; text-shadow: none !important; } a, a:visited { text-decoration: underline; } a[href]:after { content: \" (\" attr(href) \")\"; } abbr[title]:after { content: \" (\" attr(title) \")\"; } a[href^=\"#\"]:after, a[href^=\"javascript:\"]:after { content: \"\"; } pre, blockquote { border: 1px solid #999; page-break-inside: avoid; } thead { display: table-header-group; } tr, img { page-break-inside: avoid; } img { max-width: 100% !important; } p, h2, h3 { orphans: 3; widows: 3; } h2, h3 { page-break-after: avoid; } .navbar { display: none; } .btn > .caret, .dropup > .btn > .caret { border-top-color: #000 !important; } .label { border: 1px solid #000; } .table { border-collapse: collapse !important; } .table td, .table th { background-color: #fff !important; } .table-bordered th, .table-bordered td { border: 1px solid #ddd !important; } .visible-print { display: block !important; } table.visible-print { display: table !important; } tr.visible-print { display: table-row !important; } th.visible-print, td.visible-print { display: table-cell !important; } .visible-print-block { display: block !important; } .visible-print-inline { display: inline !important; } .visible-print-inline-block { display: inline-block !important; } .hidden-print { display: none !important; } } @media (max-device-width: 480px) and (orientation: landscape) { .navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse { max-height: 200px; } }"},{"title":"","date":"2022-06-24T17:19:04.496Z","updated":"2022-06-24T17:19:04.496Z","comments":true,"path":"css/style.min.css","permalink":"http://fyupeng.github.io/css/style.min.css","excerpt":"","text":"@charset \"UTF-8\";/*! * Bootstrap v3.3.7 (http://getbootstrap.com) * Copyright 2011-2016 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}b,optgroup,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0}mark{background:#ff0;color:#000}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0;vertical-align:middle}svg:not(:root){overflow:hidden}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}textarea{overflow:auto}td,th{padding:0}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */*,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:transparent}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}figure{margin:0}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.57143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:21px;margin-bottom:21px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:21px;margin-bottom:10.5px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:10.5px;margin-bottom:10.5px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:30px}.h2,h2{font-size:26px}.h3,h3{font-size:22px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 10.5px}.lead{margin-bottom:21px;font-size:16px;font-weight:300;line-height:1.4}.small,small{font-size:85%}.mark,mark{background-color:#fcf8e3;padding:.2em}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-lowercase{text-transform:lowercase}.initialism,.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777!important}.text-primary{color:#2196f3}a.text-primary:focus,a.text-primary:hover{color:#0c7cd5}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#2196f3}a.bg-primary:focus,a.bg-primary:hover{background-color:#0c7cd5}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:9.5px;margin:42px 0 21px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:10.5px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none;margin-left:-5px}.list-inline>li{display:inline-block;padding-left:5px;padding-right:5px}dl{margin-top:0;margin-bottom:21px}dd,dt{line-height:1.57143}dt{font-weight:700}dd{margin-left:0}.dl-horizontal dd:after,.dl-horizontal dd:before{content:\" \";display:table}.dl-horizontal dd:after{clear:both}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%}blockquote{padding:10.5px 16px;margin:0 0 21px;border:1px dotted #eee;border-left:3px solid #eee;background-color:#fbfbfb}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.57143;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\\2014 \\00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0;text-align:right}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\\00A0 \\2014'}address{margin-bottom:21px;font-style:normal;line-height:1.57143}.container{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container:after,.container:before{content:\" \";display:table}.container:after{clear:both}.container-fluid{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container-fluid:after,.container-fluid:before{content:\" \";display:table}.container-fluid:after{clear:both}.row{margin-left:-15px;margin-right:-15px}.row:after,.row:before{content:\" \";display:table}.row:after{clear:both}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-left:15px;padding-right:15px}.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{float:left}.col-xs-1{width:8.33333%}.col-xs-2{width:16.66667%}.col-xs-3{width:25%}.col-xs-4{width:33.33333%}.col-xs-5{width:41.66667%}.col-xs-6{width:50%}.col-xs-7{width:58.33333%}.col-xs-8{width:66.66667%}.col-xs-9{width:75%}.col-xs-10{width:83.33333%}.col-xs-11{width:91.66667%}.col-xs-12{width:100%}.col-xs-pull-0{right:auto}.col-xs-pull-1{right:8.33333%}.col-xs-pull-2{right:16.66667%}.col-xs-pull-3{right:25%}.col-xs-pull-4{right:33.33333%}.col-xs-pull-5{right:41.66667%}.col-xs-pull-6{right:50%}.col-xs-pull-7{right:58.33333%}.col-xs-pull-8{right:66.66667%}.col-xs-pull-9{right:75%}.col-xs-pull-10{right:83.33333%}.col-xs-pull-11{right:91.66667%}.col-xs-pull-12{right:100%}.col-xs-push-0{left:auto}.col-xs-push-1{left:8.33333%}.col-xs-push-2{left:16.66667%}.col-xs-push-3{left:25%}.col-xs-push-4{left:33.33333%}.col-xs-push-5{left:41.66667%}.col-xs-push-6{left:50%}.col-xs-push-7{left:58.33333%}.col-xs-push-8{left:66.66667%}.col-xs-push-9{left:75%}.col-xs-push-10{left:83.33333%}.col-xs-push-11{left:91.66667%}.col-xs-push-12{left:100%}.col-xs-offset-0{margin-left:0}.col-xs-offset-1{margin-left:8.33333%}.col-xs-offset-2{margin-left:16.66667%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-4{margin-left:33.33333%}.col-xs-offset-5{margin-left:41.66667%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-7{margin-left:58.33333%}.col-xs-offset-8{margin-left:66.66667%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-10{margin-left:83.33333%}.col-xs-offset-11{margin-left:91.66667%}.col-xs-offset-12{margin-left:100%}.btn{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.57143;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}.btn.active,.btn:active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active,.btn-default:active,.open>.btn-default.dropdown-toggle{color:#333;background-color:#e6e6e6;border-color:#adadad;background-image:none}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.btn-default.dropdown-toggle.focus,.open>.btn-default.dropdown-toggle:focus,.open>.btn-default.dropdown-toggle:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#2196f3;border-color:#0d8aee}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#0c7cd5;border-color:#064475}.btn-primary:hover{color:#fff;background-color:#0c7cd5;border-color:#0a68b4}.btn-primary.active,.btn-primary:active,.open>.btn-primary.dropdown-toggle{color:#fff;background-color:#0c7cd5;border-color:#0a68b4;background-image:none}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.btn-primary.dropdown-toggle.focus,.open>.btn-primary.dropdown-toggle:focus,.open>.btn-primary.dropdown-toggle:hover{color:#fff;background-color:#0a68b4;border-color:#064475}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#2196f3;border-color:#0d8aee}.btn-primary .badge{color:#2196f3;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active,.btn-success:active,.open>.btn-success.dropdown-toggle{color:#fff;background-color:#449d44;border-color:#398439;background-image:none}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.btn-success.dropdown-toggle.focus,.open>.btn-success.dropdown-toggle:focus,.open>.btn-success.dropdown-toggle:hover{color:#fff;background-color:#398439;border-color:#255625}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#56ccf2;border-color:#3ec5f0}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#27beee;border-color:#0d7ea3}.btn-info:hover{color:#fff;background-color:#27beee;border-color:#11aee0}.btn-info.active,.btn-info:active,.open>.btn-info.dropdown-toggle{color:#fff;background-color:#27beee;border-color:#11aee0;background-image:none}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.btn-info.dropdown-toggle.focus,.open>.btn-info.dropdown-toggle:focus,.open>.btn-info.dropdown-toggle:hover{color:#fff;background-color:#11aee0;border-color:#0d7ea3}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#56ccf2;border-color:#3ec5f0}.btn-info .badge{color:#56ccf2;background-color:#fff}.btn-warning{color:#fff;background-color:#f09819;border-color:#e18b0f}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#c97c0d;border-color:#694107}.btn-warning:hover{color:#fff;background-color:#c97c0d;border-color:#a7670b}.btn-warning.active,.btn-warning:active,.open>.btn-warning.dropdown-toggle{color:#fff;background-color:#c97c0d;border-color:#a7670b;background-image:none}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.btn-warning.dropdown-toggle.focus,.open>.btn-warning.dropdown-toggle:focus,.open>.btn-warning.dropdown-toggle:hover{color:#fff;background-color:#a7670b;border-color:#694107}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f09819;border-color:#e18b0f}.btn-warning .badge{color:#f09819;background-color:#fff}.btn-danger{color:#fff;background-color:#ff512f;border-color:#ff3c16}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#fb2900;border-color:#951800}.btn-danger:hover{color:#fff;background-color:#fb2900;border-color:#d72300}.btn-danger.active,.btn-danger:active,.open>.btn-danger.dropdown-toggle{color:#fff;background-color:#fb2900;border-color:#d72300;background-image:none}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.btn-danger.dropdown-toggle.focus,.open>.btn-danger.dropdown-toggle:focus,.open>.btn-danger.dropdown-toggle:hover{color:#fff;background-color:#d72300;border-color:#951800}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#ff512f;border-color:#ff3c16}.btn-danger .badge{color:#ff512f;background-color:#fff}.btn-link{color:#2196f3;font-weight:400;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#0a6ebd;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-lg{padding:10px 16px;font-size:18px;line-height:1.33333;border-radius:6px}.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-property:height,visibility;transition-property:height,visibility;-webkit-transition-duration:.35s;transition-duration:.35s;-webkit-transition-timing-function:ease;transition-timing-function:ease}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;font-size:14px;text-align:left;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9.5px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.57143;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{text-decoration:none;color:#262626;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;outline:0;background-color:#2196f3}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);cursor:not-allowed}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{left:auto;right:0}.dropdown-menu-left{left:0;right:auto}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.57143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px dashed;border-bottom:4px solid\\9;content:\"\"}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-left:0;padding-right:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.input-group-addon.btn{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.input-group-addon.btn{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{margin-bottom:0;padding-left:0;list-style:none}.nav:after,.nav:before{content:\" \";display:table}.nav:after{clear:both}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;background-color:transparent;cursor:not-allowed}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#2196f3}.nav .nav-divider{height:1px;margin:9.5px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #f2f2f2}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.57143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #f2f2f2}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;background-color:#fff;border:1px solid #f2f2f2;border-bottom-color:transparent;cursor:default}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#2196f3}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified,.nav-tabs.nav-justified{width:100%}.nav-justified>li,.nav-tabs.nav-justified>li{float:none}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}.nav-tabs-justified,.nav-tabs.nav-justified{border-bottom:0}.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #f2f2f2}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:21px;border:1px solid transparent}.navbar:after,.navbar:before{content:\" \";display:table}.navbar:after{clear:both}.navbar-header:after,.navbar-header:before{content:\" \";display:table}.navbar-header:after{clear:both}.navbar-collapse{overflow-x:visible;padding-right:15px;padding-left:15px;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1);-webkit-overflow-scrolling:touch}.navbar-collapse:after,.navbar-collapse:before{content:\" \";display:table}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}.navbar-static-top{z-index:1000;border-width:0 0 1px}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:14.5px 15px;font-size:18px;line-height:21px;height:50px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}.navbar-toggle{position:relative;float:right;margin-right:15px;padding:10px;margin-top:8px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:3px}.navbar-nav{margin:7.25px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:21px}.navbar-form{padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);margin:7.5px -15px}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-radius:4px 4px 0 0}.navbar-btn{margin-top:7.5px;margin-bottom:7.5px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:14.5px;margin-bottom:14.5px}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{background-color:#e7e7e7;color:#555}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#090909}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>li>a,.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{background-color:#090909;color:#fff}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.pager{padding-left:0;margin:21px 0;list-style:none;text-align:center}.pager:after,.pager:before{content:\" \";display:table}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;background-color:#fff;cursor:not-allowed}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;color:#fff;line-height:1;vertical-align:middle;white-space:nowrap;text-align:center;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#2196f3;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.thumbnail{display:block;padding:4px;margin-bottom:21px;line-height:1.57143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto;margin-left:auto;margin-right:auto}.thumbnail .caption{padding:9px;color:#333}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#2196f3}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{zoom:1;overflow:hidden}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle,.media-middle .media-body,.media-middle .media-left,.media-middle .media-right{vertical-align:middle}.media-bottom,.media-bottom .media-body,.media-bottom .media-left,.media-bottom .media-right{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;left:0;bottom:0;height:100%;width:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:24px;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:0 0;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{display:none;overflow:hidden;position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);transform:translate(0,-25%);-webkit-transition:-webkit-transform .3s ease-out;transition:-webkit-transform .3s ease-out;transition:transform .3s ease-out;transition:transform .3s ease-out,-webkit-transform .3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;border-radius:6px;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.05);box-shadow:0 3px 9px rgba(0,0,0,.05);background-clip:padding-box;outline:0}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header:after,.modal-header:before{content:\" \";display:table}.modal-header:after{clear:both}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.57143}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:after,.modal-footer:before{content:\" \";display:table}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-left:5px;margin-bottom:0}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.tooltip{position:absolute;z-index:1070;display:block;font-family:PingHei,\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:1.57143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:normal;font-size:12px;opacity:0;filter:alpha(opacity=0)}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{margin-top:-3px;padding:5px 0}.tooltip.right{margin-left:3px;padding:0 5px}.tooltip.bottom{margin-top:3px;padding:5px 0}.tooltip.left{margin-left:-3px;padding:0 5px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{bottom:0;right:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-print,.visible-print-block,.visible-print-inline,.visible-print-inline-block,.visible-sm,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}/*! * IE10 viewport hack for Surface/desktop Windows 8 bug * Copyright 2014-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */@-o-viewport{width:device-width}@viewport{width:device-width}::-webkit-scrollbar{width:6px;height:4px;background:0 0}::-webkit-scrollbar-thumb{background:rgba(0,0,0,.15)}::-webkit-scrollbar-thumb:window-inactive{background:rgba(0,0,0,.1)}::-webkit-scrollbar-thumb:vertical{height:4px;background:rgba(0,0,0,.15)}::-webkit-scrollbar-thumb:horizontal{width:4px;background:rgba(0,0,0,.15)}::-webkit-scrollbar-thumb:vertical:hover{background-color:rgba(0,0,0,.3)}::-webkit-scrollbar-thumb:vertical:active{background-color:rgba(0,0,0,.5)}::-webkit-scrollbar-track{background:rgba(0,0,0,.1);-webkit-box-shadow:inset 0 0 3px rgba(0,0,0,.1);box-shadow:inset 0 0 3px rgba(0,0,0,.1)}::-webkit-scrollbar-track-piece{background:rgba(0,0,0,.15)}body,html{position:relative;overflow-x:hidden}body{padding-right:0!important;font-family:PingHei,\"PingFang SC\",Helvetica Neue,\"Work Sans\",\"Hiragino Sans GB\",\"Microsoft YaHei\",SimSun,sans-serif;font-size:14px;line-height:1.57143;color:#333;background-color:#fff}a{color:#333;text-decoration:none}a:focus,a:hover{color:#0a6ebd;text-decoration:none}.active>a,a.active{color:#0a6ebd}.btn,button,input,select,textarea{outline:0!important}.btn:active,.btn:focus,.btn:hover,button:active,button:focus,button:hover,input:active,input:focus,input:hover,select:active,select:focus,select:hover,textarea:active,textarea:focus,textarea:hover{outline:0!important}canvas,iframe,img,svg,video{max-width:100%;height:auto}.clear{height:0;font-size:0;line-height:0;overflow:hidden;clear:both}.clearfix:after,.clearfix:before{content:\" \";display:table;line-height:0;content:\"\"}.clearfix:after{clear:both}.clearfix{*zoom:1}.clickable{cursor:pointer}.scrollable{overflow-x:hidden;overflow-y:auto}.transform-no{-ms-transform:none!important;-webkit-transform:none!important;transform:none!important}.text-dark{color:#333!important}.text-grey{color:#999!important}.text-white{color:#fff!important}.text-white a:hover,.text-white a:hover i,.text-white:hover{color:rgba(255,255,255,.8)}.text-white a.list-group-item.active i{color:#fff}.text-white .accordion-list p{font-size:12px;height:84px;line-height:21px;color:rgba(255,255,255,.8)}.bg-no{background:0 0!important}.bg-alpha{background-color:transparent!important}.bg-inverse,.bg-inverse a{color:#fff}.btn.bg-inverse.focus,.btn.bg-inverse:focus,.btn.bg-inverse:hover{color:rgba(255,255,255,.8)}.bg{background-color:#f6f6f6!important}.z-no{z-index:inherit}.z1{z-index:1}.z2{z-index:2}.z3{z-index:3}.z4{z-index:4}.zmin{z-index:-1}.zmax{z-index:999}.m{margin:5px!important}.m-no{margin:0!important}.m-0x{margin:10px!important}.m-1x{margin:15px!important}.m-2x{margin:20px!important}.m-3x{margin:30px!important}.m-4x{margin:60px!important}.m-5x{margin:100px!important}.mv{margin-top:5px!important;margin-bottom:5px!important}.mv-no{margin-top:0!important;margin-bottom:0!important}.mv-0x{margin-top:10px!important;margin-bottom:10px!important}.mv-1x{margin-top:15px!important;margin-bottom:15px!important}.mv-2x{margin-top:20px!important;margin-bottom:20px!important}.mv-3x{margin-top:30px!important;margin-bottom:30px!important}.mv-4x{margin-top:60px!important;margin-bottom:60px!important}.mv-5x{margin-top:100px!important;margin-bottom:100px!important}.mh{margin-left:5px!important;margin-right:5px!important}.mh-no{margin-left:0!important;margin-right:0!important}.mh-0x{margin-left:10px!important;margin-right:10px!important}.mh-1x{margin-left:15px!important;margin-right:15px!important}.mh-2x{margin-left:20px!important;margin-right:20px!important}.mh-3x{margin-left:30px!important;margin-right:30px!important}.mh-4x{margin-left:60px!important;margin-right:60px!important}.mh-5x{margin-left:100px!important;margin-right:100px!important}.mt{margin-top:5px!important}.mt-no{margin-top:0!important}.mt-0x{margin-top:10px!important}.mt-1x{margin-top:15px!important}.mt-2x{margin-top:20px!important}.mt-3x{margin-top:30px!important}.mt-4x{margin-top:60px!important}.mt-5x{margin-top:100px!important}.mb{margin-bottom:5px!important}.mb-no{margin-bottom:0!important}.mb-0x{margin-bottom:10px!important}.mb-1x{margin-bottom:15px!important}.mb-2x{margin-bottom:20px!important}.mb-3x{margin-bottom:30px!important}.mb-4x{margin-bottom:60px!important}.mb-5x{margin-bottom:100px!important}.ml{margin-left:5px!important}.ml-no{margin-left:0!important}.ml-0x{margin-left:10px!important}.ml-1x{margin-left:15px!important}.ml-2x{margin-left:20px!important}.ml-3x{margin-left:30px!important}.ml-4x{margin-left:60px!important}.ml-5x{margin-left:100px!important}.mr{margin-right:5px!important}.mr-no{margin-right:0!important}.mr-0x{margin-right:10px!important}.mr-1x{margin-right:15px!important}.mr-2x{margin-right:20px!important}.mr-3x{margin-right:30px!important}.mr-4x{margin-right:60px!important}.mr-5x{margin-right:100px!important}.p{padding:5px!important}.p-no{padding:0!important}.p-0x{padding:10px!important}.p-1x{padding:15px!important}.p-2x{padding:20px!important}.p-3x{padding:30px!important}.p-4x{padding:60px!important}.p-5x{padding:100px!important}.pv{padding-top:5px!important;padding-bottom:5px!important}.pv-no{padding-top:0!important;padding-bottom:0!important}.pv-0x{padding-top:10px!important;padding-bottom:10px!important}.pv-1x{padding-top:15px!important;padding-bottom:15px!important}.pv-2x{padding-top:20px!important;padding-bottom:20px!important}.pv-3x{padding-top:30px!important;padding-bottom:30px!important}.pv-4x{padding-top:60px!important;padding-bottom:60px!important}.pv-5x{padding-top:100px!important;padding-bottom:100px!important}.ph{padding-left:5px!important;padding-right:5px!important}.ph-no{padding-left:0!important;padding-right:0!important}.ph-0x{padding-left:10px!important;padding-right:10px!important}.ph-1x{padding-left:15px!important;padding-right:15px!important}.ph-2x{padding-left:20px!important;padding-right:20px!important}.ph-3x{padding-left:30px!important;padding-right:30px!important}.ph-4x{padding-left:60px!important;padding-right:60px!important}.ph-5x{padding-left:100px!important;padding-right:100px!important}.pt{padding-top:5px!important}.pt-no{padding-top:0!important}.pt-0x{padding-top:10px!important}.pt-1x{padding-top:15px!important}.pt-2x{padding-top:20px!important}.pt-3x{padding-top:30px!important}.pt-4x{padding-top:60px!important}.pt-5x{padding-top:100px!important}.pb{padding-bottom:5px!important}.pb-no{padding-bottom:0!important}.pb-0x{padding-bottom:10px!important}.pb-1x{padding-bottom:15px!important}.pb-2x{padding-bottom:20px!important}.pb-3x{padding-bottom:30px!important}.pb-4x{padding-bottom:60px!important}.pb-5x{padding-bottom:100px!important}.pl{padding-left:5px!important}.pl-no{padding-left:0!important}.pl-0x{padding-left:10px!important}.pl-1x{padding-left:15px!important}.pl-2x{padding-left:20px!important}.pl-3x{padding-left:30px!important}.pl-4x{padding-left:60px!important}.pl-5x{padding-left:100px!important}.pr{padding-right:5px!important}.pr-no{padding-right:0!important}.pr-0x{padding-right:10px!important}.pr-1x{padding-right:15px!important}.pr-2x{padding-right:20px!important}.pr-3x{padding-right:30px!important}.pr-4x{padding-right:60px!important}.pr-5x{padding-right:100px!important}.b{border:1px solid #ddd}.b-no{border:none!important}.r-rounded{border-radius:2em!important;padding-left:1em;padding-right:1em;overflow:hidden}.r-circle{border-radius:50%!important;overflow:hidden}.r-no{border-radius:0!important}.w-auto{width:auto!important}.w-full,.w-full img{width:100%!important;max-width:100%!important}.lh-2x{line-height:2}.text-break{word-break:break-all!important;word-wrap:break-word!important}.text-undecorate{text-decoration:none!important}.text-underline{text-decoration:underline!important}.text-through{text-decoration:line-through!important}.text-sub{vertical-align:sub!important}.text-super{vertical-align:super!important}.text-indent,.text-indent div,.text-indent p{text-indent:2em}.text-nowrap{max-width:100%;overflow:hidden!important;text-overflow:ellipsis!important;white-space:nowrap!important;word-wrap:normal!important;-moz-binding:url(ellipsis.xml)}.text-nowrap-1x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:1;-webkit-box-flex:1;line-height:24px;height:24px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-2x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:2;line-height:24px;height:48px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-3x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:3;line-height:24px;height:72px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-4x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:4;line-height:24px;height:96px;word-break:break-all!important;word-wrap:break-word!important}.text-nowrap-5x{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:5;line-height:24px;height:120px;word-break:break-all!important;word-wrap:break-word!important}.thumb{width:16px;display:inline-block;overflow:hidden}.thumb-xs{width:32px;display:inline-block;overflow:hidden}.thumb-sm{width:48px;display:inline-block;overflow:hidden}.thumb-md{width:64px;display:inline-block;overflow:hidden}.thumb-lg{width:96px;display:inline-block;overflow:hidden}.thumb-xl{width:128px;display:inline-block;overflow:hidden}.thumb-wrapper{padding:2px;border:1px solid #dbe2e7}.thumb img,.thumb-0x img,.thumb-1x img,.thumb-2x img,.thumb-3x img,.thumb-4x img,.thumb-5x img,.thumb-6x img,.thumb-btn img{height:auto;max-width:100%;vertical-align:middle}.img-gray img,img.img-gray{-webkit-filter:grayscale(100%);-moz-filter:grayscale(100%);-ms-filter:grayscale(100%);-o-filter:grayscale(100%);filter:grayscale(100%);-webkit-filter:gray;filter:gray}.img-gray:hover img,img.img-gray:hover{-webkit-filter:grayscale(0);-moz-filter:grayscale(0);-ms-filter:grayscale(0);-o-filter:grayscale(0);filter:grayscale(0)}.img-rotate img,img.img-rotate{-webkit-transition:-webkit-transform .3s ease;transition:-webkit-transform .3s ease;transition:transform .3s ease;transition:transform .3s ease,-webkit-transform .3s ease}.img-rotate:hover img,img.img-rotate:hover{transform:rotate(360deg);-ms-transform:rotate(360deg);-moz-transform:rotate(360deg);-webkit-transform:rotate(360deg);-o-transform:rotate(360deg)}.img-burn img,img.img-burn{position:relative;-webkit-transition:all .8s ease-in-out;transition:all .8s ease-in-out}.img-burn:hover img,img.img-burn:hover{-webkit-transform:scale(1.2) rotate(2deg);-ms-transform:scale(1.2) rotate(2deg);transform:scale(1.2) rotate(2deg)}.hover-up img,img.hover-up{position:relative;top:0;-webkit-transition:top .3s ease-out;transition:top .3s ease-out}.hover-up:hover img,img.hover-up:hover{top:-6px}.active>.auto .text,.active>.text,.collapsed>.auto .text,.collapsed>.text,.text-active{display:none!important}.active>.auto .text-active,.active>.text-active,.collapsed>.auto .text-active,.collapsed>.text-active{display:inline-block!important}.shadow-no{-webkit-box-shadow:none;box-shadow:none}.hover-shadow:hover,.shadow{-webkit-box-shadow:0 1px 2px rgba(0,0,0,.05);box-shadow:0 1px 2px rgba(0,0,0,.05)}.radio{margin-left:20px}.radio label{display:inline-block;position:relative;padding-left:5px}.radio label:before{content:\"\";display:inline-block;position:absolute;width:17px;height:17px;left:0;margin-left:-20px;border:1px solid #ccc;border-radius:50%;background-color:#fff;-webkit-transition:border .15s ease-in-out;transition:border .15s ease-in-out}.radio label:after{display:inline-block;position:absolute;content:\" \";width:11px;height:11px;left:3px;top:3px;margin-left:-20px;border-radius:50%;background-color:#555;-webkit-transform:scale(0,0);-ms-transform:scale(0,0);transform:scale(0,0);-webkit-transition:-webkit-transform .1s cubic-bezier(.8,-.33,.2,1.33);transition:-webkit-transform .1s cubic-bezier(.8,-.33,.2,1.33);transition:transform .1s cubic-bezier(.8,-.33,.2,1.33);transition:transform .1s cubic-bezier(.8,-.33,.2,1.33),-webkit-transform .1s cubic-bezier(.8,-.33,.2,1.33)}.radio input[type=radio]{display:none}.radio input[type=radio]:checked+label:after{-webkit-transform:scale(1,1);-ms-transform:scale(1,1);transform:scale(1,1)}.radio input[type=radio]:disabled+label{opacity:.65}.radio input[type=radio]:disabled+label:before{cursor:not-allowed}.hover-grow{-webkit-transition:all .2s linear;transition:all .2s linear}.hover-grow:hover{-webkit-transform:translate3d(0,-2px,0);transform:translate3d(0,-2px,0)}fieldset{padding:0;margin:0;border:0;min-width:0}legend{display:block;width:100%;padding:0;margin-bottom:21px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=checkbox]:focus,input[type=file]:focus,input[type=radio]:focus{outline:-webkit-focus-ring-color auto 5px;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.57143;color:#555}.form-control{display:block;width:100%;height:35px;padding:6px 12px;font-size:14px;line-height:1.57143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s,-webkit-box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control::-ms-expand{border:0;background-color:transparent}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}.list-disc{list-style:disc!important}.list-alpha{list-style:upper-alpha!important}.list-decimal{list-style:decimal!important}.list-outside{list-style-position:outside!important}.list-inside{list-style-position:inside!important}.list-square{list-style:none}.list-square li:before{color:#ccc;content:\"▪\";font-size:12px;margin-right:6px;-webkit-transition:.2s ease;transition:.2s ease}.list-circle-num,.list-square-num{counter-reset:list1}.list-circle-num>li,.list-square-num>li{list-style:none;margin-bottom:13px}.list-circle-num>li:before{counter-increment:list1;content:counter(list1) \"\";width:24px;height:24px;text-align:center;border-radius:12px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-square-num>li:before{counter-increment:list1;content:counter(list1) \"\";width:24px;height:24px;text-align:center;border-radius:5px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-circle-num>li>ol,.list-square-num>li>ol{counter-reset:list2}.list-circle-num>li>ol>li,.list-square-num>li>ol>li{margin-bottom:13px}.list-circle-num>li>ol>li:before{counter-increment:list2;content:counter(list1) \".\" counter(list2) \"\";width:24px;height:24px;text-align:center;border-radius:12px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-square-num>li>ol>li:before{counter-increment:list2;content:counter(list1) \".\" counter(list2) \"\";width:24px;height:24px;text-align:center;border-radius:5px;font-size:15px;border-width:1px;border-style:solid;margin:0 16px 0 0;display:inline-block;vertical-align:middle}.list-circle-num[class*=list-full]>li::before,.list-square-num[class*=list-full]>li::before{background:#de4a32;color:#fff}.label{display:inline-block;padding:.3em .6em;font-size:75%;font-weight:700;line-height:1;color:#777;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label:empty{display:none}.btn .label{position:relative;top:-1px}a.label:focus,a.label:hover{color:#333;text-decoration:none;cursor:pointer}.label-default{background-color:#eee}.label-default[href]:focus,.label-default[href]:hover{background-color:#d5d5d5}.label-primary{background-color:#2196f3;color:#fff}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#0c7cd5}.label-success{background-color:#5cb85c;color:#fff}.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}.label-info{background-color:#56ccf2;color:#fff}.label-info[href]:focus,.label-info[href]:hover{background-color:#27beee}.label-warning{background-color:#f09819;color:#fff}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#c97c0d}.label-danger{background-color:#ff512f;color:#fff}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#fb2900}.panel{margin-bottom:21px;background-color:#fff;border:1px solid #f2f2f2}.panel .article-title{display:-webkit-box;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:2;font-size:18px;line-height:32px;height:64px;word-break:break-all!important;word-wrap:break-word!important}.panel-body{padding:15px}.panel-body:after,.panel-body:before{content:\" \";display:table}.panel-body:after{clear:both}.panel-heading{padding:10px 15px;border-bottom:1px solid #f2f2f2}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit;text-decoration:none}.panel-footer{padding:10px 15px;border-top:1px solid #f2f2f2;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel.b-no{border:0;margin-bottom:0}.panel.b-no .panel-body,.panel.b-no .panel-footer,.panel.b-no .panel-heading{border:0;padding-left:0;padding-right:0}.panel-badger{position:relative}.panel-badger:after{content:\"\";position:absolute;top:0;width:0;height:0;border-width:4px;border-style:solid;border-color:#777 transparent transparent #777}.panel-badger:hover:after{border-color:#2196f3 transparent transparent #2196f3}.badger-danger:after{border-color:#ff512f transparent transparent #ff512f}.badger-warning:after{border-color:#f09819 transparent transparent #f09819}.badger-success:after{border-color:#5cb85c transparent transparent #5cb85c}.badger-info:after{border-color:#56ccf2 transparent transparent #56ccf2}.badger-primary:after{border-color:#2196f3 transparent transparent #2196f3}.bg-gradient-info span,.bg-gradient-info:before{background:#56ccf2;background:-webkit-linear-gradient(left,#56ccf2 0,#2f80ed 80%,#2f80ed 100%);background:-webkit-gradient(linear,left top,right top,from(#56ccf2),color-stop(80%,#2f80ed),to(#2f80ed));background:linear-gradient(to right,#56ccf2 0,#2f80ed 80%,#2f80ed 100%)}.bg-gradient-primary span,.bg-gradient-primary:before{background:#396afc;background:-webkit-linear-gradient(left,#396afc 0,#2948ff 80%,#2948ff 100%);background:-webkit-gradient(linear,left top,right top,from(#396afc),color-stop(80%,#2948ff),to(#2948ff));background:linear-gradient(to right,#396afc 0,#2948ff 80%,#2948ff 100%)}.bg-gradient-success span,.bg-gradient-success:before{background:#44ea76;background:-webkit-linear-gradient(left,#44ea76 0,#39fad7 80%,#39fad7 100%);background:-webkit-gradient(linear,left top,right top,from(#44ea76),color-stop(80%,#39fad7),to(#39fad7));background:linear-gradient(to right,#44ea76 0,#39fad7 80%,#39fad7 100%)}.bg-gradient-warning span,.bg-gradient-warning:before{background:#ff512f;background:-webkit-linear-gradient(left,#ff512f 0,#f09819 80%,#f09819 100%);background:-webkit-gradient(linear,left top,right top,from(#ff512f),color-stop(80%,#f09819),to(#f09819));background:linear-gradient(to right,#ff512f 0,#f09819 80%,#f09819 100%)}.bg-gradient-danger span,.bg-gradient-danger:before{background:#ff512f;background:-webkit-linear-gradient(left,#ff512f 0,#dd2476 80%,#dd2476 100%);background:-webkit-gradient(linear,left top,right top,from(#ff512f),color-stop(80%,#dd2476),to(#dd2476));background:linear-gradient(to right,#ff512f 0,#dd2476 80%,#dd2476 100%)}.btn-fancy{display:inline-block;font-size:17px;letter-spacing:.03em;text-transform:uppercase;color:#fff;position:relative}.btn-fancy:before{content:'';display:inline-block;height:40px;position:absolute;bottom:-5px;left:30px;right:30px;z-index:-1;-webkit-filter:blur(20px) brightness(.95);filter:blur(20px) brightness(.95);-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition:all .3s ease-out;transition:all .3s ease-out}.btn-fancy i{margin-top:-1px;margin-right:20px;font-size:1.265em;vertical-align:middle}.btn-fancy span{display:inline-block;padding:18px 60px;border-radius:50em;position:relative;z-index:2;will-change:transform,filter;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition:all .3s ease-out;transition:all .3s ease-out}.btn-fancy:active,.btn-fancy:focus{color:#fff}.btn-fancy:hover{color:#fff}.btn-fancy:hover span{-webkit-filter:brightness(1.05) contrast(1.05);filter:brightness(1.05) contrast(1.05);-webkit-transform:scale(.95);-ms-transform:scale(.95);transform:scale(.95)}.btn-fancy:hover:before{bottom:0;-webkit-filter:blur(10px) brightness(.95);filter:blur(10px) brightness(.95)}.btn-fancy.pop-onhover:before{opacity:0;bottom:10px}.btn-fancy.pop-onhover:hover:before{bottom:-7px;opacity:1;-webkit-filter:blur(20px);filter:blur(20px)}.btn-fancy.pop-onhover:hover span{-webkit-transform:scale(1.04);-ms-transform:scale(1.04);transform:scale(1.04)}.btn-fancy.pop-onhover:hover:active span{-webkit-filter:brightness(1) contrast(1);filter:brightness(1) contrast(1);-webkit-transform:scale(1);-ms-transform:scale(1);transform:scale(1);-webkit-transition:all .15s ease-out;transition:all .15s ease-out}.btn-fancy.pop-onhover:hover:active:before{bottom:0;-webkit-filter:blur(10px) brightness(.95);filter:blur(10px) brightness(.95);-webkit-transition:all .2s ease-out;transition:all .2s ease-out}table,table>tbody>tr>td,table>tbody>tr>th,table>tfoot>tr>td,table>tfoot>tr>th,table>thead>tr>td,table>thead>tr>th{border:1px solid #f2f2f2}table>tbody>tr:nth-of-type(odd){background-color:#f8f8f8}table>tbody>tr:hover{background-color:#fbfbfb}table{border-collapse:collapse;border-spacing:0;padding:0;width:100%;max-width:100%;margin:10px 0}table>tbody>tr>td,table>tbody>tr>th,table>tfoot>tr>td,table>tfoot>tr>th,table>thead>tr>td,table>thead>tr>th{padding:6px 13px}table>tbody+tbody{border-top:2px solid #f2f2f2}table table{background-color:#fff}.modal button.close{position:absolute;right:10px;top:10px;z-index:99}.modal-small .modal-dialog{width:480px}@font-face{font-family:icon;src:url(iconfont.eot?t=1525101408939);src:url(iconfont.eot?t=1525101408939#iefix) format(\"embedded-opentype\"),url(\"data:application/x-font-woff;charset=utf-8;base64,\") format(\"woff\"),url(iconfont.ttf?t=1525101408939) format(\"truetype\"),url(iconfont.svg?t=1525101408939#icon) format(\"svg\")}.icon{display:inline-block;font:14px/1 icon;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-webkit-text-stroke-width:.2px;-moz-osx-font-smoothing:grayscale}.icon-diandian:before{content:\"\\e63a\"}.icon-huaban:before{content:\"\\e63c\"}.icon-code-fork:before{content:\"\\e67a\"}.icon-more:before{content:\"\\e6c0\"}.icon-zhihu:before{content:\"\\e6d1\"}.icon-linkedin:before{content:\"\\e724\"}.icon-eye-fill:before{content:\"\\e64f\"}.icon-stackexchange:before{content:\"\\e8b2\"}.icon-tag:before{content:\"\\e6a3\"}.icon-starfish:before{content:\"\\e62e\"}.icon-home:before{content:\"\\e660\"}.icon-search:before{content:\"\\e61c\"}.icon-project:before{content:\"\\e63e\"}.icon-dialog:before{content:\"\\e613\"}.icon-twitter:before{content:\"\\ec9c\"}.icon-github:before{content:\"\\e70a\"}.icon-time:before{content:\"\\e669\"}.icon-voice:before{content:\"\\e65a\"}.icon-google:before{content:\"\\e601\"}.icon-weibo:before{content:\"\\e64b\"}.icon-segmentfault:before{content:\"\\e610\"}.icon-star-fill:before{content:\"\\e630\"}.icon-phone:before{content:\"\\e68a\"}.icon-cup-fill:before{content:\"\\e614\"}.icon-jiaju:before{content:\"\\e671\"}.icon-qzone:before{content:\"\\e603\"}.icon-home-fill:before{content:\"\\e617\"}.icon-clock:before{content:\"\\e618\"}.icon-file:before{content:\"\\e66f\"}.icon-comment:before{content:\"\\e61a\"}.icon-cup:before{content:\"\\e62c\"}.icon-share:before{content:\"\\e66a\"}.icon-star-half:before{content:\"\\e62f\"}.icon-star:before{content:\"\\e619\"}.icon-tencent-weibo:before{content:\"\\e602\"}.icon-book:before{content:\"\\e79d\"}.icon-bitbucket:before{content:\"\\e64e\"}.icon-facebook:before{content:\"\\e6e3\"}.icon-email:before{content:\"\\e667\"}.icon-zcool:before{content:\"\\e60c\"}.icon-social-media:before{content:\"\\e68b\"}.icon-douban:before{content:\"\\e60f\"}.icon-coding:before{content:\"\\e600\"}.icon-github-fill:before{content:\"\\e71d\"}.icon-qq:before{content:\"\\e611\"}.icon-shu-fill:before{content:\"\\e615\"}.icon-pinterest:before{content:\"\\e697\"}.icon-tags:before{content:\"\\e6c4\"}.icon-bill:before{content:\"\\e61b\"}.icon-shu:before{content:\"\\e616\"}.icon-book-shelf:before{content:\"\\e60d\"}.icon-target:before{content:\"\\e695\"}.icon-profile:before{content:\"\\e6e2\"}.icon-alipay:before{content:\"\\e938\"}.icon-skype:before{content:\"\\e604\"}.icon-juejin:before{content:\"\\e605\"}.icon-code:before{content:\"\\e73f\"}.icon-list:before{content:\"\\e61e\"}.icon-map-marker:before{content:\"\\e609\"}.icon-stackoverflow:before{content:\"\\e606\"}.icon-hourglass:before{content:\"\\e60e\"}.icon-behance:before{content:\"\\e67b\"}.icon-folder-open:before{content:\"\\e6b4\"}.icon-folder:before{content:\"\\e60a\"}.icon-menu:before{content:\"\\e607\"}.icon-users:before{content:\"\\e60b\"}.icon-eye:before{content:\"\\e657\"}.icon-wechat:before{content:\"\\e65e\"}.icon-number:before{content:\"\\e658\"}.icon-gitlab:before{content:\"\\e67c\"}.icon-rss:before{content:\"\\e63d\"}.icon-archives:before{content:\"\\e62d\"}.icon-68design:before{content:\"\\e608\"}.icon-dribble:before{content:\"\\e982\"}.icon-wepay:before{content:\"\\e629\"}.icon-youdao-note:before{content:\"\\e8a6\"}.icon-book-fill:before{content:\"\\e659\"}.icon-hezuo:before{content:\"\\e6e5\"}.icon-link:before{content:\"\\e635\"}.icon-archives-fill:before{content:\"\\e694\"}.icon-anchor:before{content:\"\\e858\"}.icon-angle-down:before{content:\"\\e85e\"}.icon-angle-left:before{content:\"\\e85f\"}.icon-angle-up:before{content:\"\\e860\"}.icon-angle-right:before{content:\"\\e862\"}.icon-calendar:before{content:\"\\e895\"}.icon-calendar-check:before{content:\"\\e896\"}.icon-calendar-minus:before{content:\"\\e897\"}.icon-calendar-plus:before{content:\"\\e899\"}.icon-calendar-times:before{content:\"\\e89a\"}.icon-close:before{content:\"\\e8c4\"}.icon-delicious:before{content:\"\\e8e2\"}.icon-plus:before{content:\"\\e99d\"}.icon-gg:before{content:\"\\e6fd\"}.icon-friendship:before{content:\"\\e612\"}.icon-gitee:before{content:\"\\e61d\"}pre .comment{color:#8e908c}pre .attribute,pre .css .class,pre .css .id,pre .css .pseudo,pre .html .doctype,pre .regexp,pre .ruby .constant,pre .tag,pre .variable,pre .xml .doctype,pre .xml .pi,pre .xml .tag .title{color:#c82829}pre .built_in,pre .constant,pre .literal,pre .number,pre .params,pre .preprocessor{color:#f5871f}pre .css .rules .attribute,pre .header,pre .inheritance,pre .ruby .class .title,pre .ruby .symbol,pre .string,pre .value,pre .xml .cdata{color:#718c00}pre .css .hexcolor,pre .title{color:#3e999f}pre .coffeescript .title,pre .function,pre .javascript .title,pre .js .title,pre .perl .sub,pre .python .decorator,pre .python .title,pre .ruby .function .title,pre .ruby .title .keyword{color:#4271ae}pre .javascript .function,pre .js .function,pre .keyword{color:#8959a8}.highlight,pre{background:#fafafa;margin:10px 0;padding:15px 10px;overflow:auto;font-size:13px;color:#4d4d4c;line-height:1.5}.gist .gist-file .gist-data .line-numbers,.highlight .gutter pre{color:#666}code{text-shadow:0 1px #fff;padding:.2em .4em;margin:0 .3em;color:#555;background:#eee;border-radius:3px;font-size:85%}pre code{background:0 0;text-shadow:none;padding:0}.highlight{position:relative;padding:32px 10px 0;border-radius:4px}.highlight:before{display:block;content:' ';height:32px;position:absolute;top:0;left:0;right:0;background-color:#f6f6f6;padding:0 10px;border-top-left-radius:4px;border-top-right-radius:4px}.highlight:after{content:\" \";position:absolute;border-radius:50%;background:#fc625d;width:10px;height:10px;top:0;left:15px;margin-top:11px;-webkit-box-shadow:20px 0 #fdbc40,40px 0 #35cd4b;box-shadow:20px 0 #fdbc40,40px 0 #35cd4b}.highlight pre{border:none;margin:0}.highlight table{position:relative;border:none;width:100%;margin:0;padding:0}.highlight tr{border:none}.highlight td,.highlight th{border:none;padding:0}.highlight td.code,.highlight th.code{width:100%!important}.highlight figcaption{font-size:.85em;color:#8e908c;line-height:1em;margin-bottom:1em}.highlight figcaption a{float:right}.highlight .line{height:24px;line-height:24px}.highlight .gutter pre{text-align:right;padding-right:0;padding-left:0;color:#ccc}.header{background-color:#fbfbfb}.sidebar{background-color:#fdfdfd}.sidebar .slimContent{padding:20px}.main{position:relative;min-height:100vh;padding:15px}.main:after,.main:before{content:\" \";display:table}.main:after{clear:both}.footer{padding:20px;background-color:#fbfbfb;color:#999}body.main-center .sidebar,body.main-left .header,body.main-left .sidebar{left:auto;right:0;border-left:1px solid #f6f6f6;border-right:0}body.main-left .footer{left:auto;right:0}body.no-sidebar .sidebar{display:none!important}.main-nav{float:none!important}.main-nav>li{display:block;width:100%;position:relative}.main-nav>li>a{color:#555}.main-nav>li .menu-title{margin-left:15px}.main-nav>.active a,.main-nav>.active a:focus,.main-nav>.active a:hover{color:#333;background:#f4f4f4}.profile-block{padding:20px 15px 10px}#avatar{width:64px;height:64px;display:inline-block}#avatar img{width:100%;max-height:100%;height:auto!important}#name{font-size:18px;margin-top:10px;margin-bottom:0}#title{font-size:13px;margin-top:5px;margin-bottom:5px}.sidebar-form{border-radius:3px;border:1px solid #eee;margin:0 15px 15px}.sidebar-form .btn,.sidebar-form input[type=text]{-webkit-box-shadow:none;box-shadow:none;background-color:transparent;border:1px solid transparent;height:32px}.sidebar-form .btn:focus,.sidebar-form input[type=text]:focus{outline:0}.sidebar-form input[type=text]{color:#666;border-radius:2px 0 0 2px}.sidebar-form input[type=text]:focus,.sidebar-form input[type=text]:focus+.input-group-btn .btn{background-color:#fff;color:#666}.sidebar-form .btn{color:#999;border-radius:0 2px 2px 0}.header .navbar-collapse{padding-left:0;padding-right:0}.header .navbar-collapse .navbar-nav{margin:0}.header .navbar-toggle .icon-bar{background-color:#2196f3}.main .pager{text-align:left;margin:10px 0}.main .pager .disabled{cursor:not-allowed}.main .pager>.page-number,.main .pager>a{line-height:32px;float:left}.main .pager a{color:#666;border:0;line-height:32px;padding:0}.main .pager a:link,.main .pager a:visited{background-color:transparent}.main .pager a:hover{color:#0a6ebd;background-color:transparent}.main .pager .prev{margin-right:10px}.main .pager .page-number.current{color:#2196f3}.main .pager .page-number+.next,.main .pager .page-number+.page-number{margin-left:10px}.main .total-article{margin:10px 0;line-height:32px;color:#999}.main .page-header{margin-top:0}.main .article-list article{border-bottom:1px solid #f2f2f2}.main .article-list article:last-child{border-bottom:0}.main .article-meta{font-size:13px;color:#999}.main .article-meta a{color:#999}.main .article-meta a:hover{color:#0a6ebd;text-decoration:none}.main .article-meta span+span{margin-left:10px}.main .content{min-height:85vh}.main.has-sticky .content{margin-bottom:70px}#comments .gitment-footer-container,#comments .gitment-footer-project-link{display:none!important}.panel .label,.widget .label{font-weight:400}.widget:after,.widget:before{content:\" \";display:table}.widget:after{clear:both}.widget .widget-title{font-size:18px;color:#000}.widget time{color:#999;font-size:12px;text-transform:uppercase}.widget p{margin-bottom:0}.widget ul{margin-left:0;padding-left:0;list-style:none}.widget .category-link{color:#0a6ebd}.archive-list-count,.category-list-count,.tag-list-count{padding-left:5px;color:#999;font-size:.85em}.archive-list-count:before,.category-list-count:before,.tag-list-count:before{content:\"(\"}.archive-list-count:after,.category-list-count:after,.tag-list-count:after{content:\")\"}.archive-list,.category-list,.tag-list{line-height:1.75}.archive-list li:before,.category-list li:before,.tag-list li:before{color:#ccc;content:\"▪\";font-size:12px;margin-right:6px;-webkit-transition:.2s ease;transition:.2s ease}.category-list-child{padding-left:15px}.recent-post-list li+li{margin-top:15px}.recent-post-list li .item-inner,.recent-post-list li .item-thumb{display:table-cell;vertical-align:middle}.recent-post-list li .item-thumb{opacity:1;padding-right:10px;-webkit-transition:all .2s ease;transition:all .2s ease}.recent-post-list li .item-thumb .thumb{width:50px;height:50px;display:block;position:relative;overflow:hidden}.recent-post-list li .item-thumb .thumb span{width:100%;height:100%;display:block}.recent-post-list li .item-thumb .thumb .thumb-image{position:absolute;background-size:cover;background-position:center}.recent-post-list li .item-thumb .thumb .thumb-none{background-image:url(../images/thumb-default.png);background-size:100% 100%}.recent-post-list li:hover .item-thumb{opacity:.8}.sidebar-toc.collapse{display:none!important}.sidebar-toc.in{display:block!important}.tagcloud a{display:inline-block;margin-bottom:.2em;padding:.3em .6em;font-size:75%!important;line-height:1;background-color:#eee;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.bar .pager .next>a,.bar .pager .next>span{float:none}.bar.bar-footer{position:relative;background-color:#fff;bottom:-15px}.bar.bar-footer:before{content:'';position:absolute;width:-webkit-calc(100% + 30px);width:calc(100% + 30px);height:52px;left:-15px;border-top:1px solid #f6f6f6;border-bottom:1px solid #fff;background-color:#fff}.bar .bar-inner{position:relative;z-index:9}.bar .bar-inner:after,.bar .bar-inner:before{content:\" \";display:table}.bar .bar-inner:after{clear:both}.bar .bar-right{margin:10px 0;float:right}.toggle-toc{cursor:pointer;margin-left:10px}.toggle-toc a{display:inline-block;line-height:32px;text-align:center}.footer .copyright{font-size:12px}.footer .copyright a{color:#999;text-decoration:none}.footer .copyright a:hover{color:#0a6ebd}.wave-icon{display:inline-block;position:relative}.wave-icon .wave-circle{display:block;border-radius:50%;background-color:transparent}.wave-icon .wave-circle:after,.wave-icon .wave-circle:before{content:'';border:10px solid #2196f3;background:#2196f3;border-radius:50%;position:absolute;top:50%;left:50%;z-index:1}.wave-icon .wave-circle:before{height:74px;width:74px;-webkit-animation:5s ease-out infinite pulse;animation:5s ease-out infinite pulse;margin-top:-37px;margin-left:-37px;opacity:0}.wave-icon .wave-circle:after{height:98px;width:98px;-webkit-animation:5s ease-out infinite pulse;animation:5s ease-out infinite pulse;margin-top:-49px;margin-left:-49px;opacity:.3}.wave-icon .icon{position:relative;display:block;width:50px;height:50px;line-height:50px;text-align:center;background-color:#2196f3;border-radius:50%;font-size:24px;color:#fff;z-index:2}.wave-icon.wave-icon-info .wave-circle:after,.wave-icon.wave-icon-info .wave-circle:before{border:10px solid #56ccf2;background:#56ccf2}.wave-icon.wave-icon-info .icon{background-color:#56ccf2}.wave-icon.wave-icon-primary .wave-circle:after,.wave-icon.wave-icon-primary .wave-circle:before{border:10px solid #2196f3;background:#2196f3}.wave-icon.wave-icon-primary .icon{background-color:#2196f3}.wave-icon.wave-icon-warning .wave-circle:after,.wave-icon.wave-icon-warning .wave-circle:before{border:10px solid #f09819;background:#f09819}.wave-icon.wave-icon-warning .icon{background-color:#f09819}.wave-icon.wave-icon-success .wave-circle:after,.wave-icon.wave-icon-success .wave-circle:before{border:10px solid #5cb85c;background:#5cb85c}.wave-icon.wave-icon-success .icon{background-color:#5cb85c}.wave-icon.wave-icon-danger .wave-circle:after,.wave-icon.wave-icon-danger .wave-circle:before{border:10px solid #ff512f;background:#ff512f}.wave-icon.wave-icon-danger .icon{background-color:#ff512f}@-webkit-keyframes pulse{0%{-webkit-transform:scale(0);opacity:0}25%{-webkit-transform:scale(0);opacity:.1}50%{-webkit-transform:scale(.1);opacity:.3}75%{-webkit-transform:scale(.5);opacity:.5}100%{-webkit-transform:scale(1);opacity:0}}.repo-list{list-style:none;padding-left:0}.repo{position:relative;list-style-type:none;border:1px solid #f2f2f2;margin-bottom:15px;overflow:hidden}.repo-title{padding:0 15px;margin:15px 0;font-size:16px;font-weight:600}.repo-body{display:-webkit-box;padding:0 15px;margin:0 0 20px;overflow:hidden;text-overflow:ellipsis;-webkit-box-orient:vertical;-webkit-line-clamp:2;line-height:1.5em;height:3em;word-break:break-all!important;word-wrap:break-word!important}.repo-image{position:relative;display:table;width:101%;height:3px;margin:-1px -1px 15px;background-color:#666}.repo-meta{padding:0 15px;margin-top:5px;margin-bottom:15px;color:#777;font-size:12px;text-align:right}.repo-meta:after,.repo-meta:before{content:\" \";display:table}.repo-meta:after{clear:both}.repo-meta .meta+.meta{margin-left:15px}.text-collapsed{display:none}.collapsed .text-collapsed,.text-in{display:inline-block}.collapsed .text-in{display:none}.sub-header{padding-bottom:10px;border-bottom:1px solid #eee}.article-header{margin-bottom:20px}.article-footer{margin-top:20px}.collection{position:relative}.collection a.collection-item{display:block;-webkit-transition:.25s;transition:.25s;color:#777}.collection a:not(.active):hover{color:#333}.collection .collection-item{padding:8px 0;margin:0}.article-list .article-title{font-size:18px}.article-toc .toc-title{font-size:18px;color:#000}.article-toc .toc{list-style:none;padding-left:0;line-height:2}.article-toc .toc ol{list-style:none;padding-left:10px}.article-toc .toc .toc-item{position:relative}.article-toc .toc .toc-item .markdownIt-Anchor{position:absolute;left:0;right:0;top:0;padding:14px 0}.marked-body h1,.marked-body h2,.marked-body h3,.marked-body h4,.marked-body h5,.marked-body h6{margin-top:24px;margin-bottom:16px;font-weight:600;line-height:1.25}.marked-body h1{padding-bottom:.3em;font-size:2em;border-bottom:1px solid #f2f2f2}.marked-body h2{padding-bottom:.3em;font-size:1.5em;border-bottom:1px solid #f2f2f2}.marked-body a{color:#2196f3;text-decoration:none}.marked-body a:focus,.marked-body a:hover{color:#0a6ebd;text-decoration:none}.marked-body ol,.marked-body ul{padding-left:0;margin-left:20px}body.okayNav-loaded{overflow-x:hidden}.okayNav{position:relative}.okayNav:after,.okayNav:before{content:\" \";display:table}.okayNav:after{clear:both}.okayNav:not(.loaded){visibility:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.okayNav ul{float:left;padding-left:0}.okayNav ul li{display:inline-block;margin-left:15px}.okayNav a{position:relative;z-index:1;color:#2e2e33;font-weight:400}.okayNav a.active{color:#0a6ebd}.okayNav__nav--visible{overflow:hidden;white-space:nowrap}.okayNav__nav--visible li{display:inline-block;margin-left:15px}.okayNav__nav--visible li:first-child{margin-left:0}.okayNav__nav--visible a{display:block;-webkit-transition:color .2s cubic-bezier(.55,0,.1,1);transition:color .2s cubic-bezier(.55,0,.1,1)}.okayNav__nav--visible:empty~.okayNav__menu-toggle{top:0}.okayNav__nav--invisible{display:none;position:absolute;width:100%;top:24px;overflow-y:auto;-webkit-overflow-scrolling:touch;-webkit-box-shadow:0 1px 2px rgba(0,0,0,.05);box-shadow:0 1px 2px rgba(0,0,0,.05);padding-top:15px;padding-bottom:15px;background:#fff}.okayNav__nav--invisible li{display:inline-block}.okayNav__nav--invisible li a{display:block;padding:6px 15px;min-width:100px}.okayNav__nav--invisible.nav-left{left:0}.okayNav__nav--invisible.nav-right{right:0}.okayNav__nav--invisible.transition-enabled{-webkit-transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1),-webkit-transform .4s cubic-bezier(.55,0,.1,1)}.okayNav__nav--invisible.nav-open{display:block;z-index:99;border:1px solid #f2f2f2}.okayNav__menu-toggle{position:relative;z-index:1;float:right;cursor:pointer;-webkit-transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:-webkit-transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1);transition:transform .4s cubic-bezier(.55,0,.1,1),-webkit-transform .4s cubic-bezier(.55,0,.1,1)}.okayNav__menu-toggle.okay-invisible{position:absolute;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;opacity:0}.okayNav__menu-toggle span{background:#666;display:inline-block;width:2px;height:2px;margin:auto 1px;pointer-events:none;border-radius:50%;vertical-align:middle}.okayNav__menu-toggle.icon--active span{background:#0a6ebd}.okayNav a:hover{color:#0a6ebd}.social-links{list-style:none;padding:0;text-align:left}.social-links li{list-style:none;display:inline-block;margin-left:10px}.social-links li:first-child{margin-left:0}.header .social-links{padding:10px 20px}.footer .social-links{margin-bottom:5px}@font-face{font-family:socialshare;src:url(../fonts/iconfont.eot);src:url(../fonts/iconfont.eot?#iefix) format(\"embedded-opentype\"),url(../fonts/iconfont.woff) format(\"woff\"),url(../fonts/iconfont.ttf) format(\"truetype\"),url(../fonts/iconfont.svg#iconfont) format(\"svg\")}.social-share{display:inline-block;font-size:16px}.social-share a{position:relative;text-decoration:none;margin-left:16px;display:inline-block;outline:0;line-height:32px}.social-share .social-share-icon{position:relative;display:inline-block;height:32px;line-height:32px;color:#999;text-align:center;vertical-align:middle;-webkit-transition:background .6s ease-out 0s;transition:background .6s ease-out 0s}.social-share .social-share-icon:hover{color:#666}.social-share .icon-weibo:hover{color:#ff763b}.social-share .icon-qq:hover,.social-share .icon-tencent:hover{color:#56b6e7}.social-share .icon-qzone:hover{color:#fdbe3d}.social-share .icon-douban:hover{color:#33b045}.social-share .icon-linkedin:hover{color:#0077b5}.social-share .icon-facebook:hover{color:#44619d}.social-share .icon-google:hover{color:#db4437}.social-share .icon-twitter:hover{color:#55acee}.social-share .icon-diandian:hover{color:#307dca}.social-share .icon-wechat{position:relative}.social-share .icon-wechat:hover{color:#7bc549}.social-share .icon-wechat .wechat-qrcode{display:none;border:1px solid #eee;position:absolute;z-index:9;top:-209px;left:-90px;width:200px;height:200px;color:#666;font-size:12px;text-align:center;background-color:#fff;-webkit-transition:all .2s;transition:all .2s;-webkit-tansition:all 350ms;-moz-transition:all 350ms}.social-share .icon-wechat .wechat-qrcode.bottom{top:40px;left:-84px}.social-share .icon-wechat .wechat-qrcode.bottom:after{display:none}.social-share .icon-wechat .wechat-qrcode h4{font-weight:400;height:26px;line-height:26px;font-size:12px;background-color:#f3f3f3;margin:0;padding:0;color:#777}.social-share .icon-wechat .wechat-qrcode .qrcode{width:105px;margin:15px auto}.social-share .icon-wechat .wechat-qrcode .qrcode table{margin:0!important}.social-share .icon-wechat .wechat-qrcode .help p{font-weight:400;line-height:16px;padding:0;margin:0}.social-share .icon-wechat .wechat-qrcode:before{content:'';position:absolute;left:50%;margin-left:-6px;bottom:-15px;width:0;height:0;border-width:8px 6px 6px;border-style:solid;border-color:#eee transparent transparent}.social-share .icon-wechat .wechat-qrcode:after{content:'';position:absolute;left:50%;margin-left:-6px;bottom:-13px;width:0;height:0;border-width:8px 6px 6px;border-style:solid;border-color:#fff transparent transparent}.social-share .icon-wechat:hover .wechat-qrcode{display:block}.btn-donate{position:absolute;bottom:10px;left:50%;margin-left:-25px;width:50px;height:50px;line-height:50px;padding:0;border-radius:50%;font-size:18px;cursor:pointer;z-index:99}.btn-donate:active,.btn-donate:focus,.btn-donate:hover{border-color:transparent!important;outline:0!important}.btn-donate.btn-fancy{background-color:transparent}.btn-donate.btn-fancy span{width:50px;height:50px;padding:0}.donate{overflow:hidden}.donate-box{text-align:center;padding-top:30px}.donate-box .donate-head{width:100%;height:80px;text-align:center;line-height:60px;color:#a3a3a3;font-size:16px;position:relative}.donate-box .donate-head:after,.donate-box .donate-head:before{font-family:Arial,Helvetica,sans-serif;background:0 0;width:0;height:0;font-style:normal;color:#eee;font-size:100px;position:absolute;top:15px}.donate-box .donate-head:before{content:'\\201c';left:30px}.donate-box .donate-head:after{content:'\\201d';right:70px}.donate-box .donate-footer{padding-top:35px}.donate-box .donate-payimg{display:inline-block;padding:10px;border:6px solid #ea5f00;margin:0 auto;border-radius:3px}.donate-box .donate-payimg img{display:block;text-align:center;width:140px;height:140px}.book .media-middle{display:inline-block;width:115px}.ins-search{display:none}.ins-search.show{display:block}.ins-selectable{cursor:pointer}.ins-search-container,.ins-search-mask{position:fixed}.ins-search-mask{top:0;left:0;width:100%;height:100%;z-index:1050;background:rgba(0,0,0,.5)}.ins-input-wrapper{position:relative}.ins-search-input{width:100%;border:none;outline:0;font-size:16px;-webkit-box-shadow:none;box-shadow:none;font-weight:200;border-radius:0;background:#fff;line-height:20px;-webkit-box-sizing:border-box;box-sizing:border-box;padding:12px 28px 12px 20px;border-bottom:1px solid #e2e2e2;font-family:\"Microsoft Yahei Light\",\"Microsoft Yahei\",Helvetica,Arial,sans-serif}.ins-close{top:50%;right:6px;width:20px;height:20px;font-size:24px;margin-top:-15px;position:absolute;text-align:center;opacity:1;color:#666;display:inline-block}.ins-close:hover{color:#006bde}.ins-search-container{left:50%;top:100px;z-index:1051;bottom:100px;-webkit-box-sizing:border-box;box-sizing:border-box;width:540px;margin-left:-270px}.ins-section-wrapper{left:0;right:0;top:45px;bottom:0;overflow-y:auto;position:absolute}.ins-section-container{position:relative;background:#f7f7f7}.ins-section{font-size:14px;line-height:16px}.ins-section .ins-search-item,.ins-section .ins-section-header{padding:8px 15px}.ins-section .ins-section-header{color:#9a9a9a;border-bottom:1px solid #e2e2e2}.ins-section .ins-slug{margin-left:5px;color:#9a9a9a}.ins-section .ins-slug:before{content:'('}.ins-section .ins-slug:after{content:')'}.ins-section .ins-search-item .ins-search-preview,.ins-section .ins-search-item header{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ins-section .ins-search-item header .icon{margin-right:8px}.ins-section .ins-search-item .ins-search-preview{height:15px;font-size:12px;color:#9a9a9a;margin:5px 0 0 20px}.ins-section .ins-search-item.active,.ins-section .ins-search-item:hover{color:#fff;background:#006bde}.ins-section .ins-search-item.active .ins-search-preview,.ins-section .ins-search-item.active .ins-slug,.ins-section .ins-search-item:hover .ins-search-preview,.ins-section .ins-search-item:hover .ins-slug,.theme-black .header,.theme-blue .header,.theme-green .header,.theme-purple .header{color:#fff}.theme-black .header a,.theme-blue .header a,.theme-green .header a,.theme-purple .header a{color:#efefef}.theme-black .header #location,.theme-blue .header #location,.theme-green .header #location,.theme-purple .header #location{color:rgba(255,255,255,.75)!important}.theme-black .header .navbar-toggle .icon-bar,.theme-blue .header .navbar-toggle .icon-bar,.theme-green .header .navbar-toggle .icon-bar,.theme-purple .header .navbar-toggle .icon-bar{background-color:#fff}.theme-black .footer,.theme-black .footer a,.theme-blue .footer,.theme-blue .footer a,.theme-green .footer,.theme-green .footer a,.theme-purple .footer,.theme-purple .footer a{color:rgba(255,255,255,.75)}.theme-black .footer a.active,.theme-black .footer a:focus,.theme-black .footer a:hover,.theme-black .header a.active,.theme-black .header a:focus,.theme-black .header a:hover,.theme-blue .footer a.active,.theme-blue .footer a:focus,.theme-blue .footer a:hover,.theme-blue .header a.active,.theme-blue .header a:focus,.theme-blue .header a:hover,.theme-green .footer a.active,.theme-green .footer a:focus,.theme-green .footer a:hover,.theme-green .header a.active,.theme-green .header a:focus,.theme-green .header a:hover,.theme-purple .footer a.active,.theme-purple .footer a:focus,.theme-purple .footer a:hover,.theme-purple .header a.active,.theme-purple .header a:focus,.theme-purple .header a:hover{color:#fff}.theme-black .main-nav>li>a.active,.theme-black .main-nav>li>a:focus,.theme-black .main-nav>li>a:hover,.theme-blue .main-nav>li>a.active,.theme-blue .main-nav>li>a:focus,.theme-blue .main-nav>li>a:hover,.theme-green .main-nav>li>a.active,.theme-green .main-nav>li>a:focus,.theme-green .main-nav>li>a:hover,.theme-purple .main-nav>li>a.active,.theme-purple .main-nav>li>a:focus,.theme-purple .main-nav>li>a:hover{color:#fff;background:rgba(0,0,0,.15)}.theme-black .main-nav>.active a,.theme-black .main-nav>.active a.active,.theme-black .main-nav>.active a:focus,.theme-black .main-nav>.active a:hover,.theme-blue .main-nav>.active a,.theme-blue .main-nav>.active a.active,.theme-blue .main-nav>.active a:focus,.theme-blue .main-nav>.active a:hover,.theme-green .main-nav>.active a,.theme-green .main-nav>.active a.active,.theme-green .main-nav>.active a:focus,.theme-green .main-nav>.active a:hover,.theme-purple .main-nav>.active a,.theme-purple .main-nav>.active a.active,.theme-purple .main-nav>.active a:focus,.theme-purple .main-nav>.active a:hover{color:#fff;background:rgba(0,0,0,.2)}.theme-black .search .sidebar-form,.theme-blue .search .sidebar-form,.theme-green .search .sidebar-form,.theme-purple .search .sidebar-form{border:0;background:rgba(0,0,0,.2)}.theme-black .search .sidebar-form input::-webkit-input-placeholder,.theme-blue .search .sidebar-form input::-webkit-input-placeholder,.theme-green .search .sidebar-form input::-webkit-input-placeholder,.theme-purple .search .sidebar-form input::-webkit-input-placeholder{color:rgba(255,255,255,.5)}.theme-black .search .sidebar-form input:-moz-placeholder,.theme-blue .search .sidebar-form input:-moz-placeholder,.theme-green .search .sidebar-form input:-moz-placeholder,.theme-purple .search .sidebar-form input:-moz-placeholder{color:rgba(255,255,255,.5)}.theme-black .search .sidebar-form input::-moz-placeholder,.theme-blue .search .sidebar-form input::-moz-placeholder,.theme-green .search .sidebar-form input::-moz-placeholder,.theme-purple .search .sidebar-form input::-moz-placeholder{color:rgba(255,255,255,.5)}.theme-black .search .sidebar-form input:-ms-input-placeholder,.theme-blue .search .sidebar-form input:-ms-input-placeholder,.theme-green .search .sidebar-form input:-ms-input-placeholder,.theme-purple .search .sidebar-form input:-ms-input-placeholder{color:rgba(255,255,255,.5)}.theme-black .search input[type=text],.theme-blue .search input[type=text],.theme-green .search input[type=text],.theme-purple .search input[type=text]{color:#666}.theme-black .search input[type=text]+.input-group-btn .btn,.theme-blue .search input[type=text]+.input-group-btn .btn,.theme-green .search input[type=text]+.input-group-btn .btn,.theme-purple .search input[type=text]+.input-group-btn .btn{color:rgba(255,255,255,.5)}.theme-black .search input[type=text]:focus,.theme-black .search input[type=text]:focus+.input-group-btn .btn,.theme-blue .search input[type=text]:focus,.theme-blue .search input[type=text]:focus+.input-group-btn .btn,.theme-green .search input[type=text]:focus,.theme-green .search input[type=text]:focus+.input-group-btn .btn,.theme-purple .search input[type=text]:focus,.theme-purple .search input[type=text]:focus+.input-group-btn .btn{background-color:#fff;color:#666}.theme-black .header{background:#1a2433;background:-webkit-linear-gradient(left,#1a2433 0,#253449 80%,#253449 100%);background:-webkit-gradient(linear,left top,right top,from(#1a2433),color-stop(80%,#253449),to(#253449));background:linear-gradient(to right,#1a2433 0,#253449 80%,#253449 100%)}.theme-blue .header{background:#0062c5;background:-webkit-linear-gradient(left,#0062c5 0,#0073e6 80%,#0073e6 100%);background:-webkit-gradient(linear,left top,right top,from(#0062c5),color-stop(80%,#0073e6),to(#0073e6));background:linear-gradient(to right,#0062c5 0,#0073e6 80%,#0073e6 100%)}.theme-green .header{background:#08a283;background:-webkit-linear-gradient(left,#08a283 0,#0ac29d 80%,#0ac29d 100%);background:-webkit-gradient(linear,left top,right top,from(#08a283),color-stop(80%,#0ac29d),to(#0ac29d));background:linear-gradient(to right,#08a283 0,#0ac29d 80%,#0ac29d 100%)}.theme-purple .header{background:#494683;background:-webkit-linear-gradient(left,#494683 0,#555299 80%,#555299 100%);background:-webkit-gradient(linear,left top,right top,from(#494683),color-stop(80%,#555299),to(#555299));background:linear-gradient(to right,#494683 0,#555299 80%,#555299 100%)}@media (min-width:767px){.modal-center{text-align:center;padding:0!important}.modal-center:before{content:'';display:inline-block;height:100%;vertical-align:middle;margin-right:-4px}.modal-center .modal-dialog{display:inline-block;text-align:left;vertical-align:middle}.donate-box .donate-footer{margin:0 -15px -16px}}@media (min-width:768px){.lead{font-size:21px}.dl-horizontal dt{float:left;width:160px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}.container{width:750px}.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}.col-sm-1{width:8.33333%}.col-sm-2{width:16.66667%}.col-sm-3{width:25%}.col-sm-4{width:33.33333%}.col-sm-5{width:41.66667%}.col-sm-6{width:50%}.col-sm-7{width:58.33333%}.col-sm-8{width:66.66667%}.col-sm-9{width:75%}.col-sm-10{width:83.33333%}.col-sm-11{width:91.66667%}.col-sm-12{width:100%}.col-sm-pull-0{right:auto}.col-sm-pull-1{right:8.33333%}.col-sm-pull-2{right:16.66667%}.col-sm-pull-3{right:25%}.col-sm-pull-4{right:33.33333%}.col-sm-pull-5{right:41.66667%}.col-sm-pull-6{right:50%}.col-sm-pull-7{right:58.33333%}.col-sm-pull-8{right:66.66667%}.col-sm-pull-9{right:75%}.col-sm-pull-10{right:83.33333%}.col-sm-pull-11{right:91.66667%}.col-sm-pull-12{right:100%}.col-sm-push-0{left:auto}.col-sm-push-1{left:8.33333%}.col-sm-push-2{left:16.66667%}.col-sm-push-3{left:25%}.col-sm-push-4{left:33.33333%}.col-sm-push-5{left:41.66667%}.col-sm-push-6{left:50%}.col-sm-push-7{left:58.33333%}.col-sm-push-8{left:66.66667%}.col-sm-push-9{left:75%}.col-sm-push-10{left:83.33333%}.col-sm-push-11{left:91.66667%}.col-sm-push-12{left:100%}.col-sm-offset-0{margin-left:0}.col-sm-offset-1{margin-left:8.33333%}.col-sm-offset-2{margin-left:16.66667%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-4{margin-left:33.33333%}.col-sm-offset-5{margin-left:41.66667%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-7{margin-left:58.33333%}.col-sm-offset-8{margin-left:66.66667%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-10{margin-left:83.33333%}.col-sm-offset-11{margin-left:91.66667%}.col-sm-offset-12{margin-left:100%}.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{left:0;right:auto}.nav-justified>li,.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a,.nav-tabs.nav-justified>li>a{margin-bottom:0}.nav-tabs-justified>li>a,.nav-tabs.nav-justified>li>a{border-bottom:1px solid #f2f2f2;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}.navbar{border-radius:4px}.navbar-header{float:left}.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-left:0;padding-right:0}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}.navbar-fixed-bottom,.navbar-fixed-top,.navbar-static-top{border-radius:0}.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}.navbar-toggle{display:none}.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:14.5px;padding-bottom:14.5px}.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}.navbar-form{width:auto;border:0;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0;-webkit-box-shadow:none;box-shadow:none}.navbar-text{float:left;margin-left:15px;margin-right:15px}.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.05);box-shadow:0 5px 15px rgba(0,0,0,.05)}.modal-sm{width:300px}.header{position:fixed;top:0;bottom:0;left:0;z-index:1000;display:block;padding:0;overflow-y:auto;border-right:1px solid #f6f6f6;width:4.16667%}.sidebar{position:fixed;top:0;bottom:0;left:0;display:block;padding:0;overflow-x:hidden;overflow-y:auto;border-right:1px solid #f6f6f6;width:33.33333%}.main{width:62.5%;padding-right:20px;padding-left:20px}.footer{position:fixed;left:0;bottom:0;background-color:transparent;z-index:1050;width:4.16667%}body.main-center .main{margin-left:4.16667%}body.main-left .sidebar{margin-right:4.16667%}body.main-right .sidebar{margin-left:4.16667%}body.main-right .main{margin-left:37.5%}body.no-sidebar.main-left .main{width:95.83333333%;margin-right:4.16667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:95.83333333%;margin-left:4.16667%}.header .navbar-header{float:none}#avatar img{padding:5px}.bar.bar-footer:before{width:-webkit-calc(100% + 40px);width:calc(100% + 40px);left:-20px}.header .social-links{display:none}}@media (min-width:992px){.container{width:970px}.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}.col-md-1{width:8.33333%}.col-md-2{width:16.66667%}.col-md-3{width:25%}.col-md-4{width:33.33333%}.col-md-5{width:41.66667%}.col-md-6{width:50%}.col-md-7{width:58.33333%}.col-md-8{width:66.66667%}.col-md-9{width:75%}.col-md-10{width:83.33333%}.col-md-11{width:91.66667%}.col-md-12{width:100%}.col-md-pull-0{right:auto}.col-md-pull-1{right:8.33333%}.col-md-pull-2{right:16.66667%}.col-md-pull-3{right:25%}.col-md-pull-4{right:33.33333%}.col-md-pull-5{right:41.66667%}.col-md-pull-6{right:50%}.col-md-pull-7{right:58.33333%}.col-md-pull-8{right:66.66667%}.col-md-pull-9{right:75%}.col-md-pull-10{right:83.33333%}.col-md-pull-11{right:91.66667%}.col-md-pull-12{right:100%}.col-md-push-0{left:auto}.col-md-push-1{left:8.33333%}.col-md-push-2{left:16.66667%}.col-md-push-3{left:25%}.col-md-push-4{left:33.33333%}.col-md-push-5{left:41.66667%}.col-md-push-6{left:50%}.col-md-push-7{left:58.33333%}.col-md-push-8{left:66.66667%}.col-md-push-9{left:75%}.col-md-push-10{left:83.33333%}.col-md-push-11{left:91.66667%}.col-md-push-12{left:100%}.col-md-offset-0{margin-left:0}.col-md-offset-1{margin-left:8.33333%}.col-md-offset-2{margin-left:16.66667%}.col-md-offset-3{margin-left:25%}.col-md-offset-4{margin-left:33.33333%}.col-md-offset-5{margin-left:41.66667%}.col-md-offset-6{margin-left:50%}.col-md-offset-7{margin-left:58.33333%}.col-md-offset-8{margin-left:66.66667%}.col-md-offset-9{margin-left:75%}.col-md-offset-10{margin-left:83.33333%}.col-md-offset-11{margin-left:91.66667%}.col-md-offset-12{margin-left:100%}.modal-lg{width:900px}.header{width:16.66667%}.sidebar{width:25%}.sidebar .slimContent{padding-right:25px;padding-left:25px}.main{width:58.33333%;padding-right:25px;padding-left:25px}.footer{width:16.66667%}body.main-center .main{margin-left:16.66667%}body.main-left .sidebar{margin-right:16.66667%}body.main-right .sidebar{margin-left:16.66667%}body.main-right .main{margin-left:41.66667%}body.no-sidebar.main-left .main{width:83.33333333%;margin-right:16.66667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:83.33333333%;margin-left:16.66667%}.bar.bar-footer:before{width:-webkit-calc(100% + 50px);width:calc(100% + 50px);left:-25px}.marked-body .headerlink:before,.marked-body .markdownIt-Anchor:before{display:inline-block;width:18px;content:\"#\";color:#0a6ebd;text-align:right;float:left;visibility:hidden}.marked-body .headerlink:before{margin-left:-15px;padding-right:2px}.marked-body .markdownIt-Anchor:before{margin-left:-20px}.marked-body h1:hover .headerlink:before,.marked-body h1:hover .markdownIt-Anchor:before,.marked-body h2:hover .headerlink:before,.marked-body h2:hover .markdownIt-Anchor:before,.marked-body h3:hover .headerlink:before,.marked-body h3:hover .markdownIt-Anchor:before,.marked-body h4:hover .headerlink:before,.marked-body h4:hover .markdownIt-Anchor:before,.marked-body h5:hover .headerlink:before,.marked-body h5:hover .markdownIt-Anchor:before,.marked-body h6:hover .headerlink:before,.marked-body h6:hover .markdownIt-Anchor:before{visibility:visible}}@media (min-width:1200px){.container{width:1170px}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}.col-lg-1{width:8.33333%}.col-lg-2{width:16.66667%}.col-lg-3{width:25%}.col-lg-4{width:33.33333%}.col-lg-5{width:41.66667%}.col-lg-6{width:50%}.col-lg-7{width:58.33333%}.col-lg-8{width:66.66667%}.col-lg-9{width:75%}.col-lg-10{width:83.33333%}.col-lg-11{width:91.66667%}.col-lg-12{width:100%}.col-lg-pull-0{right:auto}.col-lg-pull-1{right:8.33333%}.col-lg-pull-2{right:16.66667%}.col-lg-pull-3{right:25%}.col-lg-pull-4{right:33.33333%}.col-lg-pull-5{right:41.66667%}.col-lg-pull-6{right:50%}.col-lg-pull-7{right:58.33333%}.col-lg-pull-8{right:66.66667%}.col-lg-pull-9{right:75%}.col-lg-pull-10{right:83.33333%}.col-lg-pull-11{right:91.66667%}.col-lg-pull-12{right:100%}.col-lg-push-0{left:auto}.col-lg-push-1{left:8.33333%}.col-lg-push-2{left:16.66667%}.col-lg-push-3{left:25%}.col-lg-push-4{left:33.33333%}.col-lg-push-5{left:41.66667%}.col-lg-push-6{left:50%}.col-lg-push-7{left:58.33333%}.col-lg-push-8{left:66.66667%}.col-lg-push-9{left:75%}.col-lg-push-10{left:83.33333%}.col-lg-push-11{left:91.66667%}.col-lg-push-12{left:100%}.col-lg-offset-0{margin-left:0}.col-lg-offset-1{margin-left:8.33333%}.col-lg-offset-2{margin-left:16.66667%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-4{margin-left:33.33333%}.col-lg-offset-5{margin-left:41.66667%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-7{margin-left:58.33333%}.col-lg-offset-8{margin-left:66.66667%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-10{margin-left:83.33333%}.col-lg-offset-11{margin-left:91.66667%}.col-lg-offset-12{margin-left:100%}.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}.visible-lg-block{display:block!important}.visible-lg-inline{display:inline!important}.visible-lg-inline-block{display:inline-block!important}.hidden-lg{display:none!important}.header{width:16.66667%}.sidebar{width:23%}.sidebar .slimContent{padding-right:30px;padding-left:30px}.main{width:60.33333%;padding-right:30px;padding-left:30px}.footer{width:16.66667%}body.main-center .main{margin-left:16.66667%}body.main-left .sidebar{margin-right:16.66667%}body.main-right .sidebar{margin-left:16.66667%}body.main-right .main{margin-left:39.66667%}body.no-sidebar.main-left .main{width:83.33333333%;margin-right:16.66667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:83.33333333%;margin-left:16.66667%}.main-nav>li>a{padding:10px 20px}.bar.bar-footer:before{width:-webkit-calc(100% + 60px);width:calc(100% + 60px);left:-30px}}@media (min-width:1440px){.header{width:16.66667%}.sidebar{width:21%}.main{width:62.33333%}.footer{width:16.66667%}body.main-center .main{margin-left:16.66667%}body.main-left .sidebar{margin-right:16.66667%}body.main-right .sidebar{margin-left:16.66667%}body.main-right .main{margin-left:37.66667%}body.no-sidebar.main-left .main{width:83.33333333%;margin-right:16.66667%}body.no-sidebar.main-center .main,body.no-sidebar.main-right .main{width:83.33333333%;margin-left:16.66667%}.header #title{font-size:15px}}@media (max-width:1199px){.main-nav>li>a{padding:6px 20px}.bar .pager li a span,.footer .copyright{display:none}}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:21px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#090909}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}.visible-xs-block{display:block!important}.visible-xs-inline{display:inline!important}.visible-xs-inline-block{display:inline-block!important}.hidden-xs{display:none!important}body{padding-top:53px}.list-circle-num,.list-square-num{margin:0 0 40px}.modal-xs-full .modal-content,.modal-xs-full .modal-dialog{height:100%;width:100%;margin:0;border-radius:0;-webkit-box-shadow:none;box-shadow:none}.modal-xs-full .modal-content .donate-box,.modal-xs-full .modal-dialog .donate-box{padding-top:50px}.highlight table:before{display:block;content:' ';height:38px;position:absolute;top:0;left:0;right:0;margin-left:-10px;margin-right:-10px;margin-top:-38px;background-color:#f6f6f6;border-top-left-radius:4px;border-top-right-radius:4px}.header{position:fixed;left:0;right:0;top:0;width:100%;z-index:1050}.header:after,.header:before{content:\" \";display:table}.header:after{clear:both}.sidebar{display:none}.main{min-height:auto}.main-nav>li>a{padding:10px 20px}.sidebar-form{border:0;margin:9px 45px 9px 0}.sidebar-form .input-group-btn .btn{color:#2196f3}.sidebar-form input[type=text]:focus{background-color:transparent}.sidebar-form input[type=text]:focus+.input-group-btn .btn{color:#2196f3;background-color:transparent}.header .navbar-toggle{position:absolute;top:0;right:0;margin-right:5px}.header .navbar-toggle .icon-bar{width:18px}.header .search{width:90%;float:right}.header .profile-block{padding:0;margin:10px 0;width:8.33333%;float:left}.header #avatar{width:32px;height:32px}.header #location,.header #name,.header #title{display:none}#main-navbar{position:absolute;width:100%;background-color:#fbfbfb;border-bottom:1px solid #f6f6f6;z-index:99}.main .content{min-height:auto}.sidebar-toc.in{position:fixed;top:50px;bottom:50px;z-index:9}.bar.bar-footer{top:auto!important;bottom:0!important}.footer{display:none;position:static}.footer .copyright{display:block}.social-links .tooltip{display:none!important;visibility:hidden}.theme-black .search input[type=text]:focus,.theme-blue .search input[type=text]:focus,.theme-green .search input[type=text]:focus,.theme-purple .search input[type=text]:focus{background-color:transparent}.theme-black .search input[type=text]:focus+.input-group-btn .btn,.theme-blue .search input[type=text]:focus+.input-group-btn .btn,.theme-green .search input[type=text]:focus+.input-group-btn .btn,.theme-purple .search input[type=text]:focus+.input-group-btn .btn{color:rgba(255,255,255,.5);background-color:transparent}.theme-black #main-navbar{background:#1a2433;background:-webkit-linear-gradient(left,#1a2433 0,#253449 80%,#253449 100%);background:-webkit-gradient(linear,left top,right top,from(#1a2433),color-stop(80%,#253449),to(#253449));background:linear-gradient(to right,#1a2433 0,#253449 80%,#253449 100%)}.theme-blue #main-navbar{background:#0062c5;background:-webkit-linear-gradient(left,#0062c5 0,#0073e6 80%,#0073e6 100%);background:-webkit-gradient(linear,left top,right top,from(#0062c5),color-stop(80%,#0073e6),to(#0073e6));background:linear-gradient(to right,#0062c5 0,#0073e6 80%,#0073e6 100%)}.theme-green #main-navbar{background:#08a283;background:-webkit-linear-gradient(left,#08a283 0,#0ac29d 80%,#0ac29d 100%);background:-webkit-gradient(linear,left top,right top,from(#08a283),color-stop(80%,#0ac29d),to(#0ac29d));background:linear-gradient(to right,#08a283 0,#0ac29d 80%,#0ac29d 100%)}.theme-purple #main-navbar{background:#494683;background:-webkit-linear-gradient(left,#494683 0,#555299 80%,#555299 100%);background:-webkit-gradient(linear,left top,right top,from(#494683),color-stop(80%,#555299),to(#555299));background:linear-gradient(to right,#494683 0,#555299 80%,#555299 100%)}}@media screen and (max-width:559px),screen and (max-height:479px){.ins-search-container{top:0;left:0;margin:0;width:100%;height:100%;background:#f7f7f7}}@media (max-width:480px){.header #avatar{width:24px;height:24px;margin-top:3px;margin-left:15px}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}.visible-sm-block{display:block!important}.visible-sm-inline{display:inline!important}.visible-sm-inline-block{display:inline-block!important}.hidden-sm{display:none!important}.sidebar-form{display:none}.header .main-nav>li>a{text-align:center;padding-left:0;padding-right:0}.header .main-nav>li>a span{display:none}.header .profile-block{padding-top:10px;padding-left:0;padding-right:0}.header #avatar{width:32px;height:32px}.footer{padding-left:0;padding-right:0}.social-links{display:block;width:100%;text-align:center;margin-bottom:0}.social-links:after,.social-links:before{content:\" \";display:table}.social-links:after{clear:both}.social-links li{display:block;margin-left:0;margin-top:10px}.social-links li:after,.social-links li:before{content:\" \";display:table}.social-links li:after{clear:both}.social-links .tooltip{display:none!important;visibility:hidden}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}.visible-md-block{display:block!important}.visible-md-inline{display:inline!important}.visible-md-inline-block{display:inline-block!important}.hidden-md{display:none!important}}@media print{*,:after,:before{background:0 0!important;color:#000!important;-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"#\"]:after,a[href^=\"javascript:\"]:after{content:\"\"}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}.visible-print-block{display:block!important}.visible-print-inline{display:inline!important}.visible-print-inline-block{display:inline-block!important}.hidden-print{display:none!important}}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}"},{"title":"","date":"2022-06-24T17:19:04.511Z","updated":"2022-06-24T17:19:04.511Z","comments":true,"path":"js/application.js","permalink":"http://fyupeng.github.io/js/application.js","excerpt":"","text":"$(function() { // bootstrap tooltip $('[data-toggle=\"tooltip\"]').tooltip(); // slimscroll if (typeof $.fn.slimScroll != 'undefined') { $(\".sidebar .slimContent\").slimScroll({ height: $(window).height(), color: \"rgba(0,0,0,0.15)\", size: \"5px\", position: 'right', // allowPageScroll: true }); } $('#collapseToc').on('shown.bs.collapse', function() { // do something… // slimscroll if (typeof $.fn.slimScroll != 'undefined') { $(\".sidebar .slimContent\").slimScroll().on('slimscroll'); } }); // geopattern 背景生成 $(\".geopattern\").each(function() { $(this).geopattern($(this).data('pattern-id')); }); // okayNav var navigation = $('#nav-main').okayNav({ swipe_enabled: false, // If true, you'll be able to swipe left/right to open the navigation }); // modal居中 // $('.modal').on('shown.bs.modal', function(e) { // $(this).show(); // var modalDialog = $(this).find(\".modal-dialog\"); // // Applying the top margin on modal dialog to align it vertically center // modalDialog.css(\"margin-top\", Math.max(0, ($(window).height() - modalDialog.height()) / 2)); // }); // sticky $('[data-stick-bottom]').keepInView({ fixed: false, parentClass: \"has-sticky\", customClass: \"sticky\", trigger: 'bottom', zindex: 42, edgeOffset: 0 }); $('[data-stick-top]').keepInView({ fixed: true, parentClass: \"has-sticky\", customClass: \"sticky\", trigger: 'top', zindex: 42, edgeOffset: 0 }); // menu auto highlight var menuHighlight = $(\"ul.main-nav\").hasClass('menu-highlight'); if (menuHighlight) { var currentPathname = location.pathname, $menuList = $(\"ul.main-nav>li\"), activeIndex = -1; for (var i = 0, length = $menuList.length; i < length; i++) { var itemHref = $($menuList[i]).find('a').attr('href'); if (currentPathname.indexOf(itemHref) > -1 || (currentPathname === '/' && (itemHref === '/.' || itemHref === '/' || itemHref === 'index.html' || itemHref === '/index.html'))) { activeIndex = i; } $($menuList[i]).removeClass('active'); } $menuList[activeIndex] && $($menuList[activeIndex]).addClass('active'); } });"},{"title":"","date":"2022-06-24T17:19:04.512Z","updated":"2022-06-24T17:19:04.512Z","comments":true,"path":"js/application.min.js","permalink":"http://fyupeng.github.io/js/application.min.js","excerpt":"","text":"$(function(){$('[data-toggle=\"tooltip\"]').tooltip(),\"undefined\"!=typeof $.fn.slimScroll&&$(\".sidebar .slimContent\").slimScroll({height:$(window).height(),color:\"rgba(0,0,0,0.15)\",size:\"5px\",position:\"right\"}),$(\"#collapseToc\").on(\"shown.bs.collapse\",function(){\"undefined\"!=typeof $.fn.slimScroll&&$(\".sidebar .slimContent\").slimScroll().on(\"slimscroll\")}),$(\".geopattern\").each(function(){$(this).geopattern($(this).data(\"pattern-id\"))});$(\"#nav-main\").okayNav({swipe_enabled:!1});$(\"[data-stick-bottom]\").keepInView({fixed:!1,parentClass:\"has-sticky\",customClass:\"sticky\",trigger:\"bottom\",zindex:42,edgeOffset:0}),$(\"[data-stick-top]\").keepInView({fixed:!0,parentClass:\"has-sticky\",customClass:\"sticky\",trigger:\"top\",zindex:42,edgeOffset:0});var t=$(\"ul.main-nav\").hasClass(\"menu-highlight\");if(t){for(var e=location.pathname,i=$(\"ul.main-nav>li\"),a=-1,s=0,n=i.length;s-1||\"/\"===e&&(\"/.\"===o||\"/\"===o||\"index.html\"===o||\"/index.html\"===o))&&(a=s),$(i[s]).removeClass(\"active\")}i[a]&&$(i[a]).addClass(\"active\")}});"},{"title":"","date":"2022-06-24T17:19:04.513Z","updated":"2022-06-24T17:19:04.513Z","comments":true,"path":"js/insight.js","permalink":"http://fyupeng.github.io/js/insight.js","excerpt":"","text":"/** * Insight search plugin * @author PPOffice { @link https://github.com/ppoffice } */ (function ($, CONFIG) { var $main = $('.ins-search'); var $input = $main.find('.ins-search-input'); var $wrapper = $main.find('.ins-section-wrapper'); var $container = $main.find('.ins-section-container'); $main.parent().remove('.ins-search'); $('body').append($main); function section (title) { return $('').addClass('ins-section') .append($('').addClass('ins-section-header').text(title)); } function searchItem (icon, title, slug, preview, url) { return $('').addClass('ins-selectable').addClass('ins-search-item') .append($('').append($('').addClass('icon').addClass('icon-' + icon)).append(title != null && title != '' ? title : CONFIG.TRANSLATION['UNTITLED']) .append(slug ? $('').addClass('ins-slug').text(slug) : null)) .append(preview ? $('').addClass('ins-search-preview').text(preview) : null) .attr('data-url', url); } function sectionFactory (type, array) { var sectionTitle; var $searchItems; if (array.length === 0) return null; sectionTitle = CONFIG.TRANSLATION[type]; switch (type) { case 'POSTS': case 'PAGES': $searchItems = array.map(function (item) { // Use config.root instead of permalink to fix url issue return searchItem('file', item.title, null, item.text.slice(0, 150), CONFIG.ROOT_URL + item.path); }); break; case 'CATEGORIES': case 'TAGS': $searchItems = array.map(function (item) { return searchItem(type === 'CATEGORIES' ? 'folder' : 'tag', item.name, item.slug, null, item.permalink); }); break; default: return null; } return section(sectionTitle).append($searchItems); } function extractToSet (json, key) { var values = {}; var entries = json.pages.concat(json.posts); entries.forEach(function (entry) { if (entry[key]) { entry[key].forEach(function (value) { values[value.name] = value; }); } }); var result = []; for (var key in values) { result.push(values[key]); } return result; } function parseKeywords (keywords) { return keywords.split(' ').filter(function (keyword) { return !!keyword; }).map(function (keyword) { return keyword.toUpperCase(); }); } /** * Judge if a given post/page/category/tag contains all of the keywords. * @param Object obj Object to be weighted * @param Array fields Object's fields to find matches */ function filter (keywords, obj, fields) { var result = false; var keywordArray = parseKeywords(keywords); var containKeywords = keywordArray.filter(function (keyword) { var containFields = fields.filter(function (field) { if (!obj.hasOwnProperty(field)) return false; if (obj[field].toUpperCase().indexOf(keyword) > -1) return true; }); if (containFields.length > 0) return true; return false; }); return containKeywords.length === keywordArray.length; } function filterFactory (keywords) { return { POST: function (obj) { return filter(keywords, obj, ['title', 'text']); }, PAGE: function (obj) { return filter(keywords, obj, ['title', 'text']); }, CATEGORY: function (obj) { return filter(keywords, obj, ['name', 'slug']); }, TAG: function (obj) { return filter(keywords, obj, ['name', 'slug']); } }; } /** * Calculate the weight of a matched post/page/category/tag. * @param Object obj Object to be weighted * @param Array fields Object's fields to find matches * @param Array weights Weight of every field */ function weight (keywords, obj, fields, weights) { var value = 0; parseKeywords(keywords).forEach(function (keyword) { var pattern = new RegExp(keyword, 'img'); // Global, Multi-line, Case-insensitive fields.forEach(function (field, index) { if (obj.hasOwnProperty(field)) { var matches = obj[field].match(pattern); value += matches ? matches.length * weights[index] : 0; } }); }); return value; } function weightFactory (keywords) { return { POST: function (obj) { return weight(keywords, obj, ['title', 'text'], [3, 1]); }, PAGE: function (obj) { return weight(keywords, obj, ['title', 'text'], [3, 1]); }, CATEGORY: function (obj) { return weight(keywords, obj, ['name', 'slug'], [1, 1]); }, TAG: function (obj) { return weight(keywords, obj, ['name', 'slug'], [1, 1]); } }; } function search (json, keywords) { var WEIGHTS = weightFactory(keywords); var FILTERS = filterFactory(keywords); var posts = json.posts; var pages = json.pages; var tags = extractToSet(json, 'tags'); var categories = extractToSet(json, 'categories'); return { posts: posts.filter(FILTERS.POST).sort(function (a, b) { return WEIGHTS.POST(b) - WEIGHTS.POST(a); }).slice(0, 5), pages: pages.filter(FILTERS.PAGE).sort(function (a, b) { return WEIGHTS.PAGE(b) - WEIGHTS.PAGE(a); }).slice(0, 5), categories: categories.filter(FILTERS.CATEGORY).sort(function (a, b) { return WEIGHTS.CATEGORY(b) - WEIGHTS.CATEGORY(a); }).slice(0, 5), tags: tags.filter(FILTERS.TAG).sort(function (a, b) { return WEIGHTS.TAG(b) - WEIGHTS.TAG(a); }).slice(0, 5) }; } function searchResultToDOM (searchResult) { $container.empty(); for (var key in searchResult) { $container.append(sectionFactory(key.toUpperCase(), searchResult[key])); } } function scrollTo ($item) { if ($item.length === 0) return; var wrapperHeight = $wrapper[0].clientHeight; var itemTop = $item.position().top - $wrapper.scrollTop(); var itemBottom = $item[0].clientHeight + $item.position().top; if (itemBottom > wrapperHeight + $wrapper.scrollTop()) { $wrapper.scrollTop(itemBottom - $wrapper[0].clientHeight); } if (itemTop < 0) { $wrapper.scrollTop($item.position().top); } } function selectItemByDiff (value) { var $items = $.makeArray($container.find('.ins-selectable')); var prevPosition = -1; $items.forEach(function (item, index) { if ($(item).hasClass('active')) { prevPosition = index; return; } }); var nextPosition = ($items.length + prevPosition + value) % $items.length; $($items[prevPosition]).removeClass('active'); $($items[nextPosition]).addClass('active'); scrollTo($($items[nextPosition])); } function gotoLink ($item) { if ($item && $item.length) { location.href = $item.attr('data-url'); } } $.getJSON(CONFIG.CONTENT_URL, function (json) { if (location.hash.trim() === '#ins-search') { $main.addClass('show'); } $input.on('input', function () { var keywords = $(this).val(); searchResultToDOM(search(json, keywords)); }); $input.trigger('input'); }); $(document).on('click focus', '.search-form-input', function () { $main.addClass('show'); $main.find('.ins-search-input').focus(); }).on('click', '.ins-search-item', function () { gotoLink($(this)); }).on('click', '.ins-close', function () { $main.removeClass('show'); }).on('keydown', function (e) { if (!$main.hasClass('show')) return; switch (e.keyCode) { case 27: // ESC $main.removeClass('show'); break; case 38: // UP selectItemByDiff(-1); break; case 40: // DOWN selectItemByDiff(1); break; case 13: //ENTER gotoLink($container.find('.ins-selectable.active').eq(0)); break; } }); })(jQuery, window.INSIGHT_CONFIG);"},{"title":"","date":"2022-06-24T17:19:04.514Z","updated":"2022-06-24T17:19:04.514Z","comments":true,"path":"js/jquery.min.js","permalink":"http://fyupeng.github.io/js/jquery.min.js","excerpt":"","text":"/*! jQuery v1.12.4 | (c) jQuery Foundation | jquery.org/license */ !function(a,b){\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error(\"jQuery requires a window with a document\");return b(a)}:b(a)}(\"undefined\"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m=\"1.12.4\",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:\"\",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for(\"boolean\"==typeof g&&(j=g,g=arguments[h]||{},h++),\"object\"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:\"jQuery\"+(m+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return\"function\"===n.type(a)},isArray:Array.isArray||function(a){return\"array\"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||\"object\"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,\"constructor\")&&!k.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+\"\":\"object\"==typeof a||\"function\"==typeof a?i[j.call(a)]||\"object\":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,\"ms-\").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?\"\":(a+\"\").replace(o,\"\")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,\"string\"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return\"string\"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),\"function\"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(a,b){i[\"[object \"+b+\"]\"]=b.toLowerCase()});function s(a){var b=!!a&&\"length\"in a&&a.length,c=n.type(a);return\"function\"===c||n.isWindow(a)?!1:\"array\"===c||0===b||\"number\"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u=\"sizzle\"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1"},{"title":"友情链接","date":"2022-06-24T18:09:11.563Z","updated":"2022-06-24T18:09:11.563Z","comments":true,"path":"links/index.html","permalink":"http://fyupeng.github.io/links/index.html","excerpt":"","text":""},{"title":"","date":"2022-06-24T18:07:49.466Z","updated":"2022-06-24T18:07:49.466Z","comments":true,"path":"js/plugin.js","permalink":"http://fyupeng.github.io/js/plugin.js","excerpt":"","text":"/** * baiduTemplate简单好用的Javascript模板引擎 1.0.6 版本 * http://baidufe.github.com/BaiduTemplate * 开源协议：BSD License * 浏览器环境占用命名空间 baidu.template ，nodejs环境直接安装 npm install baidutemplate * @param str{String} dom结点ID，或者模板string * @param data{Object} 需要渲染的json对象，可以为空。当data为{}时，仍然返回html。 * @return 如果无data，直接返回编译后的函数；如果有data，返回html。 * @author wangxiao * @email 1988wangxiao@gmail.com */ ;(function(window){ //取得浏览器环境的baidu命名空间，非浏览器环境符合commonjs规范exports出去 //修正在nodejs环境下，采用baidu.template变量名 var baidu = typeof module === 'undefined' ? (window.baidu = window.baidu || {}) : module.exports; //模板函数（放置于baidu.template命名空间下） baidu.template = function(str, data){ //检查是否有该id的元素存在，如果有元素则获取元素的innerHTML/value，否则认为字符串为模板 var fn = (function(){ //判断如果没有document，则为非浏览器环境 if(!window.document){ return bt._compile(str); }; //HTML5规定ID可以由任何不包含空格字符的字符串组成 var element = document.getElementById(str); if (element) { //取到对应id的dom，缓存其编译后的HTML模板函数 if (bt.cache[str]) { return bt.cache[str]; }; //textarea或input则取value，其它情况取innerHTML var html = /^(textarea|input)$/i.test(element.nodeName) ? element.value : element.innerHTML; return bt._compile(html); }else{ //是模板字符串，则生成一个函数 //如果直接传入字符串作为模板，则可能变化过多，因此不考虑缓存 return bt._compile(str); }; })(); //有数据则返回HTML字符串，没有数据则返回函数 支持data={}的情况 var result = bt._isObject(data) ? fn( data ) : fn; fn = null; return result; }; //取得命名空间 baidu.template var bt = baidu.template; //标记当前版本 bt.versions = bt.versions || []; bt.versions.push('1.0.6'); //缓存 将对应id模板生成的函数缓存下来。 bt.cache = {}; //自定义分隔符，可以含有正则中的字符，可以是HTML注释开头 bt.LEFT_DELIMITER = bt.LEFT_DELIMITER||'{ %'; bt.RIGHT_DELIMITER = bt.RIGHT_DELIMITER||'% }'; //自定义默认是否转义，默认为默认自动转义 bt.ESCAPE = true; //HTML转义 bt._encodeHTML = function (source) { return String(source) .replace(/&/g,'&amp;') .replace(//g,'&gt;') .replace(/\\\\/g,'&#92;') .replace(/\"/g,'&quot;') .replace(/'/g,'&#39;'); }; //转义影响正则的字符 bt._encodeReg = function (source) { return String(source).replace(/([.*+?^=!:${}()|[\\]/\\\\])/g,'\\\\$1'); }; //转义UI UI变量使用在HTML页面标签onclick等事件函数参数中 bt._encodeEventHTML = function (source) { return String(source) .replace(/&/g,'&amp;') .replace(//g,'&gt;') .replace(/\"/g,'&quot;') .replace(/'/g,'&#39;') .replace(/\\\\\\\\/g,'\\\\') .replace(/\\\\\\//g,'\\/') .replace(/\\\\n/g,'\\n') .replace(/\\\\r/g,'\\r'); }; //将字符串拼接生成函数，即编译过程(compile) bt._compile = function(str){ var funBody = \"var _template_fun_array=[];\\nvar fn=(function(__data__){\\nvar _template_varName='';\\nfor(name in __data__){\\n_template_varName+=('var '+name+'=__data__[\\\"'+name+'\\\"];');\\n};\\neval(_template_varName);\\n_template_fun_array.push('\"+bt._analysisStr(str)+\"');\\n_template_varName=null;\\n})(_template_object);\\nfn = null;\\nreturn _template_fun_array.join('');\\n\"; return new Function(\"_template_object\",funBody); }; //判断是否是Object类型 bt._isObject = function (source) { return 'function' === typeof source || !!(source && 'object' === typeof source); }; //解析模板字符串 bt._analysisStr = function(str){ //取得分隔符 var _left_ = bt.LEFT_DELIMITER; var _right_ = bt.RIGHT_DELIMITER; //对分隔符进行转义，支持正则中的元字符，可以是HTML注释 var _left = bt._encodeReg(_left_); var _right = bt._encodeReg(_right_); str = String(str) //去掉分隔符中js注释 .replace(new RegExp(\"(\"+_left+\"[^\"+_right+\"]*)//.*\\n\",\"g\"), \"$1\") //去掉注释内容 //默认支持HTML注释，将HTML注释匹配掉的原因是用户有可能用 来做分割符 .replace(new RegExp(\"\", \"g\"),\"\") .replace(new RegExp(_left+\"\\\\*.*?\\\\*\"+_right, \"g\"),\"\") //把所有换行去掉 \\r回车符 \\t制表符 \\n换行符 .replace(new RegExp(\"[\\\\r\\\\t\\\\n]\",\"g\"), \"\") //用来处理非分隔符内部的内容中含有 斜杠 \\ 单引号 ‘ ，处理办法为HTML转义 .replace(new RegExp(_left+\"(?:(?!\"+_right+\")[\\\\s\\\\S])*\"+_right+\"|((?:(?!\"+_left+\")[\\\\s\\\\S])+)\",\"g\"),function (item, $1) { var str = ''; if($1){ //将 斜杠 单引 HTML转义 str = $1.replace(/\\\\/g,\"&#92;\").replace(/'/g,'&#39;'); while(/\"+8*h+\")\");for(c.getLengthInBits()+4=8*h)&&(c.put(o,8),!(c.getLengthInBits()>=8*h));)c.put(a,8);return C(c,n)};return w.addData=function(r){var t=c(r);p.push(t),v=null},w.isDark=function(r,t){if(0>r||r>=d||0>t||t>=d)throw new Error(r+\",\"+t);return h[r][t]},w.getModuleCount=function(){return d},w.make=function(){m(!1,y())},w.createTableTag=function(r,t){r=r||2,t=\"undefined\"==typeof t?4*r:t;var e=\"\";e+='',e+=\"\";for(var n=0;nt&&e>=n&&o>e){var i=Math.floor((t-n)/r),a=Math.floor((e-n)/r);return w.isDark(a,i)?0:1}return 1})},w};t.stringToBytes=function(r){for(var t=new Array,e=0;e>=1;return t};return f.getBCHTypeInfo=function(r){for(var t=r=t))for(var f=-1;1>=f;f+=1)0>o+f||o+f>=t||(0!=u||0!=f)&&a==r.isDark(n+u,o+f)&&(i+=1);i>5&&(e+=3+i-5)}for(var n=0;t-1>n;n+=1)for(var o=0;t-1>o;o+=1){var c=0;r.isDark(n,o)&&(c+=1),r.isDark(n+1,o)&&(c+=1),r.isDark(n,o+1)&&(c+=1),r.isDark(n+1,o+1)&&(c+=1),(0==c||4==c)&&(e+=3)}for(var n=0;t>n;n+=1)for(var o=0;t-6>o;o+=1)r.isDark(n,o)&&!r.isDark(n,o+1)&&r.isDark(n,o+2)&&r.isDark(n,o+3)&&r.isDark(n,o+4)&&!r.isDark(n,o+5)&&r.isDark(n,o+6)&&(e+=40);for(var o=0;t>o;o+=1)for(var n=0;t-6>n;n+=1)r.isDark(n,o)&&!r.isDark(n+1,o)&&r.isDark(n+2,o)&&r.isDark(n+3,o)&&r.isDark(n+4,o)&&!r.isDark(n+5,o)&&r.isDark(n+6,o)&&(e+=40);for(var s=0,o=0;t>o;o+=1)for(var n=0;t>n;n+=1)r.isDark(n,o)&&(s+=1);var l=Math.abs(100*s/t/t-50)/5;return e+=10*l},f}(),a=function(){for(var r=new Array(256),t=new Array(256),e=0;8>e;e+=1)r[e]=1e;e+=1)t[r[e]]=e;var n={};return n.glog=function(r){if(1>r)throw new Error(\"glog(\"+r+\")\");return t[r]},n.gexp=function(t){for(;0>t;)t+=255;for(;t>=256;)t-=255;return r[t]},n}(),u=function(){var r=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],t=function(r,t){var e={};return e.totalCount=r,e.dataCount=t,e},e={},o=function(t,e){switch(e){case n.L:return r[4*(t-1)+0];case n.M:return r[4*(t-1)+1];case n.Q:return r[4*(t-1)+2];case n.H:return r[4*(t-1)+3];default:return}};return e.getRSBlocks=function(r,e){var n=o(r,e);if(\"undefined\"==typeof n)throw new Error(\"bad rs block @ typeNumber:\"+r+\"/errorCorrectLevel:\"+e);for(var i=n.length/3,a=new Array,u=0;i>u;u+=1)for(var f=n[3*u+0],c=n[3*u+1],s=n[3*u+2],l=0;f>l;l+=1)a.push(t(c,s));return a},e}(),f=function(){var r=new Array,t=0,e={};return e.getBuffer=function(){return r},e.getAt=function(t){var e=Math.floor(t/8);return 1==(r[e]>>>7-t%8&1)},e.put=function(r,t){for(var n=0;t>n;n+=1)e.putBit(1==(r>>>t-n-1&1))},e.getLengthInBits=function(){return t},e.putBit=function(e){var n=Math.floor(t/8);r.length>>t%8),t+=1},e},c=function(r){var n=e.MODE_8BIT_BYTE,o=t.stringToBytes(r),i={};return i.getMode=function(){return n},i.getLength=function(r){return o.length},i.write=function(r){for(var t=0;t>>8)},t.writeBytes=function(r,e,n){e=e||0,n=n||r.length;for(var o=0;n>o;o+=1)t.writeByte(r[o+e])},t.writeString=function(r){for(var e=0;er);else{if(26>r)return 65+r;if(52>r)return 97+(r-26);if(62>r)return 48+(r-52);if(62==r)return 43;if(63==r)return 47}throw new Error(\"n:\"+r)};return o.writeByte=function(n){for(r=r>>t-6),t-=6},o.flush=function(){if(t>0&&(i(ro;){if(e>=t.length){if(0==o)return-1;throw new Error(\"unexpected end of file./\"+o)}var r=t.charAt(e);if(e+=1,\"=\"==r)return o=0,-1;r.match(/^\\s$/)||(n=n>o-8&255;return o-=8,i};var a=function(r){if(r>=65&&90>=r)return r-65;if(r>=97&&122>=r)return r-97+26;if(r>=48&&57>=r)return r-48+52;if(43==r)return 62;if(47==r)return 63;throw new Error(\"c:\"+r)};return i},d=function(r,t){var e=r,n=t,o=new Array(r*t),i={};i.setPixel=function(r,t,n){o[t*e+r]=n},i.write=function(r){r.writeString(\"GIF87a\"),r.writeShort(e),r.writeShort(n),r.writeByte(128),r.writeByte(0),r.writeByte(0),r.writeByte(0),r.writeByte(0),r.writeByte(0),r.writeByte(255),r.writeByte(255),r.writeByte(255),r.writeString(\",\"),r.writeShort(0),r.writeShort(0),r.writeShort(e),r.writeShort(n),r.writeByte(0);var t=2,o=u(t);r.writeByte(t);for(var i=0;o.length-i>255;)r.writeByte(255),r.writeBytes(o,i,255),i+=255;r.writeByte(o.length-i),r.writeBytes(o,i,o.length-i),r.writeByte(0),r.writeString(\";\")};var a=function(r){var t=r,e=0,n=0,o={};return o.write=function(r,o){if(r>>>o!=0)throw new Error(\"length over\");for(;e+o>=8;)t.writeByte(255&(r>=8-e,n=0,e=0;n|=r12,128|n>>6&63,128|63&n):(e++,n=65536+((1023&n)18,128|n>>12&63,128|n>>6&63,128|63&n))}return t}return t(r)}}(r),r}()),function(r){r.fn.share=function(t){function e(t,e){var n=o(e);\"prepend\"==e.mode?n.reverse():n,n.length&&r.each(n,function(n,o){var a=i(o,e),u=e.initialized?t.find(\".icon-\"+o):r('');return!u.length||(u.prop(\"aria-label\",\"分享到 \"+h[o]),u.prop(\"href\",a),\"wechat\"===o?u.prop(\"tabindex\",-1):u.prop(\"target\",\"_blank\"),void(e.initialized||(\"prepend\"==e.mode?t.prepend(u):t.append(u))))})}function n(r,t){var e=r.find(\"a.icon-wechat\");e.length&&(e.append(''+t.wechatQrcodeTitle+''+t.wechatQrcodeHelper+\"\"),e.find(\".qrcode\").qrcode({render:\"image\",size:t.wechatQrcodeSize,text:t.url}),e.offset().top"},{"title":"","date":"2022-06-24T18:11:07.170Z","updated":"2022-06-24T18:11:07.170Z","comments":true,"path":"js/plugin.min.js","permalink":"http://fyupeng.github.io/js/plugin.min.js","excerpt":"","text":"!function(t){var e=\"undefined\"==typeof module?t.baidu=t.baidu||{}:module.exports;e.template=function(e,n){var o=function(){if(!t.document)return i._compile(e);var n=document.getElementById(e);if(n){if(i.cache[e])return i.cache[e];var o=/^(textarea|input)$/i.test(n.nodeName)?n.value:n.innerHTML;return i._compile(o)}return i._compile(e)}(),r=i._isObject(n)?o(n):o;return o=null,r};var i=e.template;i.versions=i.versions||[],i.versions.push(\"1.0.6\"),i.cache={},i.LEFT_DELIMITER=i.LEFT_DELIMITER||\"{ %\",i.RIGHT_DELIMITER=i.RIGHT_DELIMITER||\"% }\",i.ESCAPE=!0,i._encodeHTML=function(t){return String(t).replace(/&/g,\"&amp;\").replace(//g,\"&gt;\").replace(/\\\\/g,\"&#92;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\")},i._encodeReg=function(t){return String(t).replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g,\"\\\\$1\")},i._encodeEventHTML=function(t){return String(t).replace(/&/g,\"&amp;\").replace(//g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#39;\").replace(/\\\\\\\\/g,\"\\\\\").replace(/\\\\\\//g,\"/\").replace(/\\\\n/g,\"\\n\").replace(/\\\\r/g,\"\\r\")},i._compile=function(t){var e=\"var _template_fun_array=[];\\nvar fn=(function(__data__){\\nvar _template_varName='';\\nfor(name in __data__){\\n_template_varName+=('var '+name+'=__data__[\\\"'+name+'\\\"];');\\n};\\neval(_template_varName);\\n_template_fun_array.push('\"+i._analysisStr(t)+\"');\\n_template_varName=null;\\n})(_template_object);\\nfn = null;\\nreturn _template_fun_array.join('');\\n\";return new Function(\"_template_object\",e)},i._isObject=function(t){return\"function\"==typeof t||!(!t||\"object\"!=typeof t)},i._analysisStr=function(t){var e=i.LEFT_DELIMITER,n=i.RIGHT_DELIMITER,o=i._encodeReg(e),r=i._encodeReg(n);return t=String(t).replace(new RegExp(\"(\"+o+\"[^\"+r+\"]*)//.*\\n\",\"g\"),\"$1\").replace(new RegExp(\"\",\"g\"),\"\").replace(new RegExp(o+\"\\\\*.*?\\\\*\"+r,\"g\"),\"\").replace(new RegExp(\"[\\\\r\\\\t\\\\n]\",\"g\"),\"\").replace(new RegExp(o+\"(?:(?!\"+r+\")[\\\\s\\\\S])*\"+r+\"|((?:(?!\"+o+\")[\\\\s\\\\S])+)\",\"g\"),function(t,e){var i=\"\";if(e)for(i=e.replace(/\\\\/g,\"&#92;\").replace(/'/g,\"&#39;\");/i?t+6*(e-t)*i:.5>i?e:2/3>i?t+(e-t)*(2/3-i)*6:t}var i,n,o,r=t.h,s=t.s,a=t.l;if(0===s)i=n=o=a;else{var l=.5>a?a*(1+s):a+s-a*s,h=2*a-l;i=e(h,l,r+1/3),n=e(h,l,r),o=e(h,l,r-1/3)}return{r:Math.round(255*i),g:Math.round(255*n),b:Math.round(255*o)}}e.exports={hex2rgb:i,rgb2hex:n,rgb2hsl:o,hsl2rgb:r,rgb2rgbString:function(t){return\"rgb(\"+[t.r,t.g,t.b].join(\",\")+\")\"}}},{}],3:[function(t,e){!function(i){\"use strict\";function n(t){return function(e,i){return\"object\"==typeof e&&(i=e,e=null),(null===e||void 0===e)&&(e=(new Date).toString()),i||(i={}),t.call(this,e,i)}}var o=t(\"./pattern\"),r=e.exports={generate:n(function(t,e){return new o(t,e)})};i&&(i.fn.geopattern=n(function(t,e){return this.each(function(){var n=i(this).attr(\"data-title-sha\");n&&(e=i.extend({hash:n},e));var o=r.generate(t,e);i(this).css(\"background-image\",o.toDataUrl())})}))}(\"undefined\"!=typeof jQuery?jQuery:null)},{\"./pattern\":4}],4:[function(t,e){(function(i){\"use strict\";function n(t,e,i){return parseInt(t.substr(e,i||1),16)}function o(t,e,i,n,o){var r=parseFloat(t),s=i-e,a=o-n;return(r-e)*a/s+n}function r(t){return t%2===0?k:_}function s(t){return o(t,0,15,S,I)}function a(t){var e=t,i=e/2,n=Math.sin(60*Math.PI/180)*e;return[0,n,i,0,i+e,0,2*e,n,i+e,2*n,i,2*n,0,n].join(\",\")}function l(t,e){var i=.66*e;return[[0,0,t/2,e-i,t/2,e,0,i,0,0],[t/2,e-i,t,0,t,i,t/2,e,t/2,e-i]].map(function(t){return t.join(\",\")})}function h(t){return[[t,0,t,3*t],[0,t,3*t,t]]}function c(t){var e=t,i=.33*e;return[i,0,e-i,0,e,i,e,e-i,e-i,e,i,e,0,e-i,0,i,i,0].join(\",\")}function u(t,e){var i=t/2;return[i,0,t,e,0,e,i,0].join(\",\")}function f(t,e){return[t/2,0,t,e/2,t/2,e,0,e/2].join(\",\")}function p(t){return[0,0,t,t,0,t,0,0].join(\",\")}function d(t,e,i,n,o){var a=p(n),l=s(o[0]),h=r(o[0]),c={stroke:E,\"stroke-opacity\":x,\"fill-opacity\":l,fill:h};t.polyline(a,c).transform({translate:[e+n,i],scale:[-1,1]}),t.polyline(a,c).transform({translate:[e+n,i+2*n],scale:[1,-1]}),l=s(o[1]),h=r(o[1]),c={stroke:E,\"stroke-opacity\":x,\"fill-opacity\":l,fill:h},t.polyline(a,c).transform({translate:[e+n,i+2*n],scale:[-1,-1]}),t.polyline(a,c).transform({translate:[e+n,i],scale:[1,1]})}function g(t,e,i,n,o){var a=s(o),l=r(o),h=p(n),c={stroke:E,\"stroke-opacity\":x,\"fill-opacity\":a,fill:l};t.polyline(h,c).transform({translate:[e,i+n],scale:[1,-1]}),t.polyline(h,c).transform({translate:[e+2*n,i+n],scale:[-1,-1]}),t.polyline(h,c).transform({translate:[e,i+n],scale:[1,1]}),t.polyline(h,c).transform({translate:[e+2*n,i+n],scale:[-1,1]})}function v(t,e){var i=t/2;return[0,0,e,i,0,t,0,0].join(\",\")}var m=t(\"extend\"),y=t(\"./color\"),b=t(\"./sha1\"),w=t(\"./svg\"),T={baseColor:\"#933c3c\"},C=[\"octogons\",\"overlappingCircles\",\"plusSigns\",\"xes\",\"sineWaves\",\"hexagons\",\"overlappingRings\",\"plaid\",\"triangles\",\"squares\",\"concentricCircles\",\"diamonds\",\"tessellation\",\"nestedSquares\",\"mosaicSquares\",\"chevrons\"],_=\"#222\",k=\"#ddd\",E=\"#000\",x=.02,S=.02,I=.15,A=e.exports=function(t,e){return this.opts=m({},T,e),this.hash=e.hash||b(t),this.svg=new w,this.generateBackground(),this.generatePattern(),this};A.prototype.toSvg=function(){return this.svg.toString()},A.prototype.toString=function(){return this.toSvg()},A.prototype.toBase64=function(){var t,e=this.toSvg();return t=\"undefined\"!=typeof window&&\"function\"==typeof window.btoa?window.btoa(e):new i(e).toString(\"base64\")},A.prototype.toDataUri=function(){return\"data:image/svg+xml;base64,\"+this.toBase64()},A.prototype.toDataUrl=function(){return'url(\"'+this.toDataUri()+'\")'},A.prototype.generateBackground=function(){var t,e,i,r;this.opts.color?i=y.hex2rgb(this.opts.color):(e=o(n(this.hash,14,3),0,4095,0,359),r=n(this.hash,17),t=y.rgb2hsl(y.hex2rgb(this.opts.baseColor)),t.h=(360*t.h-e+360)%360/360,t.s=r%2===0?Math.min(1,(100*t.s+r)/100):Math.max(0,(100*t.s-r)/100),i=y.hsl2rgb(t)),this.color=y.rgb2hex(i),this.svg.rect(0,0,\"100%\",\"100%\",{fill:y.rgb2rgbString(i)})},A.prototype.generatePattern=function(){var t=this.opts.generator;if(t){if(C.indexOf(t)f;f++)for(u=0;6>u;u++)c=n(this.hash,i),t=u%2===0?f*g:f*g+g/2,l=s(c),e=r(c),h={fill:e,\"fill-opacity\":l,stroke:E,\"stroke-opacity\":x},this.svg.polyline(m,h).transform({translate:[u*d*1.5-v/2,t-g/2]}),0===u&&this.svg.polyline(m,h).transform({translate:[6*d*1.5-v/2,t-g/2]}),0===f&&(t=u%2===0?6*g:6*g+g/2,this.svg.polyline(m,h).transform({translate:[u*d*1.5-v/2,t-g/2]})),0===u&&0===f&&this.svg.polyline(m,h).transform({translate:[6*d*1.5-v/2,5*g+g/2]}),i++},A.prototype.geoSineWaves=function(){var t,e,i,a,l,h,c,u=Math.floor(o(n(this.hash,0),0,15,100,400)),f=Math.floor(o(n(this.hash,1),0,15,30,100)),p=Math.floor(o(n(this.hash,2),0,15,3,30));for(this.svg.setWidth(u),this.svg.setHeight(36*p),e=0;36>e;e++)h=n(this.hash,e),i=s(h),t=r(h),c=u/4*.7,l={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":\"\"+p+\"px\"},a=\"M0 \"+f+\" C \"+c+\" 0, \"+(u/2-c)+\" 0, \"+u/2+\" \"+f+\" S \"+(u-c)+\" \"+2*f+\", \"+u+\" \"+f+\" S \"+(1.5*u-c)+\" 0, \"+1.5*u+\", \"+f,this.svg.path(a,l).transform({translate:[-u/4,p*e-1.5*f]}),this.svg.path(a,l).transform({translate:[-u/4,p*e-1.5*f+36*p]})},A.prototype.geoChevrons=function(){var t,e,i,a,h,c,u,f=o(n(this.hash,0),0,15,30,80),p=o(n(this.hash,0),0,15,30,80),d=l(f,p);for(this.svg.setWidth(6*f),this.svg.setHeight(6*p*.66),e=0,u=0;6>u;u++)for(c=0;6>c;c++)h=n(this.hash,e),i=s(h),t=r(h),a={stroke:E,\"stroke-opacity\":x,fill:t,\"fill-opacity\":i,\"stroke-width\":1},this.svg.group(a).transform({translate:[c*f,u*p*.66-p/2]}).polyline(d).end(),0===u&&this.svg.group(a).transform({translate:[c*f,6*p*.66-p/2]}).polyline(d).end(),e+=1},A.prototype.geoPlusSigns=function(){var t,e,i,a,l,c,u,f,p=o(n(this.hash,0),0,15,10,25),d=3*p,g=h(p);for(this.svg.setWidth(12*p),this.svg.setHeight(12*p),i=0,f=0;6>f;f++)for(u=0;6>u;u++)c=n(this.hash,i),a=s(c),e=r(c),t=f%2===0?0:1,l={fill:e,stroke:E,\"stroke-opacity\":x,\"fill-opacity\":a},this.svg.group(l).transform({translate:[u*d-u*p+t*p-p,f*d-f*p-d/2]}).rect(g).end(),0===u&&this.svg.group(l).transform({translate:[4*d-u*p+t*p-p,f*d-f*p-d/2]}).rect(g).end(),0===f&&this.svg.group(l).transform({translate:[u*d-u*p+t*p-p,4*d-f*p-d/2]}).rect(g).end(),0===u&&0===f&&this.svg.group(l).transform({translate:[4*d-u*p+t*p-p,4*d-f*p-d/2]}).rect(g).end(),i++},A.prototype.geoXes=function(){var t,e,i,a,l,c,u,f,p=o(n(this.hash,0),0,15,10,25),d=h(p),g=3*p*.943;for(this.svg.setWidth(3*g),this.svg.setHeight(3*g),i=0,f=0;6>f;f++)for(u=0;6>u;u++)c=n(this.hash,i),a=s(c),t=u%2===0?f*g-.5*g:f*g-.5*g+g/4,e=r(c),l={fill:e,opacity:a},this.svg.group(l).transform({translate:[u*g/2-g/2,t-f*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),0===u&&this.svg.group(l).transform({translate:[6*g/2-g/2,t-f*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),0===f&&(t=u%2===0?6*g-g/2:6*g-g/2+g/4,this.svg.group(l).transform({translate:[u*g/2-g/2,t-6*g/2],rotate:[45,g/2,g/2]}).rect(d).end()),5===f&&this.svg.group(l).transform({translate:[u*g/2-g/2,t-11*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),0===u&&0===f&&this.svg.group(l).transform({translate:[6*g/2-g/2,t-6*g/2],rotate:[45,g/2,g/2]}).rect(d).end(),i++},A.prototype.geoOverlappingCircles=function(){var t,e,i,a,l,h,c,u=n(this.hash,0),f=o(u,0,15,25,200),p=f/2;for(this.svg.setWidth(6*p),this.svg.setHeight(6*p),e=0,c=0;6>c;c++)for(h=0;6>h;h++)l=n(this.hash,e),i=s(l),t=r(l),a={fill:t,opacity:i},this.svg.circle(h*p,c*p,p,a),0===h&&this.svg.circle(6*p,c*p,p,a),0===c&&this.svg.circle(h*p,6*p,p,a),0===h&&0===c&&this.svg.circle(6*p,6*p,p,a),e++},A.prototype.geoOctogons=function(){var t,e,i,a,l,h,u=o(n(this.hash,0),0,15,10,60),f=c(u);for(this.svg.setWidth(6*u),this.svg.setHeight(6*u),e=0,h=0;6>h;h++)for(l=0;6>l;l++)a=n(this.hash,e),i=s(a),t=r(a),this.svg.polyline(f,{fill:t,\"fill-opacity\":i,stroke:E,\"stroke-opacity\":x}).transform({translate:[l*u,h*u]}),e+=1},A.prototype.geoSquares=function(){var t,e,i,a,l,h,c=o(n(this.hash,0),0,15,10,60);for(this.svg.setWidth(6*c),this.svg.setHeight(6*c),e=0,h=0;6>h;h++)for(l=0;6>l;l++)a=n(this.hash,e),i=s(a),t=r(a),this.svg.rect(l*c,h*c,c,c,{fill:t,\"fill-opacity\":i,stroke:E,\"stroke-opacity\":x}),e+=1},A.prototype.geoConcentricCircles=function(){var t,e,i,a,l,h,c=n(this.hash,0),u=o(c,0,15,10,60),f=u/5;for(this.svg.setWidth(6*(u+f)),this.svg.setHeight(6*(u+f)),e=0,h=0;6>h;h++)for(l=0;6>l;l++)a=n(this.hash,e),i=s(a),t=r(a),this.svg.circle(l*u+l*f+(u+f)/2,h*u+h*f+(u+f)/2,u/2,{fill:\"none\",stroke:t,opacity:i,\"stroke-width\":f+\"px\"}),a=n(this.hash,39-e),i=s(a),t=r(a),this.svg.circle(l*u+l*f+(u+f)/2,h*u+h*f+(u+f)/2,u/4,{fill:t,\"fill-opacity\":i}),e+=1},A.prototype.geoOverlappingRings=function(){var t,e,i,a,l,h,c,u=n(this.hash,0),f=o(u,0,15,10,60),p=f/4;for(this.svg.setWidth(6*f),this.svg.setHeight(6*f),e=0,c=0;6>c;c++)for(h=0;6>h;h++)l=n(this.hash,e),i=s(l),t=r(l),a={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":p+\"px\"},this.svg.circle(h*f,c*f,f-p/2,a),0===h&&this.svg.circle(6*f,c*f,f-p/2,a),0===c&&this.svg.circle(h*f,6*f,f-p/2,a),0===h&&0===c&&this.svg.circle(6*f,6*f,f-p/2,a),e+=1},A.prototype.geoTriangles=function(){var t,e,i,a,l,h,c,f,p=n(this.hash,0),d=o(p,0,15,15,80),g=d/2*Math.sqrt(3),v=u(d,g);for(this.svg.setWidth(3*d),this.svg.setHeight(6*g),e=0,f=0;6>f;f++)for(c=0;6>c;c++)h=n(this.hash,e),i=s(h),t=r(h),l={fill:t,\"fill-opacity\":i,stroke:E,\"stroke-opacity\":x},a=f%2===0?c%2===0?180:0:c%2!==0?180:0,this.svg.polyline(v,l).transform({translate:[c*d*.5-d/2,g*f],rotate:[a,d/2,g/2]}),0===c&&this.svg.polyline(v,l).transform({translate:[6*d*.5-d/2,g*f],rotate:[a,d/2,g/2]}),e+=1},A.prototype.geoDiamonds=function(){var t,e,i,a,l,h,c,u,p=o(n(this.hash,0),0,15,10,50),d=o(n(this.hash,1),0,15,10,50),g=f(p,d);for(this.svg.setWidth(6*p),this.svg.setHeight(3*d),i=0,u=0;6>u;u++)for(c=0;6>c;c++)h=n(this.hash,i),a=s(h),e=r(h),l={fill:e,\"fill-opacity\":a,stroke:E,\"stroke-opacity\":x},t=u%2===0?0:p/2,this.svg.polyline(g,l).transform({translate:[c*p-p/2+t,d/2*u-d/2]}),0===c&&this.svg.polyline(g,l).transform({translate:[6*p-p/2+t,d/2*u-d/2]}),0===u&&this.svg.polyline(g,l).transform({translate:[c*p-p/2+t,d/2*6-d/2]}),0===c&&0===u&&this.svg.polyline(g,l).transform({translate:[6*p-p/2+t,d/2*6-d/2]}),i+=1},A.prototype.geoNestedSquares=function(){var t,e,i,a,l,h,c,u=o(n(this.hash,0),0,15,4,12),f=7*u;for(this.svg.setWidth(6*(f+u)+6*u),this.svg.setHeight(6*(f+u)+6*u),e=0,c=0;6>c;c++)for(h=0;6>h;h++)l=n(this.hash,e),i=s(l),t=r(l),a={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":u+\"px\"},this.svg.rect(h*f+h*u*2+u/2,c*f+c*u*2+u/2,f,f,a),l=n(this.hash,39-e),i=s(l),t=r(l),a={fill:\"none\",stroke:t,opacity:i,\"stroke-width\":u+\"px\"},this.svg.rect(h*f+h*u*2+u/2+2*u,c*f+c*u*2+u/2+2*u,3*u,3*u,a),e+=1},A.prototype.geoMosaicSquares=function(){var t,e,i,r=o(n(this.hash,0),0,15,15,50);for(this.svg.setWidth(8*r),this.svg.setHeight(8*r),t=0,i=0;4>i;i++)for(e=0;4>e;e++)e%2===0?i%2===0?g(this.svg,e*r*2,i*r*2,r,n(this.hash,t)):d(this.svg,e*r*2,i*r*2,r,[n(this.hash,t),n(this.hash,t+1)]):i%2===0?d(this.svg,e*r*2,i*r*2,r,[n(this.hash,t),n(this.hash,t+1)]):g(this.svg,e*r*2,i*r*2,r,n(this.hash,t)),t+=1},A.prototype.geoPlaid=function(){var t,e,i,o,a,l,h,c=0,u=0;for(e=0;36>e;)o=n(this.hash,e),c+=o+5,h=n(this.hash,e+1),i=s(h),t=r(h),a=h+5,this.svg.rect(0,c,\"100%\",a,{opacity:i,fill:t}),c+=a,e+=2;for(e=0;36>e;)o=n(this.hash,e),u+=o+5,h=n(this.hash,e+1),i=s(h),t=r(h),l=h+5,this.svg.rect(u,0,l,\"100%\",{opacity:i,fill:t}),u+=l,e+=2;this.svg.setWidth(u),this.svg.setHeight(c)},A.prototype.geoTessellation=function(){var t,e,i,a,l,h=o(n(this.hash,0),0,15,5,40),c=h*Math.sqrt(3),u=2*h,f=h/2*Math.sqrt(3),p=v(h,f),d=3*h+2*f,g=2*c+2*h;for(this.svg.setWidth(d),this.svg.setHeight(g),e=0;20>e;e++)switch(l=n(this.hash,e),i=s(l),t=r(l),a={stroke:E,\"stroke-opacity\":x,fill:t,\"fill-opacity\":i,\"stroke-width\":1},e){case 0:this.svg.rect(-h/2,-h/2,h,h,a),this.svg.rect(d-h/2,-h/2,h,h,a),this.svg.rect(-h/2,g-h/2,h,h,a),this.svg.rect(d-h/2,g-h/2,h,h,a);break;case 1:this.svg.rect(u/2+f,c/2,h,h,a);break;case 2:this.svg.rect(-h/2,g/2-h/2,h,h,a),this.svg.rect(d-h/2,g/2-h/2,h,h,a);break;case 3:this.svg.rect(u/2+f,1.5*c+h,h,h,a);break;case 4:this.svg.polyline(p,a).transform({translate:[h/2,-h/2],rotate:[0,h/2,f/2]}),this.svg.polyline(p,a).transform({translate:[h/2,g- -h/2],rotate:[0,h/2,f/2],scale:[1,-1]});break;case 5:this.svg.polyline(p,a).transform({translate:[d-h/2,-h/2],rotate:[0,h/2,f/2],scale:[-1,1]}),this.svg.polyline(p,a).transform({translate:[d-h/2,g+h/2],rotate:[0,h/2,f/2],scale:[-1,-1]});break;case 6:this.svg.polyline(p,a).transform({translate:[d/2+h/2,c/2]});break;case 7:this.svg.polyline(p,a).transform({translate:[d-d/2-h/2,c/2],scale:[-1,1]});break;case 8:this.svg.polyline(p,a).transform({translate:[d/2+h/2,g-c/2],scale:[1,-1]});break;case 9:this.svg.polyline(p,a).transform({translate:[d-d/2-h/2,g-c/2],scale:[-1,-1]});break;case 10:this.svg.polyline(p,a).transform({translate:[h/2,g/2-h/2]});break;case 11:this.svg.polyline(p,a).transform({translate:[d-h/2,g/2-h/2],scale:[-1,1]});break;case 12:this.svg.rect(0,0,h,h,a).transform({translate:[h/2,h/2],rotate:[-30,0,0]});break;case 13:this.svg.rect(0,0,h,h,a).transform({scale:[-1,1],translate:[-d+h/2,h/2],rotate:[-30,0,0]});break;case 14:this.svg.rect(0,0,h,h,a).transform({translate:[h/2,g/2-h/2-h],rotate:[30,0,h]});break;case 15:this.svg.rect(0,0,h,h,a).transform({scale:[-1,1],translate:[-d+h/2,g/2-h/2-h],rotate:[30,0,h]});break;case 16:this.svg.rect(0,0,h,h,a).transform({scale:[1,-1],translate:[h/2,-g+g/2-h/2-h],rotate:[30,0,h]});break;case 17:this.svg.rect(0,0,h,h,a).transform({scale:[-1,-1],translate:[-d+h/2,-g+g/2-h/2-h],rotate:[30,0,h]});break;case 18:this.svg.rect(0,0,h,h,a).transform({scale:[1,-1],translate:[h/2,-g+h/2],rotate:[-30,0,0]});break;case 19:this.svg.rect(0,0,h,h,a).transform({scale:[-1,-1],translate:[-d+h/2,-g+h/2],rotate:[-30,0,0]})}}}).call(this,t(\"buffer\").Buffer)},{\"./color\":2,\"./sha1\":5,\"./svg\":6,buffer:8,extend:9}],5:[function(t,e){\"use strict\";function i(){function t(){for(var t=16;80>t;t++){var e=u[t-3]^u[t-8]^u[t-14]^u[t-16];u[t]=e>31}var i,n,o=s,r=a,p=l,d=h,g=c;for(t=0;80>t;t++){20>t?(i=d^r&(p^d),n=1518500249):40>t?(i=r^p^d,n=1859775393):60>t?(i=r&p|d&(r|p),n=2400959708):(i=r^p^d,n=3395469782);var v=(o>27)+i+g+n+(0|u[t]);g=d,d=p,p=r>2,r=o,o=v}for(s=s+o|0,a=a+r|0,l=l+p|0,h=h+d|0,c=c+g|0,f=0,t=0;16>t;t++)u[t]=0}function e(e){u[f]|=(255&e)o;o++)e(t[o])}function o(t){for(var e=\"\",i=28;i>=0;i-=4)e+=(t>>i&15).toString(16);return e}function r(){e(128),(f>14||14===f&&24>p)&&t(),f=14,p=24,e(0),e(0),e(d>0xffffffffff?d/1099511627776:0),e(d>4294967295?d/4294967296:0);for(var i=24;i>=0;i-=8)e(d>>i);return o(s)+o(a)+o(l)+o(h)+o(c)}var s=1732584193,a=4023233417,l=2562383102,h=271733878,c=3285377520,u=new Uint32Array(80),f=0,p=24,d=0;return{update:n,digest:r}}e.exports=function(t){if(void 0===t)return i();var e=i();return e.update(t),e.digest()}},{}],6:[function(t,e){\"use strict\";function i(){return this.width=100,this.height=100,this.svg=new o(\"svg\"),this.context=[],this.setAttributes(this.svg,{xmlns:\"http://www.w3.org/2000/svg\",width:this.width,height:this.height}),this}var n=t(\"extend\"),o=t(\"./xml\");e.exports=i,i.prototype.currentContext=function(){return this.context[this.context.length-1]||this.svg},i.prototype.end=function(){return this.context.pop(),this},i.prototype.currentNode=function(){var t=this.currentContext();return t.lastChild||t},i.prototype.transform=function(t){return this.currentNode().setAttribute(\"transform\",Object.keys(t).map(function(e){return e+\"(\"+t[e].join(\",\")+\")\"}).join(\" \")),this},i.prototype.setAttributes=function(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})},i.prototype.setWidth=function(t){this.svg.setAttribute(\"width\",Math.floor(t))},i.prototype.setHeight=function(t){this.svg.setAttribute(\"height\",Math.floor(t))},i.prototype.toString=function(){return this.svg.toString()},i.prototype.rect=function(t,e,i,r,s){var a=this;if(Array.isArray(t))return t.forEach(function(t){a.rect.apply(a,t.concat(s))}),this;var l=new o(\"rect\");return this.currentContext().appendChild(l),this.setAttributes(l,n({x:t,y:e,width:i,height:r},s)),this},i.prototype.circle=function(t,e,i,r){var s=new o(\"circle\");return this.currentContext().appendChild(s),this.setAttributes(s,n({cx:t,cy:e,r:i},r)),this},i.prototype.path=function(t,e){var i=new o(\"path\");return this.currentContext().appendChild(i),this.setAttributes(i,n({d:t},e)),this},i.prototype.polyline=function(t,e){var i=this;if(Array.isArray(t))return t.forEach(function(t){i.polyline(t,e)}),this;var r=new o(\"polyline\");return this.currentContext().appendChild(r),this.setAttributes(r,n({points:t},e)),this},i.prototype.group=function(t){var e=new o(\"g\");return this.currentContext().appendChild(e),this.context.push(e),this.setAttributes(e,n({},t)),this}},{\"./xml\":7,extend:9}],7:[function(t,e){\"use strict\";var i=e.exports=function(t){return this instanceof i?(this.tagName=t,this.attributes=Object.create(null),this.children=[],this.lastChild=null,this):new i(t)};i.prototype.appendChild=function(t){return this.children.push(t),this.lastChild=t,this},i.prototype.setAttribute=function(t,e){return this.attributes[t]=e,this},i.prototype.toString=function(){var t=this;return[\"\",t.children.map(function(t){return t.toString()}).join(\"\"),\"\"].join(\"\")}},{}],8:[function(){},{}],9:[function(t,e){function i(t){if(!t||\"[object Object]\"!==o.call(t)||t.nodeType||t.setInterval)return!1;var e=n.call(t,\"constructor\"),i=n.call(t.constructor.prototype,\"isPrototypeOf\");if(t.constructor&&!e&&!i)return!1;var r;for(r in t);return void 0===r||n.call(t,r)}var n=Object.prototype.hasOwnProperty,o=Object.prototype.toString;e.exports=function r(){var t,e,n,o,s,a,l=arguments[0]||{},h=1,c=arguments.length,u=!1;for(\"boolean\"==typeof l&&(u=l,l=arguments[1]||{},h=2),\"object\"!=typeof l&&\"function\"!=typeof l&&(l={});c>h;h++)if(null!=(t=arguments[h]))for(e in t)n=l[e],o=t[e],l!==o&&(u&&o&&(i(o)||(s=Array.isArray(o)))?(s?(s=!1,a=n&&Array.isArray(n)?n:[]):a=n&&i(n)?n:{},l[e]=r(u,a,o)):void 0!==o&&(l[e]=o));return l}},{}]},{},[1])(1)}),function(){\"use strict\";if(navigator.userAgent.match(/IEMobile\\/10\\.0/)){var t=document.createElement(\"style\");t.appendChild(document.createTextNode(\"@-ms-viewport{width:auto!important}\")),document.querySelector(\"head\").appendChild(t)}}(),function(t){\"function\"==typeof define&&define.amd?define([\"jquery\"],t):\"object\"==typeof module&&module.exports?module.exports=function(e,i){return void 0===i&&(i=\"undefined\"!=typeof window?require(\"jquery\"):require(\"jquery\")(e)),t(i),i}:t(jQuery)}(function(t){function e(e,i){var o=this;this.options=t.extend({},n,i),o.navigation=t(e),o.document=t(document),o.window=t(window),\"\"==this.options.parent?this.options.parent=o.navigation.parent():\"\",o.nav_open=!1,o.parent_full_width=0,o.radCoef=180/Math.PI,o.sTouch={x:0,y:0},o.cTouch={x:0,y:0},o.sTime=0,o.nav_position=0,o.percent_open=0,o.nav_moving=!1,o.init()}var i=\"okayNav\",n={parent:\"\",toggle_icon_class:\"okayNav__menu-toggle\",toggle_icon_content:\"\",align_right:!0,swipe_enabled:!0,threshold:50,resize_delay:10,beforeOpen:function(){},afterOpen:function(){},beforeClose:function(){},afterClose:function(){},itemHidden:function(){},itemDisplayed:function(){}};t.extend(e.prototype,{init:function(){var e=this;t(\"body\").addClass(\"okayNav-loaded\"),e.navigation.addClass(\"okayNav loaded\").children(\"ul\").addClass(\"okayNav__nav--visible\"),e.options.align_right?e.navigation.append('').append(''+e.options.toggle_icon_content+\"\"):e.navigation.prepend('').prepend(''+e.options.toggle_icon_content+\"\"),e.nav_visible=e.navigation.children(\".okayNav__nav--visible\"),e.nav_invisible=e.navigation.children(\".okayNav__nav--invisible\"),e.toggle_icon=e.navigation.children(\".\"+e.options.toggle_icon_class),e.toggle_icon_width=e.toggle_icon.outerWidth(!0),e.default_width=e.getChildrenWidth(e.navigation),e.parent_full_width=t(e.options.parent).outerWidth(!0),e.last_visible_child_width=0,e.initEvents(),e.nav_visible.contents().filter(function(){return this.nodeType=Node.TEXT_NODE&&/\\S/.test(this.nodeValue)===!1}).remove(),1==e.options.swipe_enabled&&e.initSwipeEvents()},initEvents:function(){var e=this;e.document.on(\"click.okayNav\",function(i){var n=t(i.target);e.nav_open===!0&&0==n.closest(\".okayNav\").length&&e.closeInvisibleNav(),i.target===e.toggle_icon.get(0)&&(i.preventDefault(),e.toggleInvisibleNav())});var i=e._debounce(function(){e.recalcNav()},e.options.resize_delay);e.window.on(\"load.okayNav resize.okayNav\",i)},initSwipeEvents:function(){var e=this;e.document.on(\"touchstart.okayNav\",function(i){if(e.nav_invisible.removeClass(\"transition-enabled\"),1==i.originalEvent.touches.length){var n=i.originalEvent.touches[0];(n.pageXt(e.options.parent).outerWidth(!0)-25&&1==e.options.align_right||e.nav_open===!0)&&(e.sTouch.x=e.cTouch.x=n.pageX,e.sTouch.y=e.cTouch.y=n.pageY,e.sTime=Date.now())}}).on(\"touchmove.okayNav\",function(t){var i=t.originalEvent.touches[0];e._triggerMove(i.pageX,i.pageY),e.nav_moving=!0}).on(\"touchend.okayNav\",function(t){e.sTouch={x:0,y:0},e.cTouch={x:0,y:0},e.sTime=0,e.percent_open>100-e.options.threshold?(e.nav_position=0,e.closeInvisibleNav()):1==e.nav_moving&&(e.nav_position=e.nav_invisible.width(),e.openInvisibleNav()),e.nav_moving=!1,e.nav_invisible.addClass(\"transition-enabled\")})},_getDirection:function(t){return this.options.align_right?t>0?-1:1:t=a||0>e||e>=a)&&s.isDark(t,e)}var s=t(n,i);s.addData(e),s.make(),o=o||0;var a=s.getModuleCount(),l=s.getModuleCount()+2*o,h=function(t,e,i,n){var o=this.isDark,r=1/l;this.isDark=function(s,a){var l=a*r,h=s*r,c=l+r,u=h+r;return o(s,a)&&(t>c||l>i||e>u||h>n)}};this.text=e,this.level=i,this.version=n,this.moduleCount=l,this.isDark=r,this.addBlank=h}function i(t,i,n,o,r){n=Math.max(1,n||1),o=Math.min(40,o||40);for(var s=n;o>=s;s+=1)try{return new e(t,i,s,r)}catch(t){}}function n(t,e,i){var n=i.size,o=\"bold \"+i.mSize*n+\"px \"+i.fontname,r=v(\"\")[0].getContext(\"2d\");r.font=o;var s=r.measureText(i.label).width,a=i.mSize,l=s/n,h=(1-l)*i.mPosX,c=(1-a)*i.mPosY,u=h+l,f=c+a,p=.01;1===i.mode?t.addBlank(0,c-p,n,f+p):t.addBlank(h-p,c-p,u+p,f+p),e.fillStyle=i.fontcolor,e.font=o,e.fillText(i.label,h*n,c*n+.75*i.mSize*n)}function o(t,e,i){var n=i.size,o=i.image.naturalWidth||1,r=i.image.naturalHeight||1,s=i.mSize,a=s*o/r,l=(1-a)*i.mPosX,h=(1-s)*i.mPosY,c=l+a,u=h+s,f=.01;3===i.mode?t.addBlank(0,h-f,n,u+f):t.addBlank(l-f,h-f,c+f,u+f),e.drawImage(i.image,l*n,h*n,a*n,s*n)}function r(t,e,i){v(i.background).is(\"img\")?e.drawImage(i.background,0,0,i.size,i.size):i.background&&(e.fillStyle=i.background,e.fillRect(i.left,i.top,i.size,i.size));var r=i.mode;1===r||2===r?n(t,e,i):(3===r||4===r)&&o(t,e,i)}function s(t,e,i,n,o,r,s,a){t.isDark(s,a)&&e.rect(n,o,r,r)}function a(t,e,i,n,o,r,s,a,l,h){s?t.moveTo(e+r,i):t.moveTo(e,i),a?(t.lineTo(n-r,i),t.arcTo(n,i,n,o,r)):t.lineTo(n,i),l?(t.lineTo(n,o-r),t.arcTo(n,o,e,o,r)):t.lineTo(n,o),h?(t.lineTo(e+r,o),t.arcTo(e,o,e,i,r)):t.lineTo(e,o),s?(t.lineTo(e,i+r),t.arcTo(e,i,n,i,r)):t.lineTo(e,i)}function l(t,e,i,n,o,r,s,a,l,h){s&&(t.moveTo(e+r,i),t.lineTo(e,i),t.lineTo(e,i+r),t.arcTo(e,i,e+r,i,r)),a&&(t.moveTo(n-r,i),t.lineTo(n,i),t.lineTo(n,i+r),t.arcTo(n,i,n-r,i,r)),l&&(t.moveTo(n-r,o),t.lineTo(n,o),t.lineTo(n,o-r), t.arcTo(n,o,n-r,o,r)),h&&(t.moveTo(e+r,o),t.lineTo(e,o),t.lineTo(e,o-r),t.arcTo(e,o,e+r,o,r))}function h(t,e,i,n,o,r,s,h){var c=t.isDark,u=n+r,f=o+r,p=i.radius*r,d=s-1,g=s+1,v=h-1,m=h+1,y=c(s,h),b=c(d,v),w=c(d,h),T=c(d,m),C=c(s,m),_=c(g,m),k=c(g,h),E=c(g,v),x=c(s,v);y?a(e,n,o,u,f,p,!w&&!x,!w&&!C,!k&&!C,!k&&!x):l(e,n,o,u,f,p,w&&x&&b,w&&C&&T,k&&C&&_,k&&x&&E)}function c(t,e,i){var n,o,r=t.moduleCount,a=i.size/r,l=s;for(y&&i.radius>0&&i.radiusn;n+=1)for(o=0;r>o;o+=1){var c=i.left+o*a,u=i.top+n*a,f=a;l(t,e,i,c,u,f,n,o)}if(v(i.fill).is(\"img\")){e.strokeStyle=\"rgba(0,0,0,0.5)\",e.lineWidth=2,e.stroke();var p=e.globalCompositeOperation;e.globalCompositeOperation=\"destination-out\",e.fill(),e.globalCompositeOperation=p,e.clip(),e.drawImage(i.fill,0,0,i.size,i.size),e.restore()}else e.fillStyle=i.fill,e.fill()}function u(t,e){var n=i(e.text,e.ecLevel,e.minVersion,e.maxVersion,e.quiet);if(!n)return null;var o=v(t).data(\"qrcode\",n),s=o[0].getContext(\"2d\");return r(n,s,e),c(n,s,e),o}function f(t){var e=v(\"\").attr(\"width\",t.size).attr(\"height\",t.size);return u(e,t)}function p(t){return v(\"\").attr(\"src\",f(t)[0].toDataURL(\"image/png\"))}function d(t){var e=i(t.text,t.ecLevel,t.minVersion,t.maxVersion,t.quiet);if(!e)return null;var n,o,r=t.size,s=t.background,a=Math.floor,l=e.moduleCount,h=a(r/l),c=a(.5*(r-h*l)),u={position:\"relative\",left:0,top:0,padding:0,margin:0,width:r,height:r},f={position:\"absolute\",padding:0,margin:0,width:h,height:h,\"background-color\":t.fill},p=v(\"\").data(\"qrcode\",e).css(u);for(s&&p.css(\"background-color\",s),n=0;l>n;n+=1)for(o=0;l>o;o+=1)e.isDark(n,o)&&v(\"\").css(f).css({left:c+o*h,top:c+n*h}).appendTo(p);return p}function g(t){return m&&\"canvas\"===t.render?f(t):m&&\"image\"===t.render?p(t):d(t)}var v=jQuery,m=function(){var t=document.createElement(\"canvas\");return Boolean(t.getContext&&t.getContext(\"2d\"))}(),y=\"[object Opera]\"!==Object.prototype.toString.call(window.opera),b={render:\"canvas\",minVersion:1,maxVersion:40,ecLevel:\"L\",left:0,top:0,size:200,fill:\"#000\",background:null,text:\"no text\",radius:0,quiet:0,mode:0,mSize:.1,mPosX:.5,mPosY:.5,label:\"no label\",fontname:\"sans\",fontcolor:\"#000\",image:null};v.fn.qrcode=function(t){var e=v.extend({},b,t);return this.each(function(){\"canvas\"===this.nodeName.toLowerCase()?u(this,e):v(this).append(g(e))})}}(function(){var t=function(){function t(e,i){if(\"undefined\"==typeof e.length)throw new Error(e.length+\"/\"+i);var n=function(){for(var t=0;t=n;n+=1)-1>=e+n||e+n>=p||(i>=0&&6>=i&&(0==n||6==n)||n>=0&&6>=n&&(0==i||6==i)||i>=2&&4>=i&&n>=2&&4>=n?f[t+i][e+n]=!0:f[t+i][e+n]=!1)},w=function(){for(var t=0,e=0,i=0;8>i;i+=1){y(!0,i);var n=r.getLostPoint(m);(0==i||t>n)&&(t=n,e=i)}return e},T=function(){for(var t=8;p-8>t;t+=1)null==f[t][6]&&(f[t][6]=t%2==0);for(var e=8;p-8>e;e+=1)null==f[6][e]&&(f[6][e]=e%2==0)},C=function(){for(var t=r.getPatternPosition(c),e=0;e=a;a+=1)-2==s||2==s||-2==a||2==a||0==s&&0==a?f[n+s][o+a]=!0:f[n+s][o+a]=!1}},_=function(t){for(var e=r.getBCHTypeNumber(c),i=0;18>i;i+=1){var n=!t&&1==(e>>i&1);f[Math.floor(i/3)][i%3+p-8-3]=n}for(var i=0;18>i;i+=1){var n=!t&&1==(e>>i&1);f[i%3+p-8-3][Math.floor(i/3)]=n}},k=function(t,e){for(var i=u>o&1);6>o?f[o][8]=s:8>o?f[o+1][8]=s:f[p-15+o][8]=s}for(var o=0;15>o;o+=1){var s=!t&&1==(n>>o&1);8>o?f[8][p-o-1]=s:9>o?f[8][15-o-1+1]=s:f[8][15-o-1]=s}f[p-8][8]=!t},E=function(t,e){for(var i=-1,n=p-1,o=7,s=0,a=r.getMaskFunction(e),l=p-1;l>0;l-=2)for(6==l&&(l-=1);;){for(var h=0;2>h;h+=1)if(null==f[n][l-h]){var c=!1;s>>o&1));var u=a(n,l-h);u&&(c=!c),f[n][l-h]=c,o-=1,-1==o&&(s+=1,o=7)}if(n+=i,0>n||n>=p){n-=i,i=-i;break}}},x=function(e,i){for(var n=0,o=0,s=0,a=new Array(i.length),l=new Array(i.length),h=0;h=n&&o>i){var r=Math.floor((e-n)/t),s=Math.floor((i-n)/t);return m.isDark(s,r)?0:1}return 1})},m};e.stringToBytes=function(t){for(var e=new Array,i=0;i>=1;return e};return l.getBCHTypeInfo=function(t){for(var e=t=e))for(var l=-1;1>=l;l+=1)0>o+l||o+l>=e||(0!=a||0!=l)&&s==t.isDark(n+a,o+l)&&(r+=1);r>5&&(i+=3+r-5)}for(var n=0;e-1>n;n+=1)for(var o=0;e-1>o;o+=1){var h=0;t.isDark(n,o)&&(h+=1),t.isDark(n+1,o)&&(h+=1),t.isDark(n,o+1)&&(h+=1),t.isDark(n+1,o+1)&&(h+=1),(0==h||4==h)&&(i+=3)}for(var n=0;e>n;n+=1)for(var o=0;e-6>o;o+=1)t.isDark(n,o)&&!t.isDark(n,o+1)&&t.isDark(n,o+2)&&t.isDark(n,o+3)&&t.isDark(n,o+4)&&!t.isDark(n,o+5)&&t.isDark(n,o+6)&&(i+=40);for(var o=0;e>o;o+=1)for(var n=0;e-6>n;n+=1)t.isDark(n,o)&&!t.isDark(n+1,o)&&t.isDark(n+2,o)&&t.isDark(n+3,o)&&t.isDark(n+4,o)&&!t.isDark(n+5,o)&&t.isDark(n+6,o)&&(i+=40);for(var c=0,o=0;e>o;o+=1)for(var n=0;e>n;n+=1)t.isDark(n,o)&&(c+=1);var u=Math.abs(100*c/e/e-50)/5;return i+=10*u},l}(),s=function(){for(var t=new Array(256),e=new Array(256),i=0;8>i;i+=1)t[i]=1i;i+=1)e[t[i]]=i;var n={};return n.glog=function(t){if(1>t)throw new Error(\"glog(\"+t+\")\");return e[t]},n.gexp=function(e){for(;0>e;)e+=255;for(;e>=256;)e-=255;return t[e]},n}(),a=function(){var t=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12,7,37,13],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],e=function(t,e){var i={};return i.totalCount=t,i.dataCount=e,i},i={},o=function(e,i){switch(i){case n.L:return t[4*(e-1)+0];case n.M:return t[4*(e-1)+1];case n.Q:return t[4*(e-1)+2];case n.H:return t[4*(e-1)+3];default:return}};return i.getRSBlocks=function(t,i){var n=o(t,i);if(\"undefined\"==typeof n)throw new Error(\"bad rs block @ typeNumber:\"+t+\"/errorCorrectLevel:\"+i);for(var r=n.length/3,s=new Array,a=0;r>a;a+=1)for(var l=n[3*a+0],h=n[3*a+1],c=n[3*a+2],u=0;l>u;u+=1)s.push(e(h,c));return s},i}(),l=function(){var t=new Array,e=0,i={};return i.getBuffer=function(){return t},i.getAt=function(e){var i=Math.floor(e/8);return 1==(t[i]>>>7-e%8&1)},i.put=function(t,e){for(var n=0;e>n;n+=1)i.putBit(1==(t>>>e-n-1&1))},i.getLengthInBits=function(){return e},i.putBit=function(i){var n=Math.floor(e/8);t.length>>e%8),e+=1},i},h=function(t){var n=i.MODE_8BIT_BYTE,o=e.stringToBytes(t),r={};return r.getMode=function(){return n},r.getLength=function(t){return o.length},r.write=function(t){for(var e=0;e>>8)},e.writeBytes=function(t,i,n){i=i||0,n=n||t.length;for(var o=0;n>o;o+=1)e.writeByte(t[o+i])},e.writeString=function(t){for(var i=0;it);else{if(26>t)return 65+t;if(52>t)return 97+(t-26);if(62>t)return 48+(t-52);if(62==t)return 43;if(63==t)return 47}throw new Error(\"n:\"+t)};return o.writeByte=function(n){for(t=t>>e-6),e-=6},o.flush=function(){if(e>0&&(r(to;){if(i>=e.length){if(0==o)return-1;throw new Error(\"unexpected end of file./\"+o)}var t=e.charAt(i);if(i+=1,\"=\"==t)return o=0,-1;t.match(/^\\s$/)||(n=n>o-8&255;return o-=8,r};var s=function(t){if(t>=65&&90>=t)return t-65;if(t>=97&&122>=t)return t-97+26;if(t>=48&&57>=t)return t-48+52;if(43==t)return 62;if(47==t)return 63;throw new Error(\"c:\"+t)};return r},p=function(t,e){var i=t,n=e,o=new Array(t*e),r={};r.setPixel=function(t,e,n){o[e*i+t]=n},r.write=function(t){t.writeString(\"GIF87a\"),t.writeShort(i),t.writeShort(n),t.writeByte(128),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(0),t.writeByte(255),t.writeByte(255),t.writeByte(255),t.writeString(\",\"),t.writeShort(0),t.writeShort(0),t.writeShort(i),t.writeShort(n),t.writeByte(0);var e=2,o=a(e);t.writeByte(e);for(var r=0;o.length-r>255;)t.writeByte(255),t.writeBytes(o,r,255),r+=255;t.writeByte(o.length-r),t.writeBytes(o,r,o.length-r),t.writeByte(0),t.writeString(\";\")};var s=function(t){var e=t,i=0,n=0,o={};return o.write=function(t,o){if(t>>>o!=0)throw new Error(\"length over\");for(;i+o>=8;)e.writeByte(255&(t>=8-i,n=0,i=0;n|=t12,128|n>>6&63,128|63&n):(i++,n=65536+((1023&n)18,128|n>>12&63,128|n>>6&63,128|63&n))}return e}return e(t)}}(t),t}()),function(t){t.fn.share=function(e){function i(e,i){var n=o(i);\"prepend\"==i.mode?n.reverse():n,n.length&&t.each(n,function(n,o){var s=r(o,i),a=i.initialized?e.find(\".icon-\"+o):t('');return!a.length||(a.prop(\"aria-label\",\"分享到 \"+f[o]),a.prop(\"href\",s),\"wechat\"===o?a.prop(\"tabindex\",-1):a.prop(\"target\",\"_blank\"),void(i.initialized||(\"prepend\"==i.mode?e.prepend(a):e.append(a))))})}function n(t,e){var i=t.find(\"a.icon-wechat\");i.length&&(i.append(''+e.wechatQrcodeTitle+''+e.wechatQrcodeHelper+\"\"),i.find(\".qrcode\").qrcode({render:\"image\",size:e.wechatQrcodeSize,text:e.url}),i.offset().top"},{"title":"Repositories","date":"2022-06-24T18:44:04.154Z","updated":"2022-06-24T18:44:04.154Z","comments":false,"path":"repository/index.html","permalink":"http://fyupeng.github.io/repository/index.html","excerpt":"","text":"Githubgithub: username: fyupeng # github username"},{"title":"标签","date":"2022-06-24T18:09:11.566Z","updated":"2022-06-24T18:09:11.566Z","comments":false,"path":"tags/index.html","permalink":"http://fyupeng.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"juc","slug":"juc","date":"2022-06-23T16:26:49.000Z","updated":"2022-06-23T16:29:43.862Z","comments":true,"path":"2022/06/24/juc/","link":"","permalink":"http://fyupeng.github.io/2022/06/24/juc/","excerpt":"","text":"juc并发编程 一、Java 线程1.创建和运行线程 直接使用Thread开启线程 123456// 创建线程对象Thread t = new Thread() &#123; public void run() &#123; // 要执行的任务 &#125;&#125;; 例如： 1234567891011// 启动线程t.start();// 构造方法的参数是给线程指定名字，推荐Thread t1 = new Thread(&quot;t1&quot;) &#123; @Override // run 方法内实现了要执行的任务 public void run() &#123; log.debug(&quot;hello&quot;); &#125;&#125;;t1.start(); 输出： 119:19:00 [t1] c.ThreadStarter - hello 使用Runnable配合Thread 123456789Runnable runnable = new Runnable() &#123; public void run()&#123; // 要执行的任务 &#125;&#125;;// 创建线程对象Thread t = new Thread( runnable );// 启动线程t.start() 例如： 12345678910// 创建任务对象Runnable task2 = new Runnable() &#123; @Override public void run() &#123; log.debug(&quot;hello&quot;); &#125;&#125;;// 参数1 是任务对象; 参数2 是线程名字，推荐Thread t2 = new Thread(task2, &quot;t2&quot;);t2.start(); 输出： 119:19:00 [t2] c.ThreadStarter - hello Java 8 以后可以使用 lambda 精简代码 1234Runnable task2 = () -&gt; log.debug(&quot;hello&quot;);// 参数1 是任务对象; 参数2 是线程名字，推荐Thread t2 = new Thread(task2, &quot;t2&quot;);t2.start(); Thread与Runnable的关系： （1）用Runable更容易与线程池高级API配合 （2）配合Runnable让任务类脱离了Thread继承体系，更灵活 使用FutureTask配合Thread FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况 12345678910// 创建任务对象FutureTask&lt;Integer&gt; task3 = new FutureTask&lt;&gt;(() -&gt; &#123; log.debug(&quot;hello&quot;); return 100;&#125;);// 参数1 是任务对象; 参数2 是线程名字，推荐new Thread(task3, &quot;t3&quot;).start();// 主线程阻塞，同步等待 task 执行完毕的结果Integer result = task3.get();log.debug(&quot;结果是:&#123;&#125;&quot;, result); 输出 1219:22:27 [t3] c.ThreadStarter - hello19:22:27 [main] c.ThreadStarter - 结果是:100 2.观察多个线程同时运行主要是理解 交替执行 谁先谁后，不由我们控制 3.查看进程线程的方法windows 任务管理器可以查看进程和线程数，也可以用来杀死进 tasklist 查看进程 taskkill 杀死进程 linux ps -fe 查看所有进程 ps -fT -p 查看某个进程（PID）的所有线程 kill 杀死进程 top 按大写 H 切换是否显示线程 top -H -p 查看某个进程（PID）的所有线程 Java jps 命令查看所有 Java 进程 jstack 查看某个 Java 进程（PID）的所有线程状态 jconsole 来查看某个 Java 进程中线程的运行情况（图形界面）jconsole 远程监控配置 需要以如下方式运行你的 java 类1java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -Dcom.sun.management.jmxremote.authenticate=是否认证 java类 修改 /etc/hosts 文件将 127.0.0.1 映射至主机名 如果要认证访问，还需要做如下步骤 复制 jmxremote.password 文件 修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写 连接时填入 controlRole（用户名），R&amp;D（密码） 4.栈与栈帧Java Virtual Machine Stacks （Java 虚拟机栈）我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟机就会为其分配一块栈内存。 每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存 每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法 5.线程上下文切换（Thread Context Switch）因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码 线程的 cpu 时间片用完 垃圾回收 有更高优先级的线程需要运行 线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法 当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念 就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的 状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等 Context Switch 频繁发生会影响性能 6.常见方法 方法名 static 功能说明 注意 start() 启动一个新线 程，在新的线程 运行 run 方法 中的代码，线程之间并行 start 方法只是让线程进入就绪，里面代码不一定立刻 运行（CPU 的时间片还没分给它）。每个线程对象的 start方法只能调用一次，如果调用了多次会出现 IllegalThreadStateException run() 新线程启动后会 调用的方法，线程之间串行 如果在构造 Thread 对象时传递了 Runnable 参数，则 线程启动后会调用 Runnable 中的 run 方法，否则默 认不执行任何操作。但可以创建 Thread 的子类对象， 来覆盖默认行为 join() 等待线程运行结束 join(long n) 等待线程运行结 束,最多等待 n 毫秒 getId() 获取线程长整型 的 id id 唯一 getName() 获取线程名 setName(String) 修改线程名 getPriority() 获取线程优先级 setPriority(int) 修改线程优先级 java中规定线程优先级是1~10 的整数，较大的优先级 能提高该线程被 CPU 调度的机率 getState() 获取线程状态 Java 中线程状态是用 6 个 enum 表示，分别为： NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED isInterrupted() 判断是否被打 断， 不会清除 打断标记 isAlive() 线程是否存活 （还没有运行完 毕） interrupt() 打断线程 如果被打断线程正在 sleep，wait，join 会导致被打断 的线程抛出 InterruptedException，并清除 ；如果打断的正在运行的线程，不会清除 ；park 的线程被打断，也会设置 打断标记，不会清除 interrupted() static 判断当前线程是 否被打断 会清除 打断标记 currentThread() static 获取当前正在执 行的线程 sleep(long n) static 让当前执行的线 程休眠n毫秒， 休眠时让出 cpu 的时间片给其它 线程 yield() static 提示线程调度器 让出当前线程对 CPU的使用 主要是为了测试和调试 6.1 start 与 run调用run1234567891011public static void main(String[] args) &#123; Thread t1 = new Thread(&quot;t1&quot;) &#123; @Override public void run() &#123; log.debug(Thread.currentThread().getName()); FileReader.read(Constants.MP4_FULL_PATH); &#125; &#125;; t1.run(); log.debug(&quot;do other things ...&quot;);&#125; 输出 123419:39:14 [main] c.TestStart - main19:39:14 [main] c.FileReader - read [1.mp4] start ...19:39:18 [main] c.FileReader - read [1.mp4] end ... cost: 4227 ms19:39:18 [main] c.TestStart - do other things ... 程序仍在 main 线程运行， FileReader.read()方法调用还是同步的 调用 start将上述代码的 t1.run() 改为 1t1.start(); 输出 1234519:39:14 [main] c.TestStart - main19:39:14 [main] c.FileReader - read [1.mp4] start ...19:39:18 [main] c.FileReader - read [1.mp4] end ... cost: 4227 ms19:39:18 [main] c.TestStart - do other things ...t1.start(); 程序在 t1 线程运行， FileReader.read() 方法调用是异步的 小结 直接调用 run 是在主线程中执行了 run，没有启动新的线程 使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码 6.2 sleep 与 yieldsleep 调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞） 其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException 睡眠结束后的线程未必会立刻得到执行 建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性 yield 调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程 具体的实现依赖于操作系统的任务调度器 线程优先级 线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它 如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用 12345678910111213141516171819Runnable task1 = () -&gt; &#123; int count = 0; for (;;) &#123; System.out.println(&quot;----&gt;1 &quot; + count++); &#125;&#125;;Runnable task2 = () -&gt; &#123; int count = 0; for (;;) &#123; // Thread.yield(); System.out.println(&quot; ----&gt;2 &quot; + count++); &#125;&#125;;Thread t1 = new Thread(task1, &quot;t1&quot;);Thread t2 = new Thread(task2, &quot;t2&quot;);// t1.setPriority(Thread.MIN_PRIORITY);// t2.setPriority(Thread.MAX_PRIORITY);t1.start();t2.start(); 6.3 join方法为什么需要 join下面的代码执行，打印 r 是什么？ 12345678910111213141516static int r = 0;public static void main(String[] args) throws InterruptedException &#123; test1();&#125;private static void test1() throws InterruptedException &#123; log.debug(&quot;开始&quot;); Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;开始&quot;); sleep(1); log.debug(&quot;结束&quot;); r = 10; &#125;); t1.start(); log.debug(&quot;结果为:&#123;&#125;&quot;, r); log.debug(&quot;结束&quot;);&#125; 分析 因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出 r=10 而主线程一开始就要打印 r 的结果，所以只能打印出 r=0 解决方法 用 sleep 行不行？为什么？ 用 join，加在 t1.start() 之后即可 等待多个结果问，下面代码 cost 大约多少秒？ 12345678910111213141516171819202122static int r1 = 0;static int r2 = 0;public static void main(String[] args) throws InterruptedException &#123;test2();&#125;private static void test2() throws InterruptedException &#123; Thread t1 = new Thread(() -&gt; &#123; sleep(1); r1 = 10; &#125;); Thread t2 = new Thread(() -&gt; &#123; sleep(2); r2 = 20; &#125;); long start = System.currentTimeMillis(); t1.start(); t2.start(); t1.join(); t2.join(); long end = System.currentTimeMillis(); log.debug(&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;, r1, r2, end - start);&#125; 分析如下 第一个 join：等 待 t1 时, t2 并没有停止, 而在运行 第二个 join：1s 后, 执行到此, t2 也运行了 1s, 因此也只需再等待 1s 如果颠倒两个 join 呢？最终都是输出 120:45:43.239 [main] c.TestJoin - r1: 10 r2: 20 cost: 2005 有时效的 join等够时间 1234567891011121314151617static int r1 = 0;static int r2 = 0;public static void main(String[] args) throws InterruptedException &#123; test3();&#125;public static void test3() throws InterruptedException &#123; Thread t1 = new Thread(() -&gt; &#123; sleep(1); r1 = 10; &#125;); long start = System.currentTimeMillis(); t1.start(); // 线程执行结束会导致 join 结束 t1.join(1500); long end = System.currentTimeMillis(); log.debug(&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;, r1, r2, end - start);&#125; 输出 120:48:01.320 [main] c.TestJoin - r1: 10 r2: 0 cost: 1010 没等够时间 1234567891011121314151617static int r1 = 0;static int r2 = 0;public static void main(String[] args) throws InterruptedException &#123; test3();&#125;public static void test3() throws InterruptedException &#123; Thread t1 = new Thread(() -&gt; &#123; sleep(2); r1 = 10; &#125;); long start = System.currentTimeMillis(); t1.start(); // 线程执行结束会导致 join 结束 t1.join(1500); long end = System.currentTimeMillis(); log.debug(&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;, r1, r2, end - start);&#125; 输出 120:52:15.623 [main] c.TestJoin - r1: 0 r2: 0 cost: 1502 6.4 interrupt 方法打断 sleep，wait，join 的线程这几个方法都会让线程进入阻塞状态打断 sleep 的线程, 会清空打断状态，以 sleep 为例 1234567891011121314151617181920Thread t1 = new Thread(()-&gt; &#123; //sleep(1); //try &#123; // Thread.currentThread().join(); //&#125; catch (InterruptedException e) &#123; // e.printStackTrace(); //&#125; try &#123; Thread.currentThread().wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;, &quot;t1&quot;);t1.start();sleep(0.5);t1.interrupt();log.debug(&quot; 打断状态: &#123;&#125;&quot;, t1.isInterrupted()); 输出 sleep： 12345678java.lang.InterruptedException: sleep interruptedat java.lang.Thread.sleep(Native Method)at java.lang.Thread.sleep(Thread.java:340)at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:386)at cn.itcast.n2.util.Sleeper.sleep(Sleeper.java:8)at cn.itcast.n4.TestInterrupt.lambda$test1$3(TestInterrupt.java:59)at java.lang.Thread.run(Thread.java:745)21:18:10.374 [main] c.TestInterrupt - 打断状态: false wait： 123456Exception in thread &quot;t1&quot; java.lang.IllegalMonitorStateException at java.lang.Object.wait(Native Method) at java.lang.Object.wait(Object.java:502) at cn.itcast.test.Test.lambda$main$0(Test.java:30) at java.lang.Thread.run(Thread.java:748)15:37:32.974 c.Test [main] - 打断状态: false join： 1234567java.lang.InterruptedException at java.lang.Object.wait(Native Method) at java.lang.Thread.join(Thread.java:1252) at java.lang.Thread.join(Thread.java:1326) at cn.itcast.test.Test.lambda$main$0(Test.java:25) at java.lang.Thread.run(Thread.java:748)15:46:22.178 c.Test [main] - 打断状态: false 打断正常运行的线程打断正常运行的线程, 不会清空打断状态 12345678910111213141516private static void test2() throws InterruptedException &#123; Thread t2 = new Thread(()-&gt;&#123; while(true) &#123; Thread current = Thread.currentThread(); boolean interrupted = current.isInterrupted(); if(interrupted) &#123; log.debug(&quot; 打断状态: &#123;&#125;&quot;, interrupted); break; &#125; &#125; &#125;, &quot;t2&quot;); t2.start(); sleep(0.5); t2.interrupt();&#125; 输出 120:57:37.964 [t2] c.TestInterrupt - 打断状态: true 打断 park 线程打断 park 线程, 不会清空打断状态 1234567891011private static void test3() throws InterruptedException &#123; Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;park...&quot;); LockSupport.park(); log.debug(&quot;unpark...&quot;); log.debug(&quot;打断状态：&#123;&#125;&quot;, Thread.currentThread().isInterrupted()); &#125;, &quot;t1&quot;); t1.start(); sleep(0.5); t1.interrupt();&#125; 输出 12321:11:52.795 [t1] c.TestInterrupt - park...21:11:53.295 [t1] c.TestInterrupt - unpark...21:11:53.295 [t1] c.TestInterrupt - 打断状态：true 如果打断标记已经是 true, 则 park 会失效 123456789101112131415161718private static void test4() &#123; Thread t1 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; 5; i++) &#123; log.debug(&quot;park...&quot;); LockSupport.park(); log.debug(&quot;打断状态：&#123;&#125;&quot;, Thread.currentThread().isInterrupted()); &#125; // 清除 打断标记，即 设置为 false Thread.interrupted(); log.debug(&quot;打断状态：&#123;&#125;&quot;, Thread.currentThread().isInterrupted()); log.debug(&quot;park...&quot;); LockSupport.park(); log.debug(&quot;打断状态：&#123;&#125;&quot;, Thread.currentThread().isInterrupted()); &#125;); t1.start(); sleep(1); t1.interrupt();&#125; 输出 1234567891011121315:54:57.684 c.Test [Thread-0] - park...15:54:58.692 c.Test [Thread-0] - 打断状态：true15:54:58.696 c.Test [Thread-0] - park...15:54:58.696 c.Test [Thread-0] - 打断状态：true15:54:58.696 c.Test [Thread-0] - park...15:54:58.696 c.Test [Thread-0] - 打断状态：true15:54:58.696 c.Test [Thread-0] - park...15:54:58.696 c.Test [Thread-0] - 打断状态：true15:54:58.696 c.Test [Thread-0] - park...15:54:58.696 c.Test [Thread-0] - 打断状态：true15:54:58.696 c.Test [Thread-0] - 打断状态：false15:54:58.696 c.Test [Thread-0] - park...# 还有 下一句打断标记没打印出来，此时已恢复 park 功能 提示可以使用 Thread.interrupted() 清除打断状态 总结：处于sleep、join、wait 状态的线程 使用 interrupt() 会清除打断标记 Thread.currentThread().isInterrupted()) 处于park和 run 的线程，使用 interrupt()不会清除打断标记 Thread.currentThread().isInterrupted()) park线程 调用 interrupt()后，该线程后面再使用的 park会失效，需要使用 Thread.interrupted() 恢复park 为有效 6.5 不推荐的方法还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁 方法名 static 功能说明 stop() 停止线程运行 suspend() 挂起（暂停）线程运行 resume() 恢复线程运行 7. 主线程和守护线程默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。例： 1234567891011log.debug(&quot;开始运行...&quot;);Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;开始运行...&quot;); sleep(2); log.debug(&quot;运行结束...&quot;);&#125;, &quot;daemon&quot;);// 设置该线程为守护线程t1.setDaemon(true);t1.start();sleep(1);log.debug(&quot;运行结束...&quot;); 输出 12308:26:38.123 [main] c.TestDaemon - 开始运行...08:26:38.213 [daemon] c.TestDaemon - 开始运行...08:26:39.215 [main] c.TestDaemon - 运行结束... 注意 垃圾回收器线程就是一种守护线程 Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求 8. 五种状态这是从 操作系统 层面来描述的 【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联 【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联)，以由 CPU 调度执行 【运行状态】指获取了 CPU 时间片运行中的状态当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换 【阻塞状态】（1）如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入 【阻塞状态】（2）等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】（3）与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们 【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态 9. 六种状态这是从 Java API 层面来描述的根据 Thread.State 枚举，分为六种状态 NEW 线程刚被创建，但是还没有调用 start() 方法 RUNNABLE 当调用了 start() 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了 操作系统 层面的【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行） BLOCKED ， WAITING ， TIMED_WAITING 都是 Java API 层面对【阻塞状态】的细分，后面会在状态转换一节详述 TERMINATED 当线程代码运行结束 二、共享模型之管程1. 共享带来的问题1.1 临界区 Critical Section 一个程序运行多个线程本身是没有问题的 问题出在多个线程访问共享资源（1）多个线程读共享资源其实也没有问题（2）在多个线程对共享资源读写操作时发生指令交错，就会出现问题 一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为**临界区**例如，下面代码中的临界区 12345678910111213static int counter = 0;static void increment() // 临界区&#123; counter++; &#125;static void decrement() // 临界区&#123; counter--;&#125; 1.2 竞态条件 Race Condition多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件 2. synchronized解决方案2.1 解决方案为了避免临界区的竞态条件发生，有多种手段可以达到目的。 阻塞式的解决方案：synchronized，Lock 非阻塞式的解决方案：原子变量 2.2 synchronized使用的是阻塞式的解决方案：synchronized，即俗称的【对象锁】，它采用互斥的方式让同一时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换 注意 虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的： 互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码 同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点 语法 1234synchronized(对象) // 线程1， 线程2(blocked)&#123; 临界区&#125; 解决 1234567891011121314151617181920212223static int counter = 0;static final Object room = new Object();public static void main(String[] args) throws InterruptedException &#123; Thread t1 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; 5000; i++) &#123; synchronized (room) &#123; counter++; &#125; &#125; &#125;, &quot;t1&quot;); Thread t2 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; 5000; i++) &#123; synchronized (room) &#123; counter--; &#125; &#125; &#125;, &quot;t2&quot;); t1.start(); t2.start(); t1.join(); t2.join(); log.debug(&quot;&#123;&#125;&quot;,counter);&#125; 你可以做这样的类比： synchronized(对象) 中的对象，可以想象为一个房间（room），有唯一入口（门）房间只能一次进入一人进行计算，线程 t1，t2 想象成两个人 当线程 t1 执行到 synchronized(room) 时就好比 t1 进入了这个房间，并锁住了门拿走了钥匙，在门内执行count++ 代码 这时候如果 t2 也运行到了 synchronized(room) 时，它发现门被锁住了，只能在门外等待，发生了上下文切换，阻塞住了 这中间即使 t1 的 cpu 时间片不幸用完，被踢出了门外（不要错误理解为锁住了对象就能一直执行下去哦），这时门还是锁住的，t1 仍拿着钥匙，t2 线程还在阻塞状态进不来，只有下次轮到 t1 自己再次获得时间片时才能开门进入 当 t1 执行完 synchronized&#123;&#125; 块内的代码，这时候才会从 obj 房间出来并解开门上的锁，唤醒 t2 线程把钥匙给他。t2 线程这时才可以进入 obj 房间，锁住了门拿上钥匙，执行它的 count-- 代码 2.3 思考synchronized 实际是用对象锁保证了临界区内代码的原子性，临界区内的代码对外是不可分割的，不会被线程切换所打断。为了加深理解，请思考下面的问题 如果把 synchronized(obj) 放在 for 循环的外面，如何理解？– 原子性 如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？– 锁对象 如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？– 锁对象 3. 方法上的synchronized注意锁的不是方法，而是对象 1234567891011class Test&#123; public synchronized void test() &#123; &#125;&#125;//等价于class Test&#123; public void test() &#123; synchronized(this) &#123; &#125; &#125;&#125; 1234567891011class Test&#123; public synchronized static void test() &#123; &#125;&#125;//等价于class Test&#123; public static void test() &#123; synchronized(Test.class) &#123; &#125; &#125;&#125; 3.1 不加 synchronized 的方法不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队（好比翻窗户进去的） 3.2 所谓的“线程八锁”其实就是考察 synchronized 锁住的是哪个对象 线程八锁的重点： 非静态方法的默认锁是this，静态方法的默认锁是class 某一时刻内，只能有一个线程有锁，无论几个方法 情况1：12 或 21 123456789101112131415@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public synchronized void a() &#123; log.debug(&quot;1&quot;); &#125; public synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n1.b(); &#125;).start();&#125; 情况2：1s后12，或 2 1s后 1 12345678910111213141516@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n1.b(); &#125;).start();&#125; 情况3：3 1s 12 或 23 1s 1 或 32 1s 1 1234567891011121314151617181920@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public synchronized void b() &#123; log.debug(&quot;2&quot;); &#125; public void c() &#123; log.debug(&quot;3&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n1.b(); &#125;).start(); new Thread(()-&gt;&#123; n1.c(); &#125;).start();&#125; 情况4：2 1s 后 1 1234567891011121314151617@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); Number n2 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n2.b(); &#125;).start();&#125; 情况5：2 1s 后 1 12345678910111213141516@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public static synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n1.b(); &#125;).start();&#125; 情况6：1s 后12， 或 2 1s后 1 12345678910111213141516@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public static synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public static synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125; public static void main(String[] args) &#123; Number n1 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n1.b(); &#125;).start();&#125; 情况7：2 1s 后 1 1234567891011121314151617@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public static synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); Number n2 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n2.b(); &#125;).start();&#125; 情况8：1s 后12， 或 2 1s后 1 1234567891011121314151617@Slf4j(topic = &quot;c.Number&quot;)class Number&#123; public static synchronized void a() &#123; sleep(1); log.debug(&quot;1&quot;); &#125; public static synchronized void b() &#123; log.debug(&quot;2&quot;); &#125;&#125;public static void main(String[] args) &#123; Number n1 = new Number(); Number n2 = new Number(); new Thread(()-&gt;&#123; n1.a(); &#125;).start(); new Thread(()-&gt;&#123; n2.b(); &#125;).start();&#125; 4. 变量的线程安全分析4.1 成员变量和静态变量是否线程安全？ 如果它们没有共享，则线程安全 如果它们被共享了，根据它们的状态是否能够改变，又分两种情况 如果只有读操作，则线程安全 如果有读写操作，则这段代码是临界区，需要考虑线程安全 4.2 局部变量是否线程安全？ 局部变量是线程安全的 但局部变量引用的对象则未必 如果该对象没有逃离方法的作用访问，它是线程安全的 如果该对象逃离方法的作用范围，需要考虑线程安全 4.3 局部变量线程安全分析1234public static void test1() &#123;int i = 10;i++;&#125; 每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享 12345678910111213141516public static void test1();descriptor: ()V flags: ACC_PUBLIC, ACC_STATICCode:stack=1, locals=1, args_size=00: bipush 102: istore_03: iinc 0, 16: returnLineNumberTable:line 10: 0line 11: 3line 12: 6LocalVariableTable:Start Length Slot Name Signature3 4 0 i I 如图 局部变量的引用稍有不同 先看一个成员变量的例子 12345678910111213141516171819202122class ThreadUnsafe &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); public void method1(int loopNumber) &#123; for (int i = 0; i &lt; loopNumber; i++) &#123; // &#123; 临界区, 会产生竞态条件 method2(); method3(); // &#125; 临界区 &#125; &#125; private void method2() &#123; list.add(&quot;1&quot;); &#125; private void method3() &#123; list.remove(0); &#125; &#125; 执行 12345678910static final int THREAD_NUMBER = 2;static final int LOOP_NUMBER = 200;public static void main(String[] args) &#123; ThreadUnsafe test = new ThreadUnsafe(); for (int i = 0; i &lt; THREAD_NUMBER; i++) &#123; new Thread(() -&gt; &#123; test.method1(LOOP_NUMBER); &#125;, &quot;Thread&quot; + i).start(); &#125;&#125; 其中一种情况是，如果线程2 还未 add，线程1 remove 就会报错： 1234567Exception in thread &quot;Thread1&quot; java.lang.IndexOutOfBoundsException: Index: 0, Size: 0at java.util.ArrayList.rangeCheck(ArrayList.java:657)at java.util.ArrayList.remove(ArrayList.java:496)at cn.itcast.n6.ThreadUnsafe.method3(TestThreadSafe.java:35)at cn.itcast.n6.ThreadUnsafe.method1(TestThreadSafe.java:26)at cn.itcast.n6.TestThreadSafe.lambda$main$0(TestThreadSafe.java:14)at java.lang.Thread.run(Thread.java:748) 分析： 无论哪个线程中的 method2 引用的都是同一个对象中的 list 成员变量 method3 与 method2 分析相同 将 list 修改为局部变量 12345678910111213141516171819class ThreadSafe &#123; public final void method1(int loopNumber) &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; loopNumber; i++) &#123; method2(list); method3(list); &#125; &#125; private void method2(ArrayList&lt;String&gt; list) &#123; list.add(&quot;1&quot;); &#125; private void method3(ArrayList&lt;String&gt; list) &#123; list.remove(0); &#125; &#125; 那么就不会有上述问题了 分析： list 是局部变量，每个线程调用时会创建其不同实例，没有共享 而 method2 的参数是从 method1 中传递过来的，与 method1 中引用同一个对象 method3 的参数分析与 method2 相同 方法访问修饰符带来的思考，如果把 method2 和 method3 的方法修改为 public 会不会带来线程安全问题？ 情况1：有其它线程调用 method2 和 method3 情况2：在 情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，即 1234567891011121314151617181920212223242526272829class ThreadSafe &#123; public final void method1(int loopNumber) &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; loopNumber; i++) &#123; method2(list); method3(list); &#125; &#125; private void method2(ArrayList&lt;String&gt; list) &#123; list.add(&quot;1&quot;); &#125; private void method3(ArrayList&lt;String&gt; list) &#123; list.remove(0); &#125; &#125;class ThreadSafeSubClass extends ThreadSafe&#123; @Override public void method3(ArrayList&lt;String&gt; list) &#123; new Thread(() -&gt; &#123; list.remove(0); &#125;).start(); &#125;&#125; 4.4 常见线程安全类 String Integer StringBuffer Random Vector Hashtable java.util.concurrent 包下的类 这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为 12345678Hashtable table = new Hashtable();new Thread(()-&gt;&#123; table.put(&quot;key&quot;, &quot;value1&quot;);&#125;).start();new Thread(()-&gt;&#123; table.put(&quot;key&quot;, &quot;value2&quot;);&#125;).start(); 它们的每个方法是原子的 但注意它们多个方法的组合不是原子的，见后面分析 线程安全类方法的组合分析下面代码是否线程安全？ 12345Hashtable table = new Hashtable();// 线程1，线程2if( table.get(&quot;key&quot;) == null) &#123;table.put(&quot;key&quot;, value);&#125; 不可变类线程安全性String、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的有同学或许有疑问，String 有 replace，substring 等方法【可以】改变值啊，那么这些方法又是如何保证线程安全的呢？ 12345678910111213public class Immutable&#123; private int value = 0; public Immutable(int value)&#123; this.value = value; &#125; public int getValue()&#123; return this.value; &#125; &#125; 如果想增加一个增加的方法呢？ 12345678910111213141516public class Immutable&#123; private int value = 0; public Immutable(int value)&#123; this.value = value; &#125; public int getValue()&#123; return this.value; &#125; public Immutable add(int v)&#123; return new Immutable(this.value + v); &#125; &#125; 实例分析例1： 12345678910111213141516public class MyServlet extends HttpServlet &#123; // 是否安全？ Map&lt;String,Object&gt; map = new HashMap&lt;&gt;(); // 是否安全？ String S1 = &quot;...&quot;; // 是否安全？ final String S2 = &quot;...&quot;; // 是否安全？ Date D1 = new Date(); // 是否安全？ final Date D2 = new Date(); public void doGet(HttpServletRequest request, HttpServletResponse response) &#123; // 使用上述变量 &#125;&#125; 例2： 1234567891011121314151617public class MyServlet extends HttpServlet &#123; // 是否安全？ private UserService userService = new UserServiceImpl(); public void doGet(HttpServletRequest request, HttpServletResponse response) &#123; userService.update(...); &#125;&#125;public class UserServiceImpl implements UserService &#123; // 记录调用次数 private int count = 0; public void update() &#123; // ... count++; &#125;&#125; 例3： 123456789101112131415161718@Aspect@Componentpublic class MyAspect &#123; // 是否安全？ private long start = 0L; @Before(&quot;execution(* *(..))&quot;) public void before() &#123; start = System.nanoTime(); &#125; @After(&quot;execution(* *(..))&quot;) public void after() &#123; long end = System.nanoTime(); System.out.println(&quot;cost time:&quot; + (end-start)); &#125;&#125; 例4： 12345678910111213141516171819202122232425262728public class MyServlet extends HttpServlet &#123; // 是否安全 private UserService userService = new UserServiceImpl(); public void doGet(HttpServletRequest request, HttpServletResponse response) &#123; userService.update(...); &#125;&#125;public class UserServiceImpl implements UserService &#123; // 是否安全 private UserDao userDao = new UserDaoImpl(); public void update() &#123; userDao.update(); &#125;&#125;public class UserDaoImpl implements UserDao &#123; public void update() &#123; String sql = &quot;update user set password = ? where username = ?&quot;; // 是否安全 try (Connection conn = DriverManager.getConnection(&quot;&quot;,&quot;&quot;,&quot;&quot;))&#123; // ... &#125; catch (Exception e) &#123; // ... &#125; &#125;&#125; 例5： 12345678910111213141516171819202122232425262728public class MyServlet extends HttpServlet &#123; // 是否安全 private UserService userService = new UserServiceImpl(); public void doGet(HttpServletRequest request, HttpServletResponse response) &#123; userService.update(...); &#125;&#125;public class UserServiceImpl implements UserService &#123; // 是否安全 private UserDao userDao = new UserDaoImpl(); public void update() &#123; userDao.update(); &#125;&#125;public class UserDaoImpl implements UserDao &#123; // 是否安全 private Connection conn = null; public void update() throws SQLException &#123; String sql = &quot;update user set password = ? where username = ?&quot;; conn = DriverManager.getConnection(&quot;&quot;,&quot;&quot;,&quot;&quot;); // ... conn.close(); &#125;&#125; 例6： 1234567891011121314151617181920212223242526public class MyServlet extends HttpServlet &#123; // 是否安全 private UserService userService = new UserServiceImpl(); public void doGet(HttpServletRequest request, HttpServletResponse response) &#123; userService.update(...); &#125;&#125;public class UserServiceImpl implements UserService &#123; public void update() &#123; UserDao userDao = new UserDaoImpl(); userDao.update(); &#125;&#125;public class UserDaoImpl implements UserDao &#123; // 是否安全 private Connection = null; public void update() throws SQLException &#123; String sql = &quot;update user set password = ? where username = ?&quot;; conn = DriverManager.getConnection(&quot;&quot;,&quot;&quot;,&quot;&quot;); // ... conn.close(); &#125;&#125; 例7： 12345678910111213public abstract class Test &#123; public void bar() &#123; // 是否安全 SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;); foo(sdf); &#125; public abstract foo(SimpleDateFormat sdf); public static void main(String[] args) &#123; new Test().bar(); &#125;&#125; 其中 foo 的行为是不确定的，可能导致不安全的发生，被称之为外星方法 123456789101112131415public void foo(SimpleDateFormat sdf) &#123; String dateStr = &quot;1999-10-11 00:00:00&quot;; for (int i = 0; i &lt; 20; i++) &#123; new Thread(() -&gt; &#123; try &#123; sdf.parse(dateStr); &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; &#125;).start(); &#125;&#125; 请比较 JDK 中 String 类的实现 例8： 1234567891011121314151617181920212223242526private static Integer i = 0;public static void main(String[] args) throws InterruptedException &#123; List&lt;Thread&gt; list = new ArrayList&lt;&gt;(); for (int j = 0; j &lt; 2; j++) &#123; Thread thread = new Thread(() -&gt; &#123; for (int k = 0; k &lt; 5000; k++) &#123; synchronized (i) &#123; i++; &#125; &#125; &#125;, &quot;&quot; + j); list.add(thread); &#125; list.stream().forEach(t -&gt; t.start()); list.stream().forEach(t -&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); log.debug(&quot;&#123;&#125;&quot;, i);&#125; 5. 习题5.1 卖票练习测试下面代码是否存在线程安全问题，并尝试改正 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class ExerciseSell &#123; public static void main(String[] args) &#123; TicketWindow ticketWindow = new TicketWindow(2000); List&lt;Thread&gt; list = new ArrayList&lt;&gt;(); // 用来存储买出去多少张票 List&lt;Integer&gt; sellCount = new Vector&lt;&gt;(); for (int i = 0; i &lt; 2000; i++) &#123; Thread t = new Thread(() -&gt; &#123; // 分析这里的竞态条件 int count = ticketWindow.sell(randomAmount()); sellCount.add(count); &#125;); list.add(t); t.start(); &#125; list.forEach((t) -&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); // 买出去的票求和 log.debug(&quot;selled count:&#123;&#125;&quot;,sellCount.stream().mapToInt(c -&gt; c).sum()); // 剩余票数 log.debug(&quot;remainder count:&#123;&#125;&quot;, ticketWindow.getCount()); &#125; // Random 为线程安全 static Random random = new Random(); // 随机 1~5 public static int randomAmount() &#123; return random.nextInt(5) + 1; &#125;&#125;class TicketWindow &#123; private int count; public TicketWindow(int count) &#123; this.count = count; &#125; public int getCount() &#123; return count; &#125; public int sell(int amount) &#123; if (this.count &gt;= amount) &#123; this.count -= amount; return amount; &#125; else &#123; return 0; &#125; &#125;&#125; 另外，用下面的代码行不行，为什么？ 1List&lt;Integer&gt; sellCount = new ArrayList&lt;&gt;(); 测试脚本 1for /L %n in (1,1,10) do java -cp &quot;.;D:\\Users\\Administrator\\.m2\\repository\\ch\\qos\\logback\\1.2.3\\logback-classic-1.2.3.jar;D:\\Users\\Administrator\\.m2\\repository\\ch\\qos\\logback\\logbackcore\\1.2.3\\logback-core-1.2.3.jar;D:\\Users\\Administrator\\.m2\\repository\\org\\slf4j\\slf4japi\\1.7.25\\slf4j-api-1.7.25.jar&quot; cn.itcast.n4.exercise.ExerciseSell 5.2 转账练习测试下面代码是否存在线程安全问题，并尝试改正 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class ExerciseTransfer &#123; public static void main(String[] args) throws InterruptedException &#123; Account a = new Account(1000); Account b = new Account(1000); Thread t1 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; 1000; i++) &#123; a.transfer(b, randomAmount()); &#125; &#125;, &quot;t1&quot;); Thread t2 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; 1000; i++) &#123; b.transfer(a, randomAmount()); &#125; &#125;, &quot;t2&quot;); t1.start(); t2.start(); t1.join(); t2.join();// 查看转账2000次后的总金额 log.debug(&quot;total:&#123;&#125;&quot;,(a.getMoney() + b.getMoney())); &#125; // Random 为线程安全 static Random random = new Random(); // 随机 1~100 public static int randomAmount() &#123; return random.nextInt(100) +1; &#125;&#125;class Account &#123; private int money; public Account(int money) &#123; this.money = money; &#125; public int getMoney() &#123; return money; &#125; public void setMoney(int money) &#123; this.money = money; &#125; public void transfer(Account target, int amount) &#123; if (this.money &gt; amount) &#123; this.setMoney(this.getMoney() - amount); target.setMoney(target.getMoney() + amount); &#125; &#125;&#125; 这样改正行不行，为什么？ 123456public synchronized void transfer(Account target, int amount) &#123; if (this.money &gt; amount) &#123; this.setMoney(this.getMoney() - amount); target.setMoney(target.getMoney() + amount); &#125;&#125; 6. Monitor 概念6.1 Java 对象头以 32 位虚拟机为例 普通对象 12345|--------------------------------------------------------------|| Object Header (64 bits) ||------------------------------------|-------------------------|| Mark Word (32 bits) | Klass Word (32 bits) ||------------------------------------|-------------------------| 数组对象 12345|---------------------------------------------------------------------------------|| Object Header (96 bits) ||--------------------------------|-----------------------|------------------------|| Mark Word(32bits) | Klass Word(32bits) | array length(32bits) ||--------------------------------|-----------------------|------------------------| 其中 Mark Word 结构为 12345678910111213|-------------------------------------------------------|--------------------|| Mark Word (32 bits) | State ||-------------------------------------------------------|--------------------|| hashcode:25 | age:4 | biased_lock:0 | 01 | Normal ||-------------------------------------------------------|--------------------|| thread:23 | epoch:2 | age:4 | biased_lock:1 | 01 | Biased ||-------------------------------------------------------|--------------------|| ptr_to_lock_record:30 | 00 | Lightweight Locked ||-------------------------------------------------------|--------------------|| ptr_to_heavyweight_monitor:30 | 10 | Heavyweight Locked ||-------------------------------------------------------|--------------------|| | 11 | Marked for GC ||-------------------------------------------------------|--------------------| 64 位虚拟机 Mark Word 12345678910111213|--------------------------------------------------------------------|--------------------|| Mark Word (64 bits) | State ||--------------------------------------------------------------------|--------------------|| unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 | 01 | Normal ||--------------------------------------------------------------------|--------------------|| thread:54 | epoch:2 | unused:1 | age:4 | biased_lock:1 | 01 | Biased ||--------------------------------------------------------------------|--------------------|| ptr_to_lock_record:62 | 00 | Lightweight Locked ||--------------------------------------------------------------------|--------------------|| ptr_to_heavyweight_monitor:62 | 10 | Heavyweight Locked ||--------------------------------------------------------------------|--------------------|| | 11 | Marked for GC ||--------------------------------------------------------------------|--------------------| 参考资料 https://stackoverflow.com/questions/26357186/what-is-in-java-object-header 6.2 原理之 Monitor(锁)Monitor 被翻译为监视器或管程 每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针 Monitor 结构如下 刚开始 Monitor 中 Owner 为 null 当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner 在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的 图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析 注意： synchronized 必须是进入同一个对象的 monitor 才有上述的效果不加 synchronized 的对象不会关联监视器，不遵从以上规则 6.3 原理之 synchronized1234567static final Object lock = new Object();static int counter = 0;public static void main(String[] args) &#123; synchronized (lock) &#123; counter++; &#125;&#125; 对应的字节码为 1234567891011121314151617181920212223242526272829303132333435363738394041public static void main(java.lang.String[]);descriptor: ([Ljava/lang/String;)Vflags: ACC_PUBLIC, ACC_STATICCode:stack=2, locals=3, args_size=10: getstatic #2 // &lt;- lock引用 （synchronized开始）3: dup4: astore_1 // lock引用 -&gt; slot 15: monitorenter // 将 lock对象 MarkWord 置为 Monitor 指针6: getstatic #3 // &lt;- i9: iconst_1 // 准备常数 110: iadd // +111: putstatic #3 // -&gt; i14: aload_1 // &lt;- lock引用15: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList16: goto 2419: astore_2 // e -&gt; slot 220: aload_1 // &lt;- lock引用21: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList22: aload_2 // &lt;- slot 2 (e)23: athrow // throw e24: returnException table:from to target type6 16 19 any19 22 19 anyLineNumberTable:line 8: 0line 9: 6line 10: 14line 11: 24LocalVariableTable:Start Length Slot Name Signature0 25 0 args [Ljava/lang/String;StackMapTable: number_of_entries = 2frame_type = 255 /* full_frame */offset_delta = 19locals = [ class &quot;[Ljava/lang/String;&quot;, class java/lang/Object ]stack = [ class java/lang/Throwable ]frame_type = 250 /* chop */offset_delta = 4 注意 方法级别的 synchronized 不会在字节码指令中有所体现 6.4 小故事故事角色 老王 - JVM 小南 - 线程 小女 - 线程 房间 - 对象 房间门上 - 防盗锁 - Monitor 房间门上 - 小南书包 - 轻量级锁 房间门上 - 刻上小南大名 - 偏向锁 批量重刻名 - 一个类的偏向锁撤销到达 20 阈值 不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向 小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，即使他离开了，别人也进不了门，他的工作就是安全的。 但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女晚上用。每次上锁太麻烦了，有没有更简单的办法呢？ 小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是自己的，那么就在门外等，并通知对方下次用锁门的方式。 后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍然觉得麻烦。 于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦掉，升级为挂书包的方式。 同学们都放假回老家了，小南就膨胀了，在 20 个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字 后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包 6.5 原理之 synchronized 进阶轻量级锁轻量即锁的使用场景，如果一个对象虽然有多线程访问，但多线程访问的时间是错开的 (也就是没有竞争)，那么可以使用轻量级锁来优化。 轻量级锁对使用者是透明的，即语法依然是 synchronized 假设有两个方法同步块，利用同一个对象加锁 123456789101112static final Object obj = new Object();public static void method1() &#123; synchronized( obj ) &#123; // 同步块 A method2(); &#125;&#125;public static void method2() &#123; synchronized( obj ) &#123; // 同步块 B &#125;&#125; 创建锁记录 (Lock Record)，对象，每个线程的栈帧都包含一个锁记录的结构，内部可以存储锁对象的 Mark Word 让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录 如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下 如果 cas 失败，有两种情况 如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程 如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数 当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一 当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头 成功，则解锁成功 失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程 锁膨胀如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁 123456static Object obj = new Object(); public static void method1() &#123; synchronized( obj ) &#123; // 同步块 &#125;&#125; 当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁 这时 Thread-1 加轻量级锁失败，进入锁膨胀流程 即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址 然后自己进入 Monitor 的 EntryList BLOCKED 当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程 自旋优化重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。 自旋重试成功的情况 线程 1 （core 1 上） 对象 Mark 线程 2 （core 2 上） - 10（重量锁） - 访问同步块，获取 monitor 10（重量锁）重量锁指针 - 成功（加锁） 10（重量锁）重量锁指针 - 执行同步块 10（重量锁）重量锁指针 - 执行同步块 10（重量锁）重量锁指针 访问同步块，获取 monitor 执行同步块 10（重量锁）重量锁指针 自旋重试 执行完毕 10（重量锁）重量锁指针 自旋重试 成功（解锁） 01（无锁） 自旋重试 - 10（重量锁）重量锁指针 成功（加锁） - 10（重量锁）重量锁指针 执行同步块 - … … 自旋重试失败的情况 线程 1（core 1 上） 对象 Mark 线程 2（core 2 上） - 10（重量锁） - 访问同步块，获取 monitor 10（重量锁）重量锁指针 - 成功（加锁） 10（重量锁）重量锁指针 - 执行同步块 10（重量锁）重量锁指针 - 执行同步块 10（重量锁）重量锁指针 访问同步块，获取 monitor 执行同步块 10（重量锁）重量锁指针 自旋重试 执行同步块 10（重量锁）重量锁指针 自旋重试 执行同步块 10（重量锁）重量锁指针 自旋重试 执行同步块 10（重量锁）重量锁指针 阻塞 - … … 自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。 在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。 Java 7 之后不能控制是否开启自旋功能 偏向锁轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。 Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有 例如： 1234567891011121314151617181920static final Object obj = new Object();public static void m1() &#123; synchronized( obj ) &#123; // 同步块 A m2(); &#125;&#125;public static void m2() &#123; synchronized( obj ) &#123; // 同步块 B m3(); &#125;&#125;public static void m3() &#123; synchronized( obj ) &#123; // 同步块 C &#125;&#125; 偏向状态回忆一下对象头格式 12345678910111213|--------------------------------------------------------------------|--------------------|| Mark Word (64 bits) | State | |--------------------------------------------------------------------|--------------------|| unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 | 01 | Normal ||--------------------------------------------------------------------|--------------------|| thread:54 | epoch:2 | unused:1 | age:4 | biased_lock:1 | 01 | Biased ||--------------------------------------------------------------------|--------------------|| ptr_to_lock_record:62 | 00 | Lightweight Locked ||--------------------------------------------------------------------|--------------------|| ptr_to_heavyweight_monitor:62 | 10 | Heavyweight Locked ||--------------------------------------------------------------------|--------------------|| | 11 | Marked for GC ||--------------------------------------------------------------------|--------------------| 一个对象创建时： 如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0 偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 -XX:BiasedLockingStartupDelay=0 来禁用延迟 如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值 1） 测试延迟特性 1234567891011// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0Dog d = new Dog();ClassLayout classLayout = ClassLayout.parseInstance(d);System.out.println(classLayout.toPrintable());// HotSpot 虚拟机在启动后有个 4s 的延迟才会对每个新建的对象开启偏向锁模式Thread.sleep(3000);System.out.println(ClassLayout.parseInstance(new Dog()).toPrintable()); 由于偏向锁是有延迟的，直接 给对象加锁是 看不到 偏向锁 效果的，可以使用Thread.sleep(4000)，或者 开启禁用 偏向锁延迟 -XX:BiasedLockingStartupDelay=0 2） 测试偏向锁 1class Dog &#123;&#125; 利用 jol 第三方工具来查看对象头信息（注意这里我扩展了 jol 让它输出更为简洁） 12345 &lt;dependency&gt; &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt; &lt;artifactId&gt;jol-core&lt;/artifactId&gt; &lt;version&gt;0.9&lt;/version&gt;&lt;/dependency&gt; 123456789101112131415161718192021// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 //没有 延迟等待的话。就看不到 偏向锁的效果Thread.sleep(4000);Dog d = new Dog();ClassLayout classLayout = ClassLayout.parseInstance(d);new Thread(() -&gt; &#123; log.debug(&quot;synchronized 前&quot;); System.out.println(classLayout.toPrintable()); synchronized (d) &#123; log.debug(&quot;synchronized 中&quot;); System.out.println(classLayout.toPrintable()); &#125; log.debug(&quot;synchronized 后&quot;); System.out.println(classLayout.toPrintable());&#125;, &quot;t1&quot;).start(); 有了偏向锁后 123456789101112131415161718192021// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 //没有 延迟等待的话。就看不到 偏向锁的效果Thread.sleep(4000);Dog d = new Dog();ClassLayout classLayout = ClassLayout.parseInstance(d);new Thread(() -&gt; &#123; log.debug(&quot;synchronized 前&quot;); System.out.println(classLayout.toPrintable()); synchronized (d) &#123; log.debug(&quot;synchronized 中&quot;); System.out.println(classLayout.toPrintable()); &#125; log.debug(&quot;synchronized 后&quot;); System.out.println(classLayout.toPrintable());&#125;, &quot;t1&quot;).start(); 观察偏向锁与没有偏向锁导致重入锁的差异 12345678910111213//没有 延迟等待的话。就看不到 偏向锁的效果Thread.sleep(4000);Dog d = new Dog();log.debug(ClassLayout.parseInstance(d).toPrintable());synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintable());&#125;synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintable());&#125; 没有偏向锁，需要锁重入CAS 12345678910Dog d = new Dog();log.debug(ClassLayout.parseInstance(d).toPrintable());synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintable());&#125;synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintable());&#125; 撤销 - 调用对象 hashCode调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销 轻量级锁会在锁记录中记录 hashCode 重量级锁会在 Monitor 中记录 hashCode 在调用 hashCode 后使用偏向锁，记得去掉 -XX:-UseBiasedLocking (禁用偏向锁) 123456789101112Thread.sleep(4000);Dog d = new Dog();d.hashCode();log.debug(ClassLayout.parseInstance(d).toPrintable());synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintable());&#125;log.debug(ClassLayout.parseInstance(d).toPrintable()); 输出 123456711:22:10.386 c.TestBiased [main] - 调用 hashCode:177853501511:22:10.391 c.TestBiased [t1] - synchronized 前00000000 00000000 00000000 01101010 00000010 01001010 01100111 0000000111:22:10.393 c.TestBiased [t1] - synchronized 中00000000 00000000 00000000 00000000 00100000 11000011 11110011 0110100011:22:10.393 c.TestBiased [t1] - synchronized 后00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001 撤销 - 其他线程使用对象当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁 12345678910111213141516171819202122232425262728293031323334private static void test2() throws InterruptedException &#123; Dog d = new Dog(); Thread t1 = new Thread(() -&gt; &#123; synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; synchronized (TestBiased.class) &#123; TestBiased.class.notify(); &#125; // 如果不用 wait/notify 使用 join 必须打开下面的注释 // 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的 /*try &#123; System.in.read(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;*/ &#125;, &quot;t1&quot;); t1.start(); Thread t2 = new Thread(() -&gt; &#123; synchronized (TestBiased.class) &#123; try &#123; TestBiased.class.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125;, &quot;t2&quot;); t2.start();&#125; 输出 1234[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101[t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 [t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 由于是偏向锁，撤销锁再 CAS[t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 不可偏向 撤销 - 调用wait/notify123456789101112131415161718192021222324252627public static void main(String[] args) throws InterruptedException &#123; Dog d = new Dog(); Thread t1 = new Thread(() -&gt; &#123; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) &#123; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); try &#123; d.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; &#125;, &quot;t1&quot;); t1.start(); new Thread(() -&gt; &#123; try &#123; Thread.sleep(6000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (d) &#123; log.debug(&quot;notify&quot;); d.notify(); &#125; &#125;, &quot;t2&quot;).start();&#125; 1234[t1] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101[t1] - 00000000 00000000 00000000 00000000 00011111 10110011 11111000 00000101[t2] - notify[t1] - 00000000 00000000 00000000 00000000 00011100 11010100 00001101 11001010 批量重偏向如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID 当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程 只会偏一次，如果又有一个线程 加锁，它不会在 锁阈值 超过20 次 重偏向，不过在 40 次之后会撤销 偏向锁，升级为 轻量锁 CAS 12345678910111213141516171819202122232425262728293031323334353637private static void test3() throws InterruptedException &#123; Vector&lt;Dog&gt; list = new Vector&lt;&gt;(); Thread t1 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; 30; i++) &#123; Dog d = new Dog(); list.add(d); synchronized (d) &#123; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; &#125; synchronized (list) &#123; // list.notify(); &#125; &#125;, &quot;t1&quot;); t1.start(); Thread t2 = new Thread(() -&gt; &#123; synchronized (list) &#123; try &#123; list.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;===============&gt; &quot;); for (int i = 0; i &lt; 30; i++) &#123; Dog d = list.get(i); log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) &#123; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; &#125;, &quot;t2&quot;); t2.start();&#125; 输出 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121[t1] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t1] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - ===============&gt;[t2] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 0 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 1 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 2 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 3 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 4 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 5 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 5 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 6 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 6 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 7 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 7 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 8 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 8 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 9 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 9 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 10 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 11 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 12 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 12 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 13 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 13 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 14 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 14 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 15 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 15 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 16 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 16 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 17 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 17 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 18 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000[t2] - 18 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 批量撤销当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的 123456789101112131415161718192021222324252627282930313233343536373839404142434445static Thread t1,t2,t3;private static void test4() throws InterruptedException &#123; Vector&lt;Dog&gt; list = new Vector&lt;&gt;(); int loopNumber = 39; t1 = new Thread(() -&gt; &#123; for (int i = 0; i &lt; loopNumber; i++) &#123; Dog d = new Dog(); list.add(d); synchronized (d) &#123; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; &#125; LockSupport.unpark(t2); &#125;, &quot;t1&quot;); t1.start(); t2 = new Thread(() -&gt; &#123; LockSupport.park(); log.debug(&quot;===============&gt; &quot;); for (int i = 0; i &lt; loopNumber; i++) &#123; Dog d = list.get(i); log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) &#123; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; LockSupport.unpark(t3); &#125;, &quot;t2&quot;); t2.start(); t3 = new Thread(() -&gt; &#123; LockSupport.park(); log.debug(&quot;===============&gt; &quot;); for (int i = 0; i &lt; loopNumber; i++) &#123; Dog d = list.get(i); log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) &#123; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; log.debug(i + &quot;\\t&quot; + ClassLayout.parseInstance(d).toPrintableSimple(true)); &#125; &#125;, &quot;t3&quot;); t3.start(); t3.join(); log.debug(ClassLayout.parseInstance(new Dog()).toPrintableSimple(true));&#125; 参考资料https://github.com/farmerjohngit/myblog/issues/12https://www.cnblogs.com/LemonFive/p/11246086.htmlhttps://www.cnblogs.com/LemonFive/p/11248248.html偏向锁论文 锁消除锁消除 12345678910111213141516171819@Fork(1)@BenchmarkMode(Mode.AverageTime)@Warmup(iterations=3)@Measurement(iterations=5)@OutputTimeUnit(TimeUnit.NANOSECONDS)public class MyBenchmark &#123; static int x = 0; @Benchmark public void a() throws Exception &#123; x++; &#125; @Benchmark public void b() throws Exception &#123; Object o = new Object(); synchronized (o) &#123; x++; &#125; &#125;&#125; java -jar benchmarks.jar 123Benchmark Mode Samples Score Score error Unitsc.i.MyBenchmark.a avgt 5 1.542 0.056 ns/opc.i.MyBenchmark.b avgt 5 1.518 0.091 ns/op java -XX:-EliminateLocks -jar benchmarks.jar 123Benchmark Mode Samples Score Score error Unitsc.i.MyBenchmark.a avgt 5 1.507 0.108 ns/opc.i.MyBenchmark.b avgt 5 16.976 1.572 ns/op 锁粗化 对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。 7. wait notify7.1 小故事 - 为什么需要 wait 由于条件不满足，小南不能继续进行计算 但小南如果一直占用着锁，其它人就得一直阻塞，效率太低 于是老王单开了一间休息室（调用 wait 方法），让小南到休息室（WaitSet）等着去了，但这时锁释放开，其它人可以由老王随机安排进屋 直到小M将烟送来，大叫一声 [ 你的烟到了 ] （调用 notify 方法） 小南于是可以离开休息室，重新进入竞争锁的队列 7.2 原理之 wait / notify Owner 线程发现条件不满足，调用 wait 方法，即可进入 WaitSet 变为 WAITING 状态 BLOCKED 和 WAITING 的线程都处于阻塞状态，不占用 CPU 时间片 BLOCKED 线程会在 Owner 线程释放锁时唤醒 WAITING 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入EntryList 重新竞争 7.3 API 介绍 obj.wait() 让进入 object 监视器的线程到 waitSet 等待 obj.notify() 在 object 上正在 waitSet 等待的线程中挑一个唤醒 obj.notifyAll() 让 object 上正在 waitSet 等待的线程全部唤醒 它们都是线程之间进行协作的手段，都属于 Object 对象的方法。必须获得此对象的锁，才能调用这几个方法 1234567891011121314151617181920212223242526272829303132333435final static Object obj = new Object();public static void main(String[] args) &#123; new Thread(() -&gt; &#123; synchronized (obj) &#123; log.debug(&quot;执行....&quot;); try &#123; obj.wait(); // 让线程在obj上一直等待下去 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; log.debug(&quot;其它代码....&quot;); &#125; &#125;).start(); new Thread(() -&gt; &#123; synchronized (obj) &#123; log.debug(&quot;执行....&quot;); try &#123; obj.wait(); // 让线程在obj上一直等待下去 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; log.debug(&quot;其它代码....&quot;); &#125; &#125;).start(); // 主线程两秒后执行 sleep(2); log.debug(&quot;唤醒 obj 上其它线程&quot;); synchronized (obj) &#123; obj.notify(); // 唤醒obj上一个线程 // obj.notifyAll(); // 唤醒obj上所有等待线程 &#125;&#125; notify 的一种结果 123420:00:53.096 [Thread-0] c.TestWaitNotify - 执行....20:00:53.099 [Thread-1] c.TestWaitNotify - 执行....20:00:55.096 [main] c.TestWaitNotify - 唤醒 obj 上其它线程20:00:55.096 [Thread-0] c.TestWaitNotify - 其它代码.... notifyAll 的结果 1234519:58:15.457 [Thread-0] c.TestWaitNotify - 执行....19:58:15.460 [Thread-1] c.TestWaitNotify - 执行....19:58:17.456 [main] c.TestWaitNotify - 唤醒 obj 上其它线程19:58:17.456 [Thread-1] c.TestWaitNotify - 其它代码....19:58:17.456 [Thread-0] c.TestWaitNotify - 其它代码.... wait() 方法会释放对象的锁，进入 WaitSet 等待区，从而让其他线程就机会获取对象的锁。无限制等待，直到notify 为止 wait(long n) 有时限的等待, 到 n 毫秒后结束等待，或是被 notify 8. wait notify 正确姿势开始之前先看看 8.1 sleep(long n) 和 wait(long n) 的区别 sleep 是 Thread 方法，而 wait 是 Object 的方法 sleep 不需要强制和 synchronized 配合使用，但 wait 需要和 synchronized 一起用 sleep 在睡眠的同时，不会释放对象锁的，但 wait 在等待的时候会释放对象锁 它们状态 TIMED_WAITING step1123static final Object room = new Object();static boolean hasCigarette = false;static boolean hasTakeout = false; 思考下面的解决方案好不好，为什么？ 1234567891011121314151617181920212223242526new Thread(() -&gt; &#123; synchronized (room) &#123; log.debug(&quot;有烟没？[&#123;&#125;]&quot;, hasCigarette); if (!hasCigarette) &#123; log.debug(&quot;没烟，先歇会！&quot;); sleep(2); &#125; log.debug(&quot;有烟没？[&#123;&#125;]&quot;, hasCigarette); if (hasCigarette) &#123; log.debug(&quot;可以开始干活了&quot;); &#125; &#125;&#125;, &quot;小南&quot;).start();for (int i = 0; i &lt; 5; i++) &#123; new Thread(() -&gt; &#123; synchronized (room) &#123; log.debug(&quot;可以开始干活了&quot;); &#125; &#125;, &quot;其它人&quot;).start();&#125;sleep(1);new Thread(() -&gt; &#123; // 这里能不能加 synchronized (room)？ hasCigarette = true; log.debug(&quot;烟到了噢！&quot;);&#125;, &quot;送烟的&quot;).start(); 输出 1234567891020:49:49.883 [小南] c.TestCorrectPosture - 有烟没？[false]20:49:49.887 [小南] c.TestCorrectPosture - 没烟，先歇会！20:49:50.882 [送烟的] c.TestCorrectPosture - 烟到了噢！20:49:51.887 [小南] c.TestCorrectPosture - 有烟没？[true]20:49:51.887 [小南] c.TestCorrectPosture - 可以开始干活了20:49:51.887 [其它人] c.TestCorrectPosture - 可以开始干活了20:49:51.887 [其它人] c.TestCorrectPosture - 可以开始干活了20:49:51.888 [其它人] c.TestCorrectPosture - 可以开始干活了20:49:51.888 [其它人] c.TestCorrectPosture - 可以开始干活了20:49:51.888 [其它人] c.TestCorrectPosture - 可以开始干活了 其它干活的线程，都要一直阻塞，效率太低 小南线程必须睡足 2s 后才能醒来，就算烟提前送到，也无法立刻醒来 加了 synchronized (room) 后，就好比小南在里面反锁了门睡觉，烟根本没法送进门，main 没加 synchronized 就好像 main 线程是翻窗户进来的 解决方法，使用 wait - notify 机制 step2思考下面的实现行吗，为什么？ 12345678910111213141516171819202122232425262728293031323334new Thread(() -&gt; &#123; synchronized (room) &#123; log.debug(&quot;有烟没？[&#123;&#125;]&quot;, hasCigarette); if (!hasCigarette) &#123; log.debug(&quot;没烟，先歇会！&quot;); try &#123; room.wait(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;有烟没？[&#123;&#125;]&quot;, hasCigarette); if (hasCigarette) &#123; log.debug(&quot;可以开始干活了&quot;); &#125; &#125;&#125;, &quot;小南&quot;).start() for (int i = 0; i &lt; 5; i++) &#123; new Thread(() -&gt; &#123; synchronized (room) &#123; log.debug(&quot;可以开始干活了&quot;); &#125; &#125;, &quot;其它人&quot;).start();&#125;sleep(1);new Thread(() -&gt; &#123; synchronized (room) &#123; hasCigarette = true; log.debug(&quot;烟到了噢！&quot;); room.notify(); &#125;&#125;, &quot;送烟的&quot;).start(); 输出 1234567891020:51:42.489 [小南] c.TestCorrectPosture - 有烟没？[false]20:51:42.493 [小南] c.TestCorrectPosture - 没烟，先歇会！20:51:42.493 [其它人] c.TestCorrectPosture - 可以开始干活了20:51:42.493 [其它人] c.TestCorrectPosture - 可以开始干活了20:51:42.494 [其它人] c.TestCorrectPosture - 可以开始干活了20:51:42.494 [其它人] c.TestCorrectPosture - 可以开始干活了20:51:42.494 [其它人] c.TestCorrectPosture - 可以开始干活了20:51:43.490 [送烟的] c.TestCorrectPosture - 烟到了噢！20:51:43.490 [小南] c.TestCorrectPosture - 有烟没？[true]20:51:43.490 [小南] c.TestCorrectPosture - 可以开始干活了 解决了其它干活的线程阻塞的问题 但如果有其它线程也在等待条件呢？ step312345678910111213141516171819202122232425262728293031323334353637383940414243444546474849new Thread(() -&gt; &#123; synchronized (room) &#123; log.debug(&quot;有烟没？[&#123;&#125;]&quot;, hasCigarette); if (!hasCigarette) &#123; log.debug(&quot;没烟，先歇会！&quot;); try &#123; room.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;有烟没？[&#123;&#125;]&quot;, hasCigarette); if (hasCigarette) &#123; log.debug(&quot;可以开始干活了&quot;); &#125; else &#123; log.debug(&quot;没干成活...&quot;); &#125; &#125;&#125;, &quot;小南&quot;).start();new Thread(() -&gt; &#123; synchronized (room) &#123; Thread thread = Thread.currentThread(); log.debug(&quot;外卖送到没？[&#123;&#125;]&quot;, hasTakeout); if (!hasTakeout) &#123; log.debug(&quot;没外卖，先歇会！&quot;); try &#123; room.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;外卖送到没？[&#123;&#125;]&quot;, hasTakeout); if (hasTakeout) &#123; log.debug(&quot;可以开始干活了&quot;); &#125; else &#123; log.debug(&quot;没干成活...&quot;); &#125; &#125;&#125;, &quot;小女&quot;).start();sleep(1);new Thread(() -&gt; &#123; synchronized (room) &#123; hasTakeout = true; log.debug(&quot;外卖到了噢！&quot;); room.notify(); &#125;&#125;, &quot;送外卖的&quot;).start(); 输出 123456720:53:12.173 [小南] c.TestCorrectPosture - 有烟没？[false]20:53:12.176 [小南] c.TestCorrectPosture - 没烟，先歇会！20:53:12.176 [小女] c.TestCorrectPosture - 外卖送到没？[false]20:53:12.176 [小女] c.TestCorrectPosture - 没外卖，先歇会！20:53:13.174 [送外卖的] c.TestCorrectPosture - 外卖到了噢！20:53:13.174 [小南] c.TestCorrectPosture - 有烟没？[false]20:53:13.174 [小南] c.TestCorrectPosture - 没干成活... notify 只能随机唤醒一个 WaitSet 中的线程，这时如果有其它线程也在等待，那么就可能唤醒不了正确的线程，称之为【虚假唤醒】 解决方法，改为 notifyAll step41234567new Thread(() -&gt; &#123;synchronized (room) &#123; hasTakeout = true; log.debug(&quot;外卖到了噢！&quot;); room.notifyAll();&#125;&#125;, &quot;送外卖的&quot;).start(); 输出 12345678920:55:23.978 [小南] c.TestCorrectPosture - 有烟没？[false]20:55:23.982 [小南] c.TestCorrectPosture - 没烟，先歇会！20:55:23.982 [小女] c.TestCorrectPosture - 外卖送到没？[false]20:55:23.982 [小女] c.TestCorrectPosture - 没外卖，先歇会！20:55:24.979 [送外卖的] c.TestCorrectPosture - 外卖到了噢！20:55:24.979 [小女] c.TestCorrectPosture - 外卖送到没？[true]20:55:24.980 [小女] c.TestCorrectPosture - 可以开始干活了20:55:24.980 [小南] c.TestCorrectPosture - 有烟没？[false]20:55:24.980 [小南] c.TestCorrectPosture - 没干成活... 用 notifyAll 仅解决某个线程的唤醒问题，但使用 if + wait 判断仅有一次机会，一旦条件不成立，就没有重新判断的机会了 解决方法，用 while + wait，当条件不成立，再次 wait step5将 if 改为 while 12345678if (!hasCigarette) &#123; log.debug(&quot;没烟，先歇会！&quot;); try &#123; room.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125; 改动后 12345678while (!hasCigarette) &#123; log.debug(&quot;没烟，先歇会！&quot;); try &#123; room.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125; 输出 1234567820:58:34.322 [小南] c.TestCorrectPosture - 有烟没？[false]20:58:34.326 [小南] c.TestCorrectPosture - 没烟，先歇会！20:58:34.326 [小女] c.TestCorrectPosture - 外卖送到没？[false]20:58:34.326 [小女] c.TestCorrectPosture - 没外卖，先歇会！20:58:35.323 [送外卖的] c.TestCorrectPosture - 外卖到了噢！20:58:35.324 [小女] c.TestCorrectPosture - 外卖送到没？[true]20:58:35.324 [小女] c.TestCorrectPosture - 可以开始干活了20:58:35.324 [小南] c.TestCorrectPosture - 没烟，先歇会！ 1234567891011synchronized(lock) &#123; while(条件不成立) &#123; lock.wait(); &#125;// 干活&#125;//另一个线程synchronized(lock) &#123; lock.notifyAll();&#125; 同步模式之保护性暂停定义要点 与前面的保护性暂停中的 GuardObject 不同，不需要产生结果和消费结果的线程一一对应 消费队列可以用来平衡生产和消费的线程资源 生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据 消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据 JDK 中各种阻塞队列，采用的就是这种模式 实现123456789101112131415161718192021222324class GuardedObject &#123; private Object response; private final Object lock = new Object(); public Object get() &#123; synchronized (lock) &#123; // 条件不满足则等待 while (response == null) &#123; try &#123; lock.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; return response; &#125; &#125; public void complete(Object response) &#123; synchronized (lock) &#123; // 条件满足，通知等待线程 this.response = response; lock.notifyAll(); &#125; &#125;&#125; 应用一个线程等待另一个线程的执行结果 123456789101112131415161718public static void main(String[] args) &#123; GuardedObject guardedObject = new GuardedObject(); new Thread(() -&gt; &#123; try &#123; // 子线程执行下载 List&lt;String&gt; response = download(); log.debug(&quot;download complete...&quot;); guardedObject.complete(response); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;).start(); log.debug(&quot;waiting...&quot;); // 主线程阻塞等待 Object response = guardedObject.get(); log.debug(&quot;get response: [&#123;&#125;] lines&quot;, ((List&lt;String&gt;) response).size());&#125; 执行结果 12308:42:18.568 [main] c.TestGuardedObject - waiting...08:42:23.312 [Thread-0] c.TestGuardedObject - download complete...08:42:23.312 [main] c.TestGuardedObject - get response: [3] lines 带超时版 GuarderObject如果要控制超时时间呢 1234567891011121314151617181920212223242526272829303132333435363738394041class GuardedObjectV2 &#123; private Object response; private final Object lock = new Object(); public Object get(long millis) &#123; synchronized (lock) &#123; // 1) 记录最初时间 long begin = System.currentTimeMillis(); // 2) 已经经历的时间 long timePassed = 0; while (response == null) &#123; // 4) 假设 millis 是 1000，结果在 400 时唤醒了，那么还有 600 要等 long waitTime = millis - timePassed; log.debug(&quot;waitTime: &#123;&#125;&quot;, waitTime); if (waitTime &lt;= 0) &#123; log.debug(&quot;break...&quot;); break; &#125; try &#123; lock.wait(waitTime); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; // 3) 如果提前被唤醒，这时已经经历的时间假设为 400 timePassed = System.currentTimeMillis() - begin; log.debug(&quot;timePassed: &#123;&#125;, object is null &#123;&#125;&quot;, timePassed, response == null); &#125; return response; &#125; &#125; public void complete(Object response) &#123; synchronized (lock) &#123; // 条件满足，通知等待线程 this.response = response; log.debug(&quot;notify...&quot;); lock.notifyAll(); &#125; &#125; &#125; 测试，没有超时 123456789101112131415public static void main(String[] args) &#123; GuardedObjectV2 v2 = new GuardedObjectV2(); new Thread(() -&gt; &#123; sleep(1); v2.complete(null); sleep(1); v2.complete(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)); &#125;).start(); Object response = v2.get(2500); if (response != null) &#123; log.debug(&quot;get response: [&#123;&#125;] lines&quot;, ((List&lt;String&gt;) response).size()); &#125; else &#123; log.debug(&quot;can&#x27;t get response&quot;); &#125;&#125; 输出 123456708:49:39.917 [main] c.GuardedObjectV2 - waitTime: 250008:49:40.917 [Thread-0] c.GuardedObjectV2 - notify...08:49:40.917 [main] c.GuardedObjectV2 - timePassed: 1003, object is null true08:49:40.917 [main] c.GuardedObjectV2 - waitTime: 149708:49:41.918 [Thread-0] c.GuardedObjectV2 - notify...08:49:41.918 [main] c.GuardedObjectV2 - timePassed: 2004, object is null false08:49:41.918 [main] c.TestGuardedObjectV2 - get response: [3] lines 测试，超时 12// 等待时间不足List&lt;String&gt; lines = v2.get(1500); 输出 12345678908:47:54.963 [main] c.GuardedObjectV2 - waitTime: 150008:47:55.963 [Thread-0] c.GuardedObjectV2 - notify...08:47:55.963 [main] c.GuardedObjectV2 - timePassed: 1002, object is null true08:47:55.963 [main] c.GuardedObjectV2 - waitTime: 49808:47:56.461 [main] c.GuardedObjectV2 - timePassed: 1500, object is null true08:47:56.461 [main] c.GuardedObjectV2 - waitTime: 008:47:56.461 [main] c.GuardedObjectV2 - break...08:47:56.461 [main] c.TestGuardedObjectV2 - can&#x27;t get response08:47:56.963 [Thread-0] c.GuardedObjectV2 - notify... 原理之 join是调用者轮询检查线程 alive 状态 1t1.join(); 等价于下面的代码 123456synchronized (t1) &#123; // 调用者线程进入 t1 的 waitSet 等待, 即 调用 join 方法的 线程, 直到 t1 运行结束 while (t1.isAlive()) &#123; t1.wait(0);// 调用本地方法，会一直睡眠 &#125;&#125; 注意 join 体现的是【保护性暂停】模式，请参考之 多任务版 GuarderObject图中 Futures 就好比居民楼一层的信箱（每个信箱有房间编号），左侧的 t0，t2，t4 就好比等待邮件的居民，右侧的 t1，t3，t5 就好比邮递员 如果需要在多个类之间使用 GuardedObject 对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类，这样不仅能够解耦【结果等待者】和【结果生产者】，还能够同时支持多个任务的管理 新增 id 用来标识 Guarded Object 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class GuardedObject &#123; // 标识 Guarded Object private int id; public GuardedObject(int id) &#123; this.id = id; &#125; public int getId() &#123; return id; &#125; // 结果 private Object response; // 获取结果 // timeout 表示要等待多久 2000 public Object get(long timeout) &#123; synchronized (this) &#123; // 开始时间 15:00:00 long begin = System.currentTimeMillis(); // 经历的时间 long passedTime = 0; while (response == null) &#123; // 这一轮循环应该等待的时间 long waitTime = timeout - passedTime; // 经历的时间超过了最大等待时间时，退出循环 if (timeout - passedTime &lt;= 0) &#123; break; &#125; try &#123; this.wait(waitTime); // 虚假唤醒 15:00:01 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; // 求得经历时间 passedTime = System.currentTimeMillis() - begin; // 15:00:02 1s &#125; return response; &#125; &#125; // 产生结果 public void complete(Object response) &#123; synchronized (this) &#123; // 给结果成员变量赋值 this.response = response; this.notifyAll(); &#125; &#125; &#125; 中间解耦类 1234567891011121314151617181920212223class Mailboxes &#123; private static Map&lt;Integer, GuardedObject&gt; boxes = new Hashtable&lt;&gt;(); private static int id = 1; // 产生唯一 id private static synchronized int generateId() &#123; return id++; &#125; public static GuardedObject getGuardedObject(int id) &#123; return boxes.remove(id); &#125; public static GuardedObject createGuardedObject() &#123; GuardedObject go = new GuardedObject(generateId()); boxes.put(go.getId(), go); return go; &#125; public static Set&lt;Integer&gt; getIds() &#123; return boxes.keySet(); &#125;&#125; 业务相关类 12345678910class People extends Thread&#123; @Override public void run() &#123; // 收信 GuardedObject guardedObject = Mailboxes.createGuardedObject(); log.debug(&quot;开始收信 id:&#123;&#125;&quot;, guardedObject.getId()); Object mail = guardedObject.get(5000); log.debug(&quot;收到信 id:&#123;&#125;, 内容:&#123;&#125;&quot;, guardedObject.getId(), mail); &#125;&#125; 12345678910111213141516class Postman extends Thread &#123; private int id; private String mail; public Postman(int id, String mail) &#123; this.id = id; this.mail = mail; &#125; @Override public void run() &#123; GuardedObject guardedObject = Mailboxes.getGuardedObject(id); log.debug(&quot;送信 id:&#123;&#125;, 内容:&#123;&#125;&quot;, id, mail); guardedObject.complete(mail); &#125;&#125; 测试 12345678910public static void main(String[] args) throws InterruptedException &#123; for (int i = 0; i &lt; 3; i++) &#123; new People().start(); &#125; Sleeper.sleep(1); for (Integer id : Mailboxes.getIds()) &#123; new Postman(id, &quot;内容&quot; + id).start(); &#125;&#125; 某次运行结果 12345678910:35:05.689 c.People [Thread-1] - 开始收信 id:310:35:05.689 c.People [Thread-2] - 开始收信 id:110:35:05.689 c.People [Thread-0] - 开始收信 id:210:35:06.688 c.Postman [Thread-4] - 送信 id:2, 内容:内容210:35:06.688 c.Postman [Thread-5] - 送信 id:1, 内容:内容110:35:06.688 c.People [Thread-0] - 收到信 id:2, 内容:内容210:35:06.688 c.People [Thread-2] - 收到信 id:1, 内容:内容110:35:06.688 c.Postman [Thread-3] - 送信 id:3, 内容:内容310:35:06.689 c.People [Thread-1] - 收到信 id:3, 内容:内容3 异步模式之生产者/消费者定义要点 与前面的保护性暂停中的 GuardObject 不同，不需要产生结果和消费结果的线程一一对应 消费队列可以用来平衡生产和消费的线程资源 生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据 消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据 JDK 中各种阻塞队列，采用的就是这种模式 实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Message &#123; private int id; private Object message; public Message(int id, Object message) &#123; this.id = id; this.message = message; &#125; public int getId() &#123; return id; &#125; public Object getMessage() &#123; return message; &#125;&#125;class MessageQueue &#123; private LinkedList&lt;Message&gt; queue; private int capacity; public MessageQueue(int capacity) &#123; this.capacity = capacity; queue = new LinkedList&lt;&gt;(); &#125; public Message take() &#123; synchronized (queue) &#123; while (queue.isEmpty()) &#123; log.debug(&quot;没货了, wait&quot;); try &#123; queue.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; Message message = queue.removeFirst(); queue.notifyAll(); return message; &#125; &#125; public void put(Message message) &#123; synchronized (queue) &#123; while (queue.size() == capacity) &#123; log.debug(&quot;库存已达上限, wait&quot;); try &#123; queue.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; queue.addLast(message); queue.notifyAll(); &#125; &#125; &#125; 应用12345678910111213141516171819202122232425MessageQueue messageQueue = new MessageQueue(2);// 4 个生产者线程, 下载任务for (int i = 0; i &lt; 4; i++) &#123; int id = i; new Thread(() -&gt; &#123; try &#123; log.debug(&quot;download...&quot;); List&lt;String&gt; response = Downloader.download(); log.debug(&quot;try put message(&#123;&#125;)&quot;, id); messageQueue.put(new Message(id, response)); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;, &quot;生产者&quot; + i).start();&#125;// 1 个消费者线程, 处理结果new Thread(() -&gt; &#123; while (true) &#123; Message message = messageQueue.take(); List&lt;String&gt; response = (List&lt;String&gt;) message.getMessage(); log.debug(&quot;take message(&#123;&#125;): [&#123;&#125;] lines&quot;, message.getId(), response.size()); &#125;&#125;, &quot;消费者&quot;).start(); 某次运行结果 12345678910111213141516171810:48:38.070 [生产者3] c.TestProducerConsumer - download...10:48:38.070 [生产者0] c.TestProducerConsumer - download...10:48:38.070 [消费者] c.MessageQueue - 没货了, wait10:48:38.070 [生产者1] c.TestProducerConsumer - download...10:48:38.070 [生产者2] c.TestProducerConsumer - download...10:48:41.236 [生产者1] c.TestProducerConsumer - try put message(1)10:48:41.237 [生产者2] c.TestProducerConsumer - try put message(2)10:48:41.236 [生产者0] c.TestProducerConsumer - try put message(0)10:48:41.237 [生产者3] c.TestProducerConsumer - try put message(3)10:48:41.239 [生产者2] c.MessageQueue - 库存已达上限, wait10:48:41.240 [生产者1] c.MessageQueue - 库存已达上限, wait10:48:41.240 [消费者] c.TestProducerConsumer - take message(0): [3] lines # 这里其实上面两个生产不了的有一个已经生产了，库存又满了10:48:41.240 [生产者2] c.MessageQueue - 库存已达上限, wait10:48:41.240 [消费者] c.TestProducerConsumer - take message(3): [3] lines10:48:41.240 [消费者] c.TestProducerConsumer - take message(1): [3] lines10:48:41.240 [消费者] c.TestProducerConsumer - take message(2): [3] lines10:48:41.240 [消费者] c.MessageQueue - 没货了, wait 9. Park &amp; Unpark9.1 基本使用它们是 LockSupport 类中的方法 1234// 暂停当前线程LockSupport.park();// 恢复某个线程的运行LockSupport.unpark(暂停线程对象) 先 park 再 unpark 1234567891011Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;start...&quot;); sleep(1); log.debug(&quot;park...&quot;); LockSupport.park(); log.debug(&quot;resume...&quot;);&#125;,&quot;t1&quot;);t1.start();sleep(2);log.debug(&quot;unpark...&quot;);LockSupport.unpark(t1); 输出 123418:42:52.585 c.TestParkUnpark [t1] - start...18:42:53.589 c.TestParkUnpark [t1] - park...18:42:54.583 c.TestParkUnpark [main] - unpark...18:42:54.583 c.TestParkUnpark [t1] - resume... 先 unpark 再 park 1234567891011Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;start...&quot;); sleep(2); log.debug(&quot;park...&quot;); LockSupport.park(); log.debug(&quot;resume...&quot;);&#125;, &quot;t1&quot;);t1.start();sleep(1);log.debug(&quot;unpark...&quot;);LockSupport.unpark(t1); 输出 123418:43:50.765 c.TestParkUnpark [t1] - start...18:43:51.764 c.TestParkUnpark [main] - unpark...18:43:52.769 c.TestParkUnpark [t1] - park...18:43:52.769 c.TestParkUnpark [t1] - resume... 9.2 特点与 Object 的 wait &amp; notify 相比 wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 park，unpark 不必 park &amp; unpark 是以线程为单位来【阻塞】和【唤醒】线程，而 notify 只能随机唤醒一个等待线程，notifyAll是唤醒所有等待线程，就不那么【精确】 park &amp; unpark 可以先 unpark，而 wait &amp; notify 不能先 notify 9.3 原理之 park &amp; unpark每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和 _mutex 打个比喻 线程就像一个旅人，Parker 就像他随身携带的背包，条件变量就好比背包中的帐篷。_counter 就好比背包中的备用干粮（0 为耗尽，1 为充足） 调用 park 就是要看需不需要停下来歇息 如果备用干粮耗尽，那么钻进帐篷歇息（park之前没有unpark） 如果备用干粮充足，那么不需停留，继续前进 （park之前有unpark） 调用 unpark，就好比令干粮充足 如果这时线程还在帐篷，就唤醒让他继续前进 （park之后有unpark） 如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需停留，继续前进 因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮 (park之前有多次unpark，只对首个park起作用) 当前线程调用 Unsafe.park() 方法 检查 _counter ，本情况为 0，这时，获得 _mutex 互斥锁 线程进入 _cond 条件变量阻塞 设置 _counter = 0 调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 唤醒 _cond 条件变量中的 Thread_0 Thread_0 恢复运行 设置 _counter 为 0 调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 当前线程调用 Unsafe.park() 方法 检查 _counter ，本情况为 1，这时线程无需阻塞，继续运行 设置 _counter 为 0 10. 重新理解线程状态转换 假设有线程 Thread t 情况 1 NEW --&gt; RUNNABLE 当调用 t.start() 方法时，由 NEW --&gt; RUNNABLE 情况 2 RUNNABLE &lt;--&gt; WAITINGt 线程用 synchronized(obj) 获取了对象锁后 调用 obj.wait() 方法时，t 线程从 RUNNABLE --&gt; WAITING 调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时 竞争锁成功，t 线程从 WAITING --&gt; RUNNABLE 竞争锁失败，t 线程从 WAITING --&gt; BLOCKED 1234567891011121314151617181920212223242526272829303132public class TestWaitNotify &#123; final static Object obj = new Object(); public static void main(String[] args) &#123; new Thread(() -&gt; &#123; synchronized (obj) &#123; log.debug(&quot;执行....&quot;); try &#123; obj.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; log.debug(&quot;其它代码....&quot;); // 断点 &#125; &#125;,&quot;t1&quot;).start(); new Thread(() -&gt; &#123; synchronized (obj) &#123; log.debug(&quot;执行....&quot;); try &#123; obj.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; log.debug(&quot;其它代码....&quot;); // 断点 &#125; &#125;,&quot;t2&quot;).start(); sleep(0.5); log.debug(&quot;唤醒 obj 上其它线程&quot;); synchronized (obj) &#123; obj.notifyAll(); // 唤醒obj上所有等待线程 断点 &#125; &#125;&#125; 情况 3 RUNNABLE &lt;--&gt; WAITING 当前线程调用 t.join() 方法时，当前线程从 RUNNABLE --&gt; WAITING 注意是当前线程在t 线程对象的监视器上等待 t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从 WAITING --&gt; RUNNABLE 情况 4 RUNNABLE &lt;--&gt; WAITING 当前线程调用 LockSupport.park() 方法会让当前线程从 RUNNABLE --&gt; WAITING 调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，会让目标线程从 WAITING --&gt;RUNNABLE 情况 5 RUNNABLE &lt;--&gt; TIMED_WAITINGt 线程用 synchronized(obj) 获取了对象锁后 调用 obj.wait(long n) 方法时，t 线程从 RUNNABLE --&gt; TIMED_WAITING t 线程等待时间超过了 n 毫秒，或调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时 竞争锁成功，t 线程从 TIMED_WAITING --&gt; RUNNABLE 竞争锁失败，t 线程从 TIMED_WAITING --&gt; BLOCKED 情况 6 RUNNABLE &lt;--&gt; TIMED_WAITING 当前线程调用 t.join(long n) 方法时，当前线程从 RUNNABLE --&gt; TIMED_WAITING 注意是当前线程在t 线程对象的监视器上等待 当前线程等待时间超过了 n 毫秒，或t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从TIMED_WAITING --&gt; RUNNABLE 情况 7 RUNNABLE &lt;--&gt; TIMED_WAITING 当前线程调用 Thread.sleep(long n) ，当前线程从 RUNNABLE --&gt; TIMED_WAITING 当前线程等待时间超过了 n 毫秒，当前线程从 TIMED_WAITING --&gt; RUNNABLE 情况 8 RUNNABLE &lt;--&gt; TIMED_WAITING 当前线程调用 LockSupport.parkNanos(long nanos) 或 LockSupport.parkUntil(long millis) 时，当前线程从 RUNNABLE --&gt; TIMED_WAITING 调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，或是等待超时，会让目标线程从TIMED_WAITING--&gt; RUNNABLE 情况 9 RUNNABLE &lt;--&gt; BLOCKED t 线程用 synchronized(obj) 获取了对象锁时如果竞争失败，从 RUNNABLE --&gt; BLOCKED 持 obj 锁线程的同步代码块执行完毕，会唤醒该对象上所有 BLOCKED 的线程重新竞争，如果其中 t 线程竞争成功，从 BLOCKED --&gt; RUNNABLE ，其它失败的线程仍然 BLOCKED 情况 10 RUNNABLE &lt;–&gt; TERMINATED当前线程所有代码运行完毕，进入 TERMINATED 11. 多把锁11.1 多把不相干的锁一间大屋子有两个功能：睡觉、学习，互不相干。 现在小南要学习，小女要睡觉，但如果只用一间屋子（一个对象锁）的话，那么并发度很低 解决方法是准备多个房间（多个对象锁） 例如 1234567891011121314class BigRoom &#123; public void sleep() &#123; synchronized (this) &#123; log.debug(&quot;sleeping 2 小时&quot;); Sleeper.sleep(2); &#125; &#125; public void study() &#123; synchronized (this) &#123; log.debug(&quot;study 1 小时&quot;); Sleeper.sleep(1); &#125; &#125;&#125; 执行 1234567BigRoom bigRoom = new BigRoom();new Thread(() -&gt; &#123; bigRoom.compute();&#125;,&quot;小南&quot;).start();new Thread(() -&gt; &#123; bigRoom.sleep();&#125;,&quot;小女&quot;).start(); 某次结果 1212:13:54.471 [小南] c.BigRoom - study 1 小时12:13:55.476 [小女] c.BigRoom - sleeping 2 小时 改进 12345678910111213141516171819class BigRoom &#123; private final Object studyRoom = new Object(); private final Object bedRoom = new Object(); public void sleep() &#123; synchronized (bedRoom) &#123; log.debug(&quot;sleeping 2 小时&quot;); Sleeper.sleep(2); &#125; &#125; public void study() &#123; synchronized (studyRoom) &#123; log.debug(&quot;study 1 小时&quot;); Sleeper.sleep(1); &#125; &#125; &#125; 某次执行结果 1212:15:35.069 [小南] c.BigRoom - study 1 小时12:15:35.069 [小女] c.BigRoom - sleeping 2 小时 将锁的粒度细分 好处，是可以增强并发度 坏处，如果一个线程需要同时获得多把锁，就容易发生死锁 12. 活跃性12.1 死锁有这样的情况：一个线程需要同时获取多把锁，这时就容易发生死锁 t1 线程 获得 A对象 锁，接下来想获取 B对象 的锁 t2 线程 获得 B对象 锁，接下来想获取 A对象 的锁 、 例： 123456789101112131415161718192021222324252627Object A = new Object();Object B = new Object();Thread t1 = new Thread(() -&gt; &#123; synchronized (A) &#123; log.debug(&quot;lock A&quot;); sleep(1); synchronized (B) &#123; log.debug(&quot;lock B&quot;); log.debug(&quot;操作...&quot;); &#125; &#125;&#125;, &quot;t1&quot;);Thread t2 = new Thread(() -&gt; &#123; synchronized (B) &#123; log.debug(&quot;lock B&quot;); sleep(0.5); synchronized (A) &#123; log.debug(&quot;lock A&quot;); log.debug(&quot;操作...&quot;); &#125; &#125;&#125;, &quot;t2&quot;);t1.start();t2.start(); 结果 1212:22:06.962 [t2] c.TestDeadLock - lock B12:22:06.962 [t1] c.TestDeadLock - lock A 12.2 定位死锁 检测死锁可以使用 jconsole工具，或者使用 jps 定位进程 id，再用 jstack 定位死锁： 1234567cmd &gt; jpsPicked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-812320 Jps22816 KotlinCompileDaemon33200 TestDeadLock // JVM 进程11508 Main28468 Launcher 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849cmd &gt; jstack 33200Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-82018-12-29 05:51:40Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.91-b14 mixed mode):&quot;DestroyJavaVM&quot; #13 prio=5 os_prio=0 tid=0x0000000003525000 nid=0x2f60 waiting on condition [0x0000000000000000] java.lang.Thread.State: RUNNABLE&quot;Thread-1&quot; #12 prio=5 os_prio=0 tid=0x000000001eb69000 nid=0xd40 waiting for monitor entry [0x000000001f54f000] java.lang.Thread.State: BLOCKED (on object monitor) at thread.TestDeadLock.lambda$main$1(TestDeadLock.java:28) - waiting to lock &lt;0x000000076b5bf1c0&gt; (a java.lang.Object) - locked &lt;0x000000076b5bf1d0&gt; (a java.lang.Object) at thread.TestDeadLock$$Lambda$2/883049899.run(Unknown Source) at java.lang.Thread.run(Thread.java:745) &quot;Thread-0&quot; #11 prio=5 os_prio=0 tid=0x000000001eb68800 nid=0x1b28 waiting for monitor entry [0x000000001f44f000] java.lang.Thread.State: BLOCKED (on object monitor) at thread.TestDeadLock.lambda$main$0(TestDeadLock.java:15) - waiting to lock &lt;0x000000076b5bf1d0&gt; (a java.lang.Object) - locked &lt;0x000000076b5bf1c0&gt; (a java.lang.Object) at thread.TestDeadLock$$Lambda$1/495053715.run(Unknown Source) at java.lang.Thread.run(Thread.java:745)// 略去部分输出 Found one Java-level deadlock:============================= &quot;Thread-1&quot;:waiting to lock monitor 0x000000000361d378 (object 0x000000076b5bf1c0, a java.lang.Object),which is held by &quot;Thread-0&quot; &quot;Thread-0&quot;:waiting to lock monitor 0x000000000361e768 (object 0x000000076b5bf1d0, a java.lang.Object),which is held by &quot;Thread-1&quot; Java stack information for the threads listed above:=================================================== &quot;Thread-1&quot;:at thread.TestDeadLock.lambda$main$1(TestDeadLock.java:28) - waiting to lock &lt;0x000000076b5bf1c0&gt; (a java.lang.Object) - locked &lt;0x000000076b5bf1d0&gt; (a java.lang.Object) at thread.TestDeadLock$$Lambda$2/883049899.run(Unknown Source) at java.lang.Thread.run(Thread.java:745) &quot;Thread-0&quot;:at thread.TestDeadLock.lambda$main$0(TestDeadLock.java:15) - waiting to lock &lt;0x000000076b5bf1d0&gt; (a java.lang.Object) - locked &lt;0x000000076b5bf1c0&gt; (a java.lang.Object) at thread.TestDeadLock$$Lambda$1/495053715.run(Unknown Source) at java.lang.Thread.run(Thread.java:745) Found 1 deadlock. 避免死锁要注意加锁顺序 另外如果由于某个线程进入了死循环，导致其它线程一直等待，对于这种情况 linux 下可以通过 top 先定位到CPU 占用高的 Java 进程，再利用 top -Hp 进程id 来定位是哪个线程，最后再用 jstack 排查 12.3 哲学家就餐问题 有五位哲学家，围坐在圆桌旁。 他们只做两件事，思考和吃饭，思考一会吃口饭，吃完饭后接着思考。 吃饭时要用两根筷子吃，桌上共有 5 根筷子，每位哲学家左右手边各有一根筷子。 如果筷子被身边的人拿着，自己就得等待 筷子类 12345678910class Chopstick &#123; String name; public Chopstick(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return &quot;筷子&#123;&quot; + name + &#x27;&#125;&#x27;; &#125;&#125; 哲学家类 12345678910111213141516171819202122232425262728class Philosopher extends Thread &#123; Chopstick left; Chopstick right; public Philosopher(String name, Chopstick left, Chopstick right) &#123; super(name); this.left = left; this.right = right; &#125; private void eat() &#123; log.debug(&quot;eating...&quot;); Sleeper.sleep(1); &#125; @Override public void run() &#123; while (true) &#123; // 获得左手筷子 synchronized (left) &#123; // 获得右手筷子 synchronized (right) &#123; // 吃饭 eat(); &#125; // 放下右手筷子 &#125; // 放下左手筷子 &#125; &#125;&#125; 就餐 12345678910Chopstick c1 = new Chopstick(&quot;1&quot;);Chopstick c2 = new Chopstick(&quot;2&quot;);Chopstick c3 = new Chopstick(&quot;3&quot;);Chopstick c4 = new Chopstick(&quot;4&quot;);Chopstick c5 = new Chopstick(&quot;5&quot;);new Philosopher(&quot;苏格拉底&quot;, c1, c2).start();new Philosopher(&quot;柏拉图&quot;, c2, c3).start();new Philosopher(&quot;亚里士多德&quot;, c3, c4).start();new Philosopher(&quot;赫拉克利特&quot;, c4, c5).start();new Philosopher(&quot;阿基米德&quot;, c5, c1).start(); 执行不多会，就执行不下去了 1234512:33:15.575 [苏格拉底] c.Philosopher - eating...12:33:15.575 [亚里士多德] c.Philosopher - eating...12:33:16.580 [阿基米德] c.Philosopher - eating...12:33:17.580 [阿基米德] c.Philosopher - eating...// 卡在这里, 不向下运行 使用 jconsole 检测死锁，发现 1234567891011121314151617181920212223242526272829303132333435-------------------------------------------------------------------------名称: 阿基米德状态: cn.itcast.Chopstick@1540e19d (筷子1) 上的BLOCKED, 拥有者: 苏格拉底总阻止数: 2, 总等待数: 1堆栈跟踪:cn.itcast.Philosopher.run(TestDinner.java:48)- 已锁定 cn.itcast.Chopstick@6d6f6e28 (筷子5)-------------------------------------------------------------------------名称: 苏格拉底状态: cn.itcast.Chopstick@677327b6 (筷子2) 上的BLOCKED, 拥有者: 柏拉图总阻止数: 2, 总等待数: 1堆栈跟踪:cn.itcast.Philosopher.run(TestDinner.java:48)- 已锁定 cn.itcast.Chopstick@1540e19d (筷子1)-------------------------------------------------------------------------名称: 柏拉图状态: cn.itcast.Chopstick@14ae5a5 (筷子3) 上的BLOCKED, 拥有者: 亚里士多德总阻止数: 2, 总等待数: 0堆栈跟踪:cn.itcast.Philosopher.run(TestDinner.java:48)- 已锁定 cn.itcast.Chopstick@677327b6 (筷子2)-------------------------------------------------------------------------名称: 亚里士多德状态: cn.itcast.Chopstick@7f31245a (筷子4) 上的BLOCKED, 拥有者: 赫拉克利特总阻止数: 1, 总等待数: 1堆栈跟踪:cn.itcast.Philosopher.run(TestDinner.java:48)- 已锁定 cn.itcast.Chopstick@14ae5a5 (筷子3)-------------------------------------------------------------------------名称: 赫拉克利特状态: cn.itcast.Chopstick@6d6f6e28 (筷子5) 上的BLOCKED, 拥有者: 阿基米德总阻止数: 2, 总等待数: 0堆栈跟踪:cn.itcast.Philosopher.run(TestDinner.java:48)- 已锁定 cn.itcast.Chopstick@7f31245a (筷子4) 这种线程没有按预期结束，执行不下去的情况，归类为【活跃性】问题，除了死锁以外，还有活锁和饥饿者两种情况 12.4 活锁活锁出现在两个线程互相改变对方的结束条件，最后谁也无法结束，例如 12345678910111213141516171819202122232425public class TestLiveLock &#123; static volatile int count = 10; static final Object lock = new Object(); public static void main(String[] args) &#123; new Thread(() -&gt; &#123; // 期望减到 0 退出循环 while (count &gt; 0) &#123; sleep(0.2); count--; log.debug(&quot;count: &#123;&#125;&quot;, count); &#125; &#125;, &quot;t1&quot;).start(); new Thread(() -&gt; &#123; // 期望超过 20 退出循环 while (count &lt; 20) &#123; sleep(0.2); count++; log.debug(&quot;count: &#123;&#125;&quot;, count); &#125; &#125;, &quot;t2&quot;).start(); &#125;&#125; 12.5 饥饿很多教程中把饥饿定义为，一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束，饥饿的情况不易演示，讲读写锁时会涉及饥饿问题 下面我讲一下我遇到的一个线程饥饿的例子，先来看看使用顺序加锁的方式解决之前的死锁问题 13. ReentrantLock相对于 synchronized 它具备如下特点 可中断 可以设置超时时间 可以设置为公平锁 支持多个条件变量 与 synchronized 一样，都支持可重入 基本语法 123456789// 获取锁reentrantLock.lock();try &#123; // 临界区&#125; finally &#123; // 释放锁 reentrantLock.unlock();&#125; 13.1 可重入可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁，如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住 12345678910111213141516171819202122232425262728293031323334static ReentrantLock lock = new ReentrantLock();public static void main(String[] args) &#123; method1();&#125;public static void method1() &#123; lock.lock(); try &#123; log.debug(&quot;execute method1&quot;); method2(); &#125; finally &#123; lock.unlock(); &#125;&#125;public static void method2() &#123; lock.lock(); try &#123; log.debug(&quot;execute method2&quot;); method3(); &#125; finally &#123; lock.unlock(); &#125;&#125;public static void method3() &#123; lock.lock(); try &#123; log.debug(&quot;execute method3&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125; 输出 12317:59:11.862 [main] c.TestReentrant - execute method117:59:11.865 [main] c.TestReentrant - execute method217:59:11.865 [main] c.TestReentrant - execute method3 13.2 可打断示例 12345678910111213141516171819202122232425262728ReentrantLock lock = new ReentrantLock();Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;启动...&quot;); try &#123; lock.lockInterruptibly(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); log.debug(&quot;等锁的过程中被打断&quot;); return; &#125; try &#123; log.debug(&quot;获得了锁&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125;, &quot;t1&quot;);lock.lock();log.debug(&quot;获得了锁&quot;);t1.start();try &#123; sleep(1); t1.interrupt(); log.debug(&quot;执行打断&quot;);&#125; finally &#123; lock.unlock();&#125; 输出 123456789101112131418:02:40.520 [main] c.TestInterrupt - 获得了锁18:02:40.524 [t1] c.TestInterrupt - 启动...18:02:41.530 [main] c.TestInterrupt - 执行打断java.lang.InterruptedExceptionatjava.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchronizer.java:898)atjava.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1222)at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)at cn.itcast.n4.reentrant.TestInterrupt.lambda$main$0(TestInterrupt.java:17)at java.lang.Thread.run(Thread.java:748)18:02:41.532 [t1] c.TestInterrupt - 等锁的过程中被打断 注意 如果是不可中断模式，那么即使使用了 interrupt 也不会让等待中断 可打断只能在阻塞时被打断（打断后只会再重新执行循环，并不是真正打断），而获取锁后是不可打断的 123456789101112131415161718192021222324ReentrantLock lock = new ReentrantLock();Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;启动...&quot;); lock.lock(); try &#123; log.debug(&quot;获得了锁&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125;, &quot;t1&quot;);lock.lock();log.debug(&quot;获得了锁&quot;);t1.start();try &#123; sleep(1); t1.interrupt(); log.debug(&quot;执行打断&quot;); sleep(1);&#125; finally &#123; log.debug(&quot;释放了锁&quot;); lock.unlock();&#125; 输出 1234518:06:56.261 [main] c.TestInterrupt - 获得了锁18:06:56.265 [t1] c.TestInterrupt - 启动...18:06:57.266 [main] c.TestInterrupt - 执行打断 // 这时 t1 并没有被真正打断, 而是仍继续等待锁18:06:58.267 [main] c.TestInterrupt - 释放了锁18:06:58.267 [t1] c.TestInterrupt - 获得了锁 13.3 锁超时立刻失败 12345678910111213141516171819202122ReentrantLock lock = new ReentrantLock();Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;启动...&quot;); if (!lock.tryLock()) &#123; log.debug(&quot;获取立刻失败，返回&quot;); return; &#125; try &#123; log.debug(&quot;获得了锁&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125;, &quot;t1&quot;);lock.lock();log.debug(&quot;获得了锁&quot;);t1.start();try &#123; sleep(2);&#125; finally &#123; lock.unlock();&#125; 输出 12318:15:02.918 [main] c.TestTimeout - 获得了锁18:15:02.921 [t1] c.TestTimeout - 启动...18:15:02.921 [t1] c.TestTimeout - 获取立刻失败，返回 超时失败 1234567891011121314151617181920212223242526ReentrantLock lock = new ReentrantLock();Thread t1 = new Thread(() -&gt; &#123; log.debug(&quot;启动...&quot;); try &#123; if (!lock.tryLock(1, TimeUnit.SECONDS)) &#123; log.debug(&quot;获取等待 1s 后失败，返回&quot;); return; &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; try &#123; log.debug(&quot;获得了锁&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125;, &quot;t1&quot;);lock.lock();log.debug(&quot;获得了锁&quot;);t1.start();try &#123; sleep(2);&#125; finally &#123; lock.unlock();&#125; 输出 12318:19:40.537 [main] c.TestTimeout - 获得了锁18:19:40.544 [t1] c.TestTimeout - 启动...18:19:41.547 [t1] c.TestTimeout - 获取等待 1s 后失败，返回 使用 tryLock 解决哲学家就餐问题 123456789101112class Chopstick extends ReentrantLock &#123; String name; public Chopstick(String name) &#123; this.name = name; &#125; @Override public String toString() &#123; return &quot;筷子&#123;&quot; + name + &#x27;&#125;&#x27;; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435class Philosopher extends Thread &#123; Chopstick left; Chopstick right; public Philosopher(String name, Chopstick left, Chopstick right) &#123; super(name); this.left = left; this.right = right; &#125; @Override public void run() &#123; while (true) &#123; // 尝试获得左手筷子 if (left.tryLock()) &#123; try &#123; // 尝试获得右手筷子 if (right.tryLock()) &#123; try &#123; eat(); &#125; finally &#123; right.unlock(); &#125; &#125; &#125; finally &#123; left.unlock(); &#125; &#125; &#125; &#125; private void eat() &#123; log.debug(&quot;eating...&quot;); Sleeper.sleep(1); &#125;&#125; 13.4 公平锁ReentrantLock 默认是不公平的 123456789101112131415161718192021222324ReentrantLock lock = new ReentrantLock(false);lock.lock();for (int i = 0; i &lt; 500; i++) &#123; new Thread(() -&gt; &#123; lock.lock(); try &#123; System.out.println(Thread.currentThread().getName() + &quot; running...&quot;); &#125; finally &#123; lock.unlock(); &#125; &#125;, &quot;t&quot; + i).start();&#125;// 1s 之后去争抢锁Thread.sleep(1000);new Thread(() -&gt; &#123; System.out.println(Thread.currentThread().getName() + &quot; start...&quot;); lock.lock(); try &#123; System.out.println(Thread.currentThread().getName() + &quot; running...&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125;, &quot;强行插入&quot;).start();lock.unlock(); 强行插入，有机会在中间输出 注意：该实验不一定总能复现 123456789101112t39 running...t40 running...t41 running...t42 running...t43 running...强行插入 start...强行插入 running...t44 running...t45 running...t46 running...t47 running...t49 running... 改为公平锁后 1ReentrantLock lock = new ReentrantLock(true); 强行插入，总是在最后输出 12345678910t465 running...t464 running...t477 running...t442 running...t468 running...t493 running...t482 running...t485 running...t481 running...强行插入 running... 公平锁一般没有必要，会降低并发度，后面分析原理时会讲解 13.5 条件变量synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入 waitSet 等待ReentrantLock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比 synchronized 是那些不满足条件的线程都在一间休息室等消息 而 ReentrantLock 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒 使用要点： await 前需要获得锁 await 执行后，会释放锁（透明释放锁，关键，可以有多个线程同时处于waing），进入 conditionObject 等待 await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁 竞争 lock 锁成功后，从 await 后继续执行 例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061static ReentrantLock lock = new ReentrantLock();static Condition waitCigaretteQueue = lock.newCondition();static Condition waitbreakfastQueue = lock.newCondition();static volatile boolean hasCigrette = false;static volatile boolean hasBreakfast = false;public static void main(String[] args) &#123; new Thread(() -&gt; &#123; try &#123; lock.lock(); while (!hasCigrette) &#123; try &#123; waitCigaretteQueue.await(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;等到了它的烟&quot;); &#125; finally &#123; lock.unlock(); &#125; &#125;).start(); new Thread(() -&gt; &#123; try &#123; lock.lock(); while (!hasBreakfast) &#123; try &#123; waitbreakfastQueue.await(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;等到了它的早餐&quot;); &#125; finally &#123; lock.unlock(); &#125; &#125;).start(); sleep(1); sendBreakfast(); sleep(1); sendCigarette();&#125;private static void sendCigarette() &#123; lock.lock(); try &#123; log.debug(&quot;送烟来了&quot;); hasCigrette = true; waitCigaretteQueue.signal(); &#125; finally &#123; lock.unlock(); &#125;&#125;private static void sendBreakfast() &#123; lock.lock(); try &#123; log.debug(&quot;送早餐来了&quot;); hasBreakfast = true; waitbreakfastQueue.signal(); &#125; finally &#123; lock.unlock(); &#125;&#125; 输出 123418:52:27.680 [main] c.TestCondition - 送早餐来了18:52:27.682 [Thread-1] c.TestCondition - 等到了它的早餐18:52:28.683 [main] c.TestCondition - 送烟来了18:52:28.683 [Thread-0] c.TestCondition - 等到了它的烟 13.6 同步模式之顺序控制固定运行顺序比如，必须先 2 后 1 打印 1. wait notify 版12345678910111213141516171819202122232425262728293031// 用来同步的对象static Object obj = new Object();// t2 运行标记， 代表 t2 是否执行过static boolean t2runed = false;public static void main(String[] args) &#123; Thread t1 = new Thread(() -&gt; &#123; synchronized (obj) &#123; // 如果 t2 没有执行过 while (!t2runed) &#123; try &#123; // t1 先等一会 obj.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; System.out.println(1); &#125;); Thread t2 = new Thread(() -&gt; &#123; System.out.println(2); synchronized (obj) &#123; // 修改运行标记 t2runed = true; // 通知 obj 上等待的线程（可能有多个，因此需要用 notifyAll） obj.notifyAll(); &#125; &#125;); t1.start(); t2.start();&#125; 2. Park Unpark 版可以看到，实现上很麻烦： 首先，需要保证先 wait 再 notify，否则 wait 线程永远得不到唤醒。因此使用了『运行标记』来判断该不该wait 第二，如果有些干扰线程错误地 notify 了 wait 线程，条件不满足时还要重新等待，使用了 while 循环来解决此问题 最后，唤醒对象上的 wait 线程需要使用 notifyAll，因为『同步对象』上的等待线程可能不止一个 可以使用 LockSupport 类的 park 和 unpark 来简化上面的题目： 12345678910111213Thread t1 = new Thread(() -&gt; &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; &#125; // 当没有『许可』时，当前线程暂停运行；有『许可』时，用掉这个『许可』，当前线程恢复运行 LockSupport.park(); System.out.println(&quot;1&quot;);&#125;);Thread t2 = new Thread(() -&gt; &#123; System.out.println(&quot;2&quot;); // 给线程 t1 发放『许可』（多次连续调用 unpark 只会发放一个『许可』） LockSupport.unpark(t1);&#125;);t1.start();t2.start(); park 和 unpark 方法比较灵活，他俩谁先调用，谁后调用无所谓。并且是以线程为单位进行『暂停』和『恢复』，不需要『同步对象』和『运行标记』 交替输出线程 1 输出 a 5 次，线程 2 输出 b 5 次，线程 3 输出 c 5 次。现在要求输出 abcabcabcabcabc 怎么实现 wait notify 版123456789101112131415161718192021222324class SyncWaitNotify &#123; private int flag; private int loopNumber; public SyncWaitNotify(int flag, int loopNumber) &#123; this.flag = flag; this.loopNumber = loopNumber; &#125; public void print(int waitFlag, int nextFlag, String str) &#123; for (int i = 0; i &lt; loopNumber; i++) &#123; synchronized (this) &#123; while (this.flag != waitFlag) &#123; try &#123; this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.print(str); flag = nextFlag; this.notifyAll(); &#125; &#125; &#125;&#125; 12345678910SyncWaitNotify syncWaitNotify = new SyncWaitNotify(1, 5);new Thread(() -&gt; &#123;syncWaitNotify.print(1, 2, &quot;a&quot;);&#125;).start();new Thread(() -&gt; &#123;syncWaitNotify.print(2, 3, &quot;b&quot;);&#125;).start();new Thread(() -&gt; &#123;syncWaitNotify.print(3, 1, &quot;c&quot;);&#125;).start(); Lock 条件变量版123456789101112131415161718192021222324252627282930class AwaitSignal extends ReentrantLock &#123; public void start(Condition first) &#123; this.lock(); try &#123; log.debug(&quot;start&quot;); first.signal(); &#125; finally &#123; this.unlock(); &#125; &#125; public void print(String str, Condition current, Condition next) &#123; for (int i = 0; i &lt; loopNumber; i++) &#123; this.lock(); try &#123; current.await(); log.debug(str); next.signal(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; finally &#123; this.unlock(); &#125; &#125; &#125; // 循环次数 private int loopNumber; public AwaitSignal(int loopNumber) &#123; this.loopNumber = loopNumber; &#125;&#125; 12345678910111213141516171819AwaitSignal as = new AwaitSignal(5);Condition aWaitSet = as.newCondition();Condition bWaitSet = as.newCondition();Condition cWaitSet = as.newCondition();new Thread(() -&gt; &#123; as.print(&quot;a&quot;, aWaitSet, bWaitSet);&#125;).start();new Thread(() -&gt; &#123; as.print(&quot;b&quot;, bWaitSet, cWaitSet);&#125;).start();new Thread(() -&gt; &#123; as.print(&quot;c&quot;, cWaitSet, aWaitSet);&#125;).start();as.start(aWaitSet); 注意 该实现没有考虑 a，b，c 线程都就绪再开始 Park Unpark 版1234567891011121314151617181920212223242526272829303132333435363738394041424344class SyncPark &#123; private int loopNumber; private Thread[] threads; public SyncPark(int loopNumber) &#123; this.loopNumber = loopNumber; &#125; public void setThreads(Thread... threads) &#123; this.threads = threads; &#125; public void print(String str) &#123; for (int i = 0; i &lt; loopNumber; i++) &#123; LockSupport.park(); System.out.print(str); LockSupport.unpark(nextThread()); &#125; &#125; private Thread nextThread() &#123; Thread current = Thread.currentThread(); int index = 0; for (int i = 0; i &lt; threads.length; i++) &#123; if(threads[i] == current) &#123; index = i; break; &#125; &#125; if(index &lt; threads.length - 1) &#123; return threads[index+1]; &#125; else &#123; return threads[0]; &#125; &#125; public void start() &#123; for (Thread thread : threads) &#123; thread.start(); &#125; LockSupport.unpark(threads[0]); &#125; &#125; 123456789101112SyncPark syncPark = new SyncPark(5);Thread t1 = new Thread(() -&gt; &#123; syncPark.print(&quot;a&quot;);&#125;);Thread t2 = new Thread(() -&gt; &#123; syncPark.print(&quot;b&quot;);&#125;);Thread t3 = new Thread(() -&gt; &#123; syncPark.print(&quot;c\\n&quot;);&#125;);syncPark.setThreads(t1, t2, t3);syncPark.start(); 14. 本章小结本章我们需要重点掌握的是 分析多线程访问共享资源时，哪些代码片段属于临界区 使用 synchronized 互斥解决临界区的线程安全问题 掌握 synchronized 锁对象语法 掌握 synchronzied 加载成员方法和静态方法语法 掌握 wait/notify 同步方法 使用 lock 互斥解决临界区的线程安全问题 掌握 lock 的使用细节：可打断、锁超时、公平锁、条件变量 学会分析变量的线程安全性、掌握常见线程安全类的使用 了解线程活跃性问题：死锁、活锁、饥饿 应用方面 互斥：使用 synchronized 或 Lock 达到共享资源互斥效果 同步：使用 wait/notify 或 Lock 的条件变量来达到线程间通信效果 原理方面 monitor、synchronized 、wait/notify 原理 synchronized 进阶原理 park &amp; unpark 原理 模式方面 同步模式之保护性暂停 异步模式之生产者消费者 同步模式之顺序控制 三、共享模型之内存1. 本章内容上一章讲解的 Monitor 主要关注的是访问共享变量时，保证临界区代码的原子性 这一章我们进一步深入学习共享变量在多线程间的【可见性】问题与多条指令执行时的【有序性】问题 2. Java 内存模型JMM 即 Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、CPU 指令优化等。 JMM 体现在以下几个方面 原子性 - 保证指令不会受到线程上下文切换的影响 可见性 - 保证指令不会受 cpu 缓存的影响 有序性 - 保证指令不会受 cpu 指令并行优化的影响 3. 可见性3.1 退不出的循环先来看一个现象，main 线程对 run 变量的修改对于 t 线程不可见，导致了 t 线程无法停止： 1234567891011static boolean run = true;public static void main(String[] args) throws InterruptedException &#123;Thread t = new Thread(()-&gt;&#123;while(run)&#123;// ....&#125;&#125;);t.start();sleep(1);run = false; // 线程t不会如预想的停下来&#125; 为什么呢？分析一下： 初始状态， t 线程刚开始从主内存读取了 run 的值到工作内存。 因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中，减少对主存中 run 的访问，提高效率 1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t 是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值 3.2 解决方法volatile（易变关键字） 它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作volatile 变量都是直接操作主存 3.3 可见性 vs 原子性前面例子体现的实际就是可见性，它保证的是在多个线程之间，一个线程对 volatile 变量的修改对另一个线程可见， 不能保证原子性，仅用在一个写线程，多个读线程的情况： 上例从字节码理解是这样的： 123456getstatic run // 线程 t 获取 run truegetstatic run // 线程 t 获取 run truegetstatic run // 线程 t 获取 run truegetstatic run // 线程 t 获取 run trueputstatic run // 线程 main 修改 run 为 false， 仅此一次getstatic run // 线程 t 获取 run false 比较一下之前我们将线程安全时举的例子：两个线程一个 i++ 一个 i– ，只能保证看到最新值，不能解决指令交错 123456789// 假设i的初始值为0getstatic i // 线程2-获取静态变量i的值 线程内i=0getstatic i // 线程1-获取静态变量i的值 线程内i=0iconst_1 // 线程1-准备常量1iadd // 线程1-自增 线程内i=1putstatic i // 线程1-将修改后的值存入静态变量i 静态变量i=1iconst_1 // 线程2-准备常量1isub // 线程2-自减 线程内i=-1putstatic i // 线程2-将修改后的值存入静态变量i 静态变量i=-1 注意 synchronized 语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但缺点是synchronized 是属于重量级操作，性能相对更低 如果在前面示例的死循环中加入 System.out.println() 会发现即使不加 volatile 修饰符，线程 t 也能正确看到对 run 变量的修改了，想一想为什么？ 3.4 模式之两阶段终止Two Phase Termination 在一个线程 T1 中如何“优雅”终止线程 T2？这里的【优雅】指的是给 T2 一个料理后事的机会。 错误思路 使用线程对象的 stop() 方法停止线程 stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁 使用 System.exit(int) 方法停止线程 目的仅是停止一个线程，但这种做法会让整个程序都停止 两阶段终止模式 (1) 利用 isInterruptedinterrupt 可以打断正在执行的线程，无论这个线程是在 sleep，wait，还是正常运行 12345678910111213141516171819202122232425class TPTInterrupt &#123; private Thread thread; public void start()&#123; thread = new Thread(() -&gt; &#123; while(true) &#123; Thread current = Thread.currentThread(); if(current.isInterrupted()) &#123; log.debug(&quot;料理后事&quot;); break; &#125; try &#123; Thread.sleep(1000); log.debug(&quot;将结果保存&quot;); &#125; catch (InterruptedException e) &#123; current.interrupt(); &#125; // 执行监控操作 &#125; &#125;,&quot;监控线程&quot;); thread.start(); &#125; public void stop() &#123; thread.interrupt(); &#125;&#125; 调用 12345TPTInterrupt t = new TPTInterrupt();t.start();Thread.sleep(3500);log.debug(&quot;stop&quot;);t.stop(); 结果 1234511:49:42.915 c.TwoPhaseTermination [监控线程] - 将结果保存11:49:43.919 c.TwoPhaseTermination [监控线程] - 将结果保存11:49:44.919 c.TwoPhaseTermination [监控线程] - 将结果保存11:49:45.413 c.TestTwoPhaseTermination [main] - stop11:49:45.413 c.TwoPhaseTermination [监控线程] - 料理后事 (2) 利用停止标记12345678910111213141516171819202122232425262728// 停止标记用 volatile 是为了保证该变量在多个线程之间的可见性// 我们的例子中，即主线程把它修改为 true 对 t1 线程可见class TPTVolatile &#123; private Thread thread; private volatile boolean stop = false; public void start()&#123; thread = new Thread(() -&gt; &#123; while(true) &#123; Thread current = Thread.currentThread(); if(stop) &#123; log.debug(&quot;料理后事&quot;); break; &#125; try &#123; Thread.sleep(1000); log.debug(&quot;将结果保存&quot;); &#125; catch (InterruptedException e) &#123; &#125; // 执行监控操作 &#125; &#125;,&quot;监控线程&quot;); thread.start(); &#125; public void stop() &#123; stop = true; thread.interrupt(); &#125;&#125; 调用 12345TPTVolatile t = new TPTVolatile();t.start();Thread.sleep(3500);log.debug(&quot;stop&quot;);t.stop(); 结果 1234511:54:52.003 c.TPTVolatile [监控线程] - 将结果保存11:54:53.006 c.TPTVolatile [监控线程] - 将结果保存11:54:54.007 c.TPTVolatile [监控线程] - 将结果保存11:54:54.502 c.TestTwoPhaseTermination [main] - stop11:54:54.502 c.TPTVolatile [监控线程] - 料理后事 (3) 案例：JVM 内存监控3.5 模式之Balking定义Balking （犹豫）模式用在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回 实现例如： 1234567891011121314public class MonitorService &#123; // 用来表示是否已经有线程已经在执行启动了 private volatile boolean starting; public void start() &#123; log.info(&quot;尝试启动监控线程...&quot;); synchronized (this) &#123; if (starting) &#123; return; &#125; starting = true; &#125; // 真正启动监控线程... &#125;&#125; 当前端页面多次点击按钮调用 start 时 输出 12345[http-nio-8080-exec-1] cn.itcast.monitor.service.MonitorService - 该监控线程已启动?(false)[http-nio-8080-exec-1] cn.itcast.monitor.service.MonitorService - 监控线程已启动...[http-nio-8080-exec-2] cn.itcast.monitor.service.MonitorService - 该监控线程已启动?(true)[http-nio-8080-exec-3] cn.itcast.monitor.service.MonitorService - 该监控线程已启动?(true)[http-nio-8080-exec-4] cn.itcast.monitor.service.MonitorService - 该监控线程已启动?(true) 它还经常用来实现线程安全的单例 123456789101112public final class Singleton &#123; private Singleton() &#123; &#125; private static Singleton INSTANCE = null; public static synchronized Singleton getInstance() &#123; if (INSTANCE != null) &#123; return INSTANCE; &#125; INSTANCE = new Singleton(); return INSTANCE; &#125;&#125; 对比一下保护性暂停模式：保护性暂停模式用在一个线程等待另一个线程的执行结果，当条件不满足时线程等待。 4. 有序性JVM 会在不影响正确性的前提下，可以调整语句的执行顺序，思考下面一段代码 12345static int i;static int j;// 在某个线程内执行如下赋值操作i = ...;j = ...; 可以看到，至于是先执行 i 还是 先执行 j ，对最终的结果不会产生影响。所以，上面代码真正执行时，既可以是 12i = ...;j = ...; 也可以是 12j = ...;i = ...; 这种特性称之为『指令重排』，多线程下『指令重排』会影响正确性。为什么要有重排指令这项优化呢？从 CPU执行指令的原理来理解一下吧 4.1 原理之指令级并行事实上，现代处理器会设计为一个时钟周期完成一条执行时间最长的 CPU 指令。为什么这么做呢？可以想到指令还可以再划分成一个个更小的阶段，例如，每条指令都可以分为： 取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回 这 5 个阶段 术语参考： instruction fetch (IF) instruction decode (ID) execute (EX) memory access (MEM) register write back (WB) 在不改变程序结果的前提下，这些指令的各个阶段可以通过重排序和组合来实现指令级并行，这一技术在 80’s 中叶到 90’s 中叶占据了计算架构的重要地位。 提示： 分阶段，分工是提升效率的关键！ 指令重排的前提是，重排指令不能影响结果，例如 1234567// 可以重排的例子int a = 10; // 指令1int b = 20; // 指令2System.out.println( a + b );// 不能重排的例子int a = 10; // 指令1int b = a - 5; // 指令2 参考： Scoreboarding and the Tomasulo algorithm (which is similar to scoreboarding but makes use of register renaming) are two of the most common techniques for implementing out-of-order execution and instruction-level parallelism. 现代 CPU 支持多级指令流水线，例如支持同时执行 取指令 - 指令译码 - 执行指令 - 内存访问 - 数据写回 的处理器，就可以称之为五级指令流水线。这时 CPU 可以在一个时钟周期内，同时运行五条指令的不同阶段（相当于一条执行时间最长的复杂指令），IPC = 1，本质上，流水线技术并不能缩短单条指令的执行时间，但它变相地提高了指令地吞吐率。 提示： 奔腾四（Pentium 4）支持高达 35 级流水线，但由于功耗太高被废弃 4.2 诡异的结果123456789101112131415int num = 0;boolean ready = false;// 线程1 执行此方法public void actor1(I_Result r) &#123; if(ready) &#123; r.r1 = num + num; &#125; else &#123; r.r1 = 1; &#125;&#125;// 线程2 执行此方法public void actor2(I_Result r) &#123; num = 2; ready = true;&#125; I_Result 是一个对象，有一个属性 r1 用来保存结果，问，可能的结果有几种？ 有同学这么分析 情况1：线程1 先执行，这时 ready = false，所以进入 else 分支结果为 1 情况2：线程2 先执行 num = 2，但没来得及执行 ready = true，线程1 执行，还是进入 else 分支，结果为1 情况3：线程2 执行到 ready = true，线程1 执行，这回进入 if 分支，结果为 4（因为 num 已经执行过了） 但我告诉你，结果还有可能是 0 😁😁😁，信不信吧！ 这种情况下是：线程2 执行 ready = true，切换到线程1，进入 if 分支，相加为 0，再切回线程2 执行 num = 2 相信很多人已经晕了 😵😵😵 这种现象叫做指令重排，是 JIT 编译器在运行时的一些优化，这个现象需要通过大量测试才能复现： 借助 java 并发压测工具 jcstress https://wiki.openjdk.java.net/display/CodeTools/jcstress 1mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=org.openjdk.jcstress -DarchetypeArtifactId=jcstress-java-test-archetype -DarchetypeVersion=0.5 -DgroupId=cn.itcast -DartifactId=ordering -Dversion=1.0 创建 maven 项目，提供如下测试类 123456789101112131415161718192021@JCStressTest@Outcome(id = &#123;&quot;1&quot;, &quot;4&quot;&#125;, expect = Expect.ACCEPTABLE, desc = &quot;ok&quot;)@Outcome(id = &quot;0&quot;, expect = Expect.ACCEPTABLE_INTERESTING, desc = &quot;!!!!&quot;)@Statepublic class ConcurrencyTest &#123; int num = 0; boolean ready = false; @Actor public void actor1(I_Result r) &#123; if(ready) &#123; r.r1 = num + num; &#125; else &#123; r.r1 = 1; &#125; &#125; @Actor public void actor2(I_Result r) &#123; num = 2; ready = true; &#125;&#125; 执行 12mvn clean installjava -jar target/jcstress.jar 会输出我们感兴趣的结果，摘录其中一次结果： 123456789101112131415161718192021222324*** INTERESTING tests Some interesting behaviors observed. This is for the plain curiosity. 2 matching test results. [OK] cn.itcast.ConcurrencyTest1 (JVM args: [-XX:-TieredCompilation]) Observed state Occurrences Expectation Interpretation 0 3,943 ACCEPTABLE_INTERESTING !!!! 1 20,090,265 ACCEPTABLE ok 4 26,615,603 ACCEPTABLE ok [OK] cn.itcast.ConcurrencyTest1 (JVM args: []) Observed state Occurrences Expectation Interpretation 0 1,714 ACCEPTABLE_INTERESTING !!!! 1 18,118,845 ACCEPTABLE ok 4 29,707,292 ACCEPTABLE ok 可以看到，出现结果为 0 的情况有 3,943 次，虽然次数相对很少，但毕竟是出现了。 4.3 解决方法volatile 修饰的变量，可以禁用指令重排 123456789101112131415161718192021@JCStressTest@Outcome(id = &#123;&quot;1&quot;, &quot;4&quot;&#125;, expect = Expect.ACCEPTABLE, desc = &quot;ok&quot;)@Outcome(id = &quot;0&quot;, expect = Expect.ACCEPTABLE_INTERESTING, desc = &quot;!!!!&quot;)@Statepublic class ConcurrencyTest &#123; int num = 0; volatile boolean ready = false; @Actor public void actor1(I_Result r) &#123; if(ready) &#123; r.r1 = num + num; &#125; else &#123; r.r1 = 1; &#125; &#125; @Actor public void actor2(I_Result r) &#123; num = 2; ready = true; &#125;&#125; 结果为： 123*** INTERESTING testsSome interesting behaviors observed. This is for the plain curiosity.0 matching test results. 4.4 原理之 volatilevolatile 的底层实现原理是内存屏障，Memory Barrier（Memory Fence） 对 volatile 变量的写指令后会加入写屏障 对 volatile 变量的读指令前会加入读屏障 (1) 如何保证可见性 写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中 12345public void actor2(I_Result r) &#123; num = 2; ready = true; // ready 是 volatile 赋值带写屏障 // 写屏障&#125; 而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据 123456789public void actor1(I_Result r) &#123; // 读屏障 // ready 是 volatile 读取值带读屏障 if(ready) &#123; r.r1 = num + num; &#125; else &#123; r.r1 = 1; &#125;&#125; (2) 如何保证有序性 写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后 12345public void actor2(I_Result r) &#123; num = 2; ready = true; // ready 是 volatile 赋值带写屏障 // 写屏障&#125; 读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前 123456789public void actor1(I_Result r) &#123; // 读屏障 // ready 是 volatile 读取值带读屏障 if(ready) &#123; r.r1 = num + num; &#125; else &#123; r.r1 = 1; &#125;&#125; 还是那句话，不能解决指令交错： 写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证读跑到它前面去 而有序性的保证也只是保证了本线程内相关代码不被重排序 (3) double-checked locking 问题以著名的 double-checked locking 单例模式为例 123456789101112131415public final class Singleton &#123; private Singleton() &#123; &#125; private static Singleton INSTANCE = null; public static Singleton getInstance() &#123; if(INSTANCE == null) &#123; // t2 // 首次访问会同步，而之后的使用没有 synchronized synchronized(Singleton.class) &#123; if (INSTANCE == null) &#123; // t1 INSTANCE = new Singleton(); &#125; &#125; &#125; return INSTANCE; &#125;&#125; 以上的实现特点是： 懒惰实例化 首次使用 getInstance() 才使用 synchronized 加锁，后续使用时无需加锁 有隐含的，但很关键的一点：第一个 if 使用了 INSTANCE 变量，是在同步块之外 但在多线程环境下，上面的代码是有问题的，getInstance 方法对应的字节码为： 123456789101112131415161718192021220: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton; # 获取常量池 索引， 压入到 操作数栈 中3: ifnonnull 37 # 弹出 操作数 栈顶 元素， 判断 元素 是否 为 null6: ldc #3 // class cn/itcast/n5/Singleton # 将 前面 getstatic 获取的 Singleton 压入到 操作数栈8: dup # 复制 操作数 栈顶 值，并将其压入 栈顶 ，此时操作数栈上有连续相同的两个对象地址9: astore_0 # 弹出栈顶元素，将栈顶值 保存到成员变量对应的 slots(0) 槽10: monitorenter # 开启 sychronized 锁11: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;14: ifnonnull 2717: new #3 // class cn/itcast/n5/Singleton 在 java 堆上为 Singleton 对象分配 内存空间，并将其 压入 操作数 栈顶20: dup # 复制 操作数 栈顶 值，并将其压入 栈顶 ，此时操作数栈上有连续相同的两个对象地址21: invokespecial #4 // Method &quot;&lt;init&gt;&quot;:()V # 调用实例初始化方法，从操作数栈顶弹出一个this引用24: putstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton; # 弹出操作数 栈顶元素，并将 栈顶值 赋值给 成员变量 INSTANCE27: aload_0 # 将成员变量表 slots(1) 槽（已经 实例好的 INSTANCE ） 压入到 操作数 栈中28: monitorexit # 关闭 sychronized 锁29: goto 37 32: astore_1 # 将 抛出异常的值 保存到 成员变量表 slots(2) 中，等下会取出33: aload_0 # 加载 INSTANCE 值 到 操作数栈 第二个 if 中 INSTANCE 不是 null 会执行，相当于 return INSTANCE34: monitorexit # 异常导致 非 正常 锁 关闭，这里 会再次去 关闭 synchronized 锁35: aload_1 # 取出 slots(2), 压入到 操作数栈36: athrow # 弹出操作数栈顶 元素，匹配 异常表 类型，然后抛出异常37: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton; 获取 INSTANCE # 获取常量池 索引， 压入到 操作数栈 中40: areturn # 将 操作数 栈顶 元素 弹出，压入到 调用者的 操作数栈 其中 17 表示创建对象，将对象引用入栈 // new Singleton 20 表示复制一份对象引用 // 引用地址 21 表示利用一个对象引用，调用构造方法 24 表示利用一个对象引用，赋值给 static INSTANCE 也许 jvm 会优化为：先执行 24，再执行 21。如果两个线程 t1，t2 按如下时间序列执行： 关键在于 0: getstatic 这行代码在 monitor 控制之外，它就像之前举例中不守规则的人，可以越过 monitor 读取INSTANCE 变量的值 这时 t1 还未完全将构造方法执行完毕，如果在构造方法中要执行很多初始化操作，那么 t2 拿到的是将是一个未初始化完毕的单例 对 INSTANCE 使用 volatile 修饰即可，可以禁用指令重排，但要注意在 JDK 5 以上的版本的 volatile 才会真正有效 (4) double-checked locking 解决12345678910111213141516public final class Singleton &#123; private Singleton() &#123; &#125; private static volatile Singleton INSTANCE = null; public static Singleton getInstance() &#123; // 实例没创建，才会进入内部的 synchronized代码块 if (INSTANCE == null) &#123; synchronized (Singleton.class) &#123; // t2 // 也许有其它线程已经创建实例，所以再判断一次 if (INSTANCE == null) &#123; // t1 INSTANCE = new Singleton(); &#125; &#125; &#125; return INSTANCE; &#125;&#125; 字节码上看不出来 volatile 指令的效果 123456789101112131415161718192021222324# -------------------------------------&gt; 加入对 INSTANCE 变量的读屏障0: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;3: ifnonnull 376: ldc #3 // class cn/itcast/n5/Singleton8: dup9: astore_010: monitorenter -----------------------&gt; 保证原子性、可见性11: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;14: ifnonnull 2717: new #3 // class cn/itcast/n5/Singleton20: dup21: invokespecial #4 // Method &quot;&lt;init&gt;&quot;:()V24: putstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;# -------------------------------------&gt; 加入对 INSTANCE 变量的写屏障27: aload_028: monitorexit ------------------------&gt; 保证原子性、可见性29: goto 3732: astore_133: aload_034: monitorexit35: aload_136: athrow37: getstatic #2 // Field INSTANCE:Lcn/itcast/n5/Singleton;40: areturn 如上面的注释内容所示，读写 volatile 变量时会加入内存屏障（Memory Barrier（Memory Fence）），保证下面两点： 可见性 写屏障（sfence）保证在该屏障之前的 t1 对共享变量的改动，都同步到主存当中 而读屏障（lfence）保证在该屏障之后 t2 对共享变量的读取，加载的是主存中最新数据 有序性 写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后 读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前 更底层是读写变量时使用 lock 指令来多核 CPU 之间的可见性与有序性 4.5 happens-beforehappens-before 规定了对共享变量的写操作对其它线程的读操作可见，它是可见性与有序性的一套规则总结，抛开以下 happens-before 规则，JMM 并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见 线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其它线程对该变量的读可见 12345678910111213static int x;static Object m = new Object();new Thread(()-&gt;&#123; synchronized(m) &#123; x = 10; &#125;&#125;,&quot;t1&quot;).start();new Thread(()-&gt;&#123; synchronized(m) &#123; System.out.println(x); &#125;&#125;,&quot;t2&quot;).start(); 线程对 volatile 变量的写，对接下来其它线程对该变量的读可见 1234567volatile static int x;new Thread(()-&gt;&#123; x = 10;&#125;,&quot;t1&quot;).start();new Thread(()-&gt;&#123; System.out.println(x);&#125;,&quot;t2&quot;).start(); 线程 start 前对变量的写，对该线程开始后对该变量的读可见 12345static int x;x = 10;new Thread(()-&gt;&#123; System.out.println(x);&#125;,&quot;t2&quot;).start(); 线程结束前对变量的写，对其它线程得知它结束后的读可见，对共享变量的读取，加载的是主存中最新数据（比如其它线程调用 t1.isAlive() 或 t1.join()等待它结束） 1234567static int x;Thread t1 = new Thread(()-&gt;&#123; x = 10;&#125;,&quot;t1&quot;);t1.start();t1.join();System.out.println(x); 线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过t2.interrupted 或 t2.isInterrupted） 12345678910111213141516171819202122static int x;public static void main(String[] args) &#123; Thread t2 = new Thread(()-&gt;&#123; while(true) &#123; if(Thread.currentThread().isInterrupted()) &#123; System.out.println(x); break; &#125; &#125; &#125;,&quot;t2&quot;); t2.start(); new Thread(()-&gt;&#123; sleep(1); x = 10; t2.interrupt(); &#125;,&quot;t1&quot;).start(); while(!t2.isInterrupted()) &#123; Thread.yield(); &#125; System.out.println(x);&#125; 对变量默认值（0，false，null）的写，对其它线程对该变量的读可见 具有传递性，如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z ，配合 volatile 的防指令重排，有下面的例子 12345678910volatile static int x;static int y;new Thread(()-&gt;&#123; y = 10; x = 20;&#125;,&quot;t1&quot;).start();new Thread(()-&gt;&#123; // x=20 对 t2 可见, 同时 y=10 也对 t2 可见 System.out.println(x);&#125;,&quot;t2&quot;).start(); 变量都是指成员变量或静态成员变量 4.6 习题balking 模式习题希望 doInit() 方法仅被调用一次，下面的实现是否有问题，为什么？ 123456789101112131415public class TestVolatile &#123; volatile boolean initialized = false; void init() &#123; if (initialized) &#123; return; &#125; doInit(); initialized = true; &#125; private void doInit() &#123; &#125;&#125; 线程安全单例习题单例模式有很多实现方法，饿汉、懒汉、静态内部类、枚举类，试分析每种实现下获取单例对象（即调用getInstance）时的线程安全，并思考注释中的问题 饿汉式：类加载就会导致该单实例对象被创建 懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建 实现1： 123456789101112131415// 问题1：为什么加 final// 问题2：如果实现了序列化接口, 还要做什么来防止反序列化破坏单例public final class Singleton implements Serializable &#123; // 问题3：为什么设置为私有? 是否能防止反射创建新的实例? private Singleton() &#123;&#125; // 问题4：这样初始化是否能保证单例对象创建时的线程安全? private static final Singleton INSTANCE = new Singleton(); // 问题5：为什么提供静态方法而不是直接将 INSTANCE 设置为 public, 说出你知道的理由 public static Singleton getInstance() &#123; return INSTANCE; &#125; public Object readResolve() &#123; return INSTANCE; &#125;&#125; 实现2： 123456789// 问题1：枚举单例是如何限制实例个数的// 问题2：枚举单例在创建时是否有并发问题// 问题3：枚举单例能否被反射破坏单例// 问题4：枚举单例能否被反序列化破坏单例// 问题5：枚举单例属于懒汉式还是饿汉式// 问题6：枚举单例如果希望加入一些单例创建时的初始化逻辑该如何做enum Singleton &#123; INSTANCE;&#125; 实现3： 123456789101112public final class Singleton &#123; private Singleton() &#123; &#125; private static Singleton INSTANCE = null; // 分析这里的线程安全, 并说明有什么缺点 public static synchronized Singleton getInstance() &#123; if( INSTANCE != null )&#123; return INSTANCE; &#125; INSTANCE = new Singleton(); return INSTANCE; &#125;&#125; 实现4：DCL 12345678910111213141516171819public final class Singleton &#123; private Singleton() &#123; &#125; // 问题1：解释为什么要加 volatile ? private static volatile Singleton INSTANCE = null; // 问题2：对比实现3, 说出这样做的意义 public static Singleton getInstance() &#123; if (INSTANCE != null) &#123; return INSTANCE; &#125; synchronized (Singleton.class) &#123; // 问题3：为什么还要在这里加为空判断, 之前不是判断过了吗 if (INSTANCE != null) &#123; // t2 return INSTANCE; &#125; INSTANCE = new Singleton(); return INSTANCE; &#125; &#125;&#125; 实现5： 1234567891011public final class Singleton &#123; private Singleton() &#123; &#125; // 问题1：属于懒汉式还是饿汉式 private static class LazyHolder &#123; static final Singleton INSTANCE = new Singleton(); &#125; // 问题2：在创建时是否有并发问题 public static Singleton getInstance() &#123; return LazyHolder.INSTANCE; &#125;&#125; 5. 本章小结本章重点讲解了 JMM 中的 可见性 - 由 JVM 缓存优化引起 有序性 - 由 JVM 指令重排序优化引起 happens-before 规则 原理方面 CPU 指令并行 volatile 模式方面 两阶段终止模式的 volatile 改进 同步模式之 balking 四、共享模型之无锁1. 本章内容 CAS 与 volatile 原子整数 原子引用 原子累加器 Unsafe 2. 问题提出有如下需求，保证 account.withdraw 取款方法的线程安全 123456789101112131415161718192021222324252627282930313233package cn.itcast;import java.util.ArrayList;import java.util.List;interface Account &#123; // 获取余额 Integer getBalance(); // 取款 void withdraw(Integer amount); /*** 方法内会启动 1000 个线程，每个线程做 -10 元 的操作* 如果初始余额为 10000 那么正确的结果应当是 0*/ static void demo(Account account) &#123; List&lt;Thread&gt; ts = new ArrayList&lt;&gt;(); long start = System.nanoTime(); for (int i = 0; i &lt; 1000; i++) &#123; ts.add(new Thread(() -&gt; &#123; account.withdraw(10); &#125;)); &#125; ts.forEach(Thread::start); ts.forEach(t -&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); long end = System.nanoTime(); System.out.println(account.getBalance() + &quot; cost: &quot; + (end-start)/1000_000 + &quot; ms&quot;); &#125;&#125; 原有实现并不是线程安全的 1234567891011121314class AccountUnsafe implements Account &#123; private Integer balance; public AccountUnsafe(Integer balance) &#123; this.balance = balance; &#125; @Override public Integer getBalance() &#123; return balance; &#125; @Override public void withdraw(Integer amount) &#123; balance -= amount; &#125;&#125; 执行测试代码 123public static void main(String[] args) &#123; Account.demo(new AccountUnsafe(10000));&#125; 某次的执行结果 1330 cost: 306 ms 2.1 为什么不安全withdraw 方法 123public void withdraw(Integer amount) &#123; balance -= amount;&#125; 对应的字节码 123456789ALOAD 0 // &lt;- thisALOAD 0 GETFIELD cn/itcast/AccountUnsafe.balance : Ljava/lang/Integer; // &lt;- this.balanceINVOKEVIRTUAL java/lang/Integer.intValue ()I // 拆箱ALOAD 1 // &lt;- amountINVOKEVIRTUAL java/lang/Integer.intValue ()I // 拆箱ISUB // 减法INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer; // 结果装箱PUTFIELD cn/itcast/AccountUnsafe.balance : Ljava/lang/Integer; // -&gt; this.balance 多线程执行流程 123456789101112131415161718ALOAD 0 // thread-0 &lt;- thisALOAD 0GETFIELD cn/itcast/AccountUnsafe.balance // thread-0 &lt;- this.balanceINVOKEVIRTUAL java/lang/Integer.intValue // thread-0 拆箱ALOAD 1 // thread-0 &lt;- amountINVOKEVIRTUAL java/lang/Integer.intValue // thread-0 拆箱ISUB // thread-0 减法INVOKESTATIC java/lang/Integer.valueOf // thread-0 结果装箱PUTFIELD cn/itcast/AccountUnsafe.balance // thread-0 -&gt; this.balanceALOAD 0 // thread-1 &lt;- thisALOAD 0GETFIELD cn/itcast/AccountUnsafe.balance // thread-1 &lt;- this.balanceINVOKEVIRTUAL java/lang/Integer.intValue // thread-1 拆箱ALOAD 1 // thread-1 &lt;- amountINVOKEVIRTUAL java/lang/Integer.intValue // thread-1 拆箱ISUB // thread-1 减法INVOKESTATIC java/lang/Integer.valueOf // thread-1 结果装箱PUTFIELD cn/itcast/AccountUnsafe.balance // thread-1 -&gt; this.balance 单核的指令交错 多核的指令交错 2.2 解决思路-锁首先想到的是给 Account 对象加锁 1234567891011121314class AccountUnsafe implements Account &#123; private Integer balance; public AccountUnsafe(Integer balance) &#123; this.balance = balance; &#125; @Override public synchronized Integer getBalance() &#123; return balance; &#125; @Override public synchronized void withdraw(Integer amount) &#123; balance -= amount; &#125;&#125; 结果为 10 cost: 399 ms 2.3 解决思路-无锁12345678910111213141516171819202122class AccountSafe implements Account &#123; private AtomicInteger balance; public AccountSafe(Integer balance) &#123; this.balance = new AtomicInteger(balance); &#125; @Override public Integer getBalance() &#123; return balance.get(); &#125; @Override public void withdraw(Integer amount) &#123; while (true) &#123; int prev = balance.get(); int next = prev - amount; if (balance.compareAndSet(prev, next)) &#123; break; &#125; &#125; // 可以简化为下面的方法 // balance.addAndGet(-1 * amount); &#125;&#125; 执行测试代码 123public static void main(String[] args) &#123; Account.demo(new AccountSafe(10000));&#125; 某次的执行结果 10 cost: 302 ms 3. CAS 与 volatile前面看到的 AtomicInteger 的解决方法，内部并没有用锁来保护共享变量的线程安全。那么它是如何实现的呢？ 123456789101112131415161718192021public void withdraw(Integer amount) &#123; while(true) &#123; // 需要不断尝试，直到成功为止 while (true) &#123; // 比如拿到了旧值 1000 int prev = balance.get(); // 在这个基础上 1000-10 = 990 int next = prev - amount; /*compareAndSet 正是做这个检查，在 set 前，先比较 prev 与当前值- 不一致了，next 作废，返回 false 表示失败比如，别的线程已经做了减法，当前值已经被减成了 990那么本线程的这次 990 就作废了，进入 while 下次循环重试- 一致，以 next 设置为新值，返回 true 表示成功*/ if (balance.compareAndSet(prev, next)) &#123; break; &#125; &#125; &#125;&#125; 其中的关键是 compareAndSet，它的简称就是 CAS （也有 Compare And Swap 的说法），它必须是原子操作。 注意 其实 CAS 的底层是 lock cmpxchg 指令（X86 架构），在单核 CPU 和多核 CPU 下都能够保证【比较-交换】的原子性。 在多核状态下，某个核执行到带 lock 的指令时，CPU 会让总线锁住，当这个核把此指令执行完毕，再开启总线。这个过程中不会被线程的调度机制所打断，保证了多个线程对内存操作的准确性，是原子的。 3.1 慢动作分析12345678910111213141516171819202122232425262728293031@Slf4jpublic class SlowMotion &#123; public static void main(String[] args) &#123; AtomicInteger balance = new AtomicInteger(10000); int mainPrev = balance.get(); log.debug(&quot;try get &#123;&#125;&quot;, mainPrev); new Thread(() -&gt; &#123; sleep(1000); int prev = balance.get(); balance.compareAndSet(prev, 9000); log.debug(balance.toString()); &#125;, &quot;t1&quot;).start(); sleep(2000); log.debug(&quot;try set 8000...&quot;); boolean isSuccess = balance.compareAndSet(mainPrev, 8000); log.debug(&quot;is success ? &#123;&#125;&quot;, isSuccess); if(!isSuccess)&#123; mainPrev = balance.get(); log.debug(&quot;try set 8000...&quot;); isSuccess = balance.compareAndSet(mainPrev, 8000); log.debug(&quot;is success ? &#123;&#125;&quot;, isSuccess); &#125; &#125; private static void sleep(int millis) &#123; try &#123; Thread.sleep(millis); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 输出结果 1234562019-10-13 11:28:37.134 [main] try get 100002019-10-13 11:28:38.154 [t1] 90002019-10-13 11:28:39.154 [main] try set 8000...2019-10-13 11:28:39.154 [main] is success ? false2019-10-13 11:28:39.154 [main] try set 8000...2019-10-13 11:28:39.154 [main] is success ? true 3.2 volatile获取共享变量时，为了保证该变量的可见性，需要使用 volatile 修饰。 它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存。即一个线程对 volatile 变量的修改，对另一个线程可见。 注意 volatile 仅仅保证了共享变量的可见性，让其它线程能够看到最新值，但不能解决指令交错问题（不能保证原子性） CAS 必须借助 volatile 才能读取到共享变量的最新值来实现【比较并交换】的效果 3.3 为什么无锁效率高 无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时候，发生上下文切换，进入阻塞。打个比喻 线程就好像高速跑道上的赛车，高速运行时，速度超快，一旦发生上下文切换，就好比赛车要减速、熄火，等被唤醒又得重新打火、启动、加速… 恢复到高速运行，代价比较大 但无锁情况下，因为线程要保持运行，需要额外 CPU 的支持，CPU 在这里就好比高速跑道，没有额外的跑道，线程想高速运行也无从谈起，虽然不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换。 3.4 CAS 的特点结合 CAS 和 volatile 可以实现无锁并发，适用于线程数少、多核 CPU 的场景下。 CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。 synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。 CAS 体现的是无锁并发、无阻塞并发，请仔细体会这两句话的意思 因为没有使用 synchronized，所以线程不会陷入阻塞，这是效率提升的因素之一 但如果竞争激烈，可以想到重试必然频繁发生，反而效率会受影响 4. 原子整数J.U.C 并发包提供了： AtomicBoolean AtomicInteger AtomicLong 以 AtomicInteger 为例 123456789101112131415161718192021222324252627AtomicInteger i = new AtomicInteger(0);// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++System.out.println(i.getAndIncrement());// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++iSystem.out.println(i.incrementAndGet());// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --iSystem.out.println(i.decrementAndGet());// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--System.out.println(i.getAndDecrement());// 获取并加值（i = 0, 结果 i = 5, 返回 0）System.out.println(i.getAndAdd(5));// 加值并获取（i = 5, 结果 i = 0, 返回 0）System.out.println(i.addAndGet(-5));// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）// 其中函数中的操作能保证原子，但函数需要无副作用System.out.println(i.getAndUpdate(p -&gt; p - 2));// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）// 其中函数中的操作能保证原子，但函数需要无副作用System.out.println(i.updateAndGet(p -&gt; p + 2));// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）// 其中函数中的操作能保证原子，但函数需要无副作用// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 finalSystem.out.println(i.getAndAccumulate(10, (p, x) -&gt; p + x));// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0）// 其中函数中的操作能保证原子，但函数需要无副作用System.out.println(i.accumulateAndGet(-10, (p, x) -&gt; p + x)); 5. 原子引用为什么需要原子引用类型？ AtomicReference AtomicMarkableReference AtomicStampedReference 有如下方法 123456789101112131415161718192021222324252627public interface DecimalAccount &#123; // 获取余额 BigDecimal getBalance(); // 取款 void withdraw(BigDecimal amount); /*** 方法内会启动 1000 个线程，每个线程做 -10 元 的操作* 如果初始余额为 10000 那么正确的结果应当是 0*/ static void demo(DecimalAccount account) &#123; List&lt;Thread&gt; ts = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; 1000; i++) &#123; ts.add(new Thread(() -&gt; &#123; account.withdraw(BigDecimal.TEN); &#125;)); &#125; ts.forEach(Thread::start); ts.forEach(t -&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); System.out.println(account.getBalance()); &#125;&#125; 试着提供不同的 DecimalAccount 实现，实现安全的取款操作 5.1 不安全实现12345678910111213141516171819class DecimalAccountUnsafe implements DecimalAccount &#123; BigDecimal balance; public DecimalAccountUnsafe(BigDecimal balance) &#123; this.balance = balance; &#125; @Override public BigDecimal getBalance() &#123; return balance; &#125; @Override public void withdraw(BigDecimal amount) &#123; BigDecimal balance = this.getBalance(); this.balance = balance.subtract(amount); &#125;&#125; 5.2 安全实现-使用锁12345678910111213141516171819202122class DecimalAccountSafeLock implements DecimalAccount &#123; private final Object lock = new Object(); BigDecimal balance; public DecimalAccountSafeLock(BigDecimal balance) &#123; this.balance = balance; &#125; @Override public BigDecimal getBalance() &#123; return balance; &#125; @Override public void withdraw(BigDecimal amount) &#123; synchronized (lock) &#123; BigDecimal balance = this.getBalance(); this.balance = balance.subtract(amount); &#125; &#125;&#125; 5.3 安全实现-使用CAS123456789101112131415161718192021222324class DecimalAccountSafeCas implements DecimalAccount &#123; AtomicReference&lt;BigDecimal&gt; ref; public DecimalAccountSafeCas(BigDecimal balance) &#123; ref = new AtomicReference&lt;&gt;(balance); &#125; @Override public BigDecimal getBalance() &#123; return ref.get(); &#125; @Override public void withdraw(BigDecimal amount) &#123; while (true) &#123; BigDecimal prev = ref.get(); BigDecimal next = prev.subtract(amount); if (ref.compareAndSet(prev, next)) &#123; break; &#125; &#125; &#125;&#125; 测试代码 123DecimalAccount.demo(new DecimalAccountUnsafe(new BigDecimal(&quot;10000&quot;)));DecimalAccount.demo(new DecimalAccountSafeLock(new BigDecimal(&quot;10000&quot;)));DecimalAccount.demo(new DecimalAccountSafeCas(new BigDecimal(&quot;10000&quot;))); 运行结果 1234310 cost: 425 ms0 cost: 285 ms0 cost: 274 ms 5.4 ABA问题及解决ABA 问题1234567891011121314151617181920static AtomicReference&lt;String&gt; ref = new AtomicReference&lt;&gt;(&quot;A&quot;);public static void main(String[] args) throws InterruptedException &#123; log.debug(&quot;main start...&quot;); // 获取值 A // 这个共享变量被它线程修改过？ String prev = ref.get(); other(); sleep(1); // 尝试改为 C log.debug(&quot;change A-&gt;C &#123;&#125;&quot;, ref.compareAndSet(prev, &quot;C&quot;));&#125;private static void other() &#123; new Thread(() -&gt; &#123; log.debug(&quot;change A-&gt;B &#123;&#125;&quot;, ref.compareAndSet(ref.get(), &quot;B&quot;)); &#125;, &quot;t1&quot;).start(); sleep(0.5); new Thread(() -&gt; &#123; log.debug(&quot;change B-&gt;A &#123;&#125;&quot;, ref.compareAndSet(ref.get(), &quot;A&quot;)); &#125;, &quot;t2&quot;).start();&#125; 输出 123411:29:52.325 c.Test36 [main] - main start...11:29:52.379 c.Test36 [t1] - change A-&gt;B true11:29:52.879 c.Test36 [t2] - change B-&gt;A true11:29:53.880 c.Test36 [main] - change A-&gt;C true 主线程仅能判断出共享变量的值与最初值 A 是否相同，不能感知到这种从 A 改为 B 又 改回 A 的情况，如果主线程希望： 只要有其它线程【动过了】共享变量，那么自己的 cas 就算失败，这时，仅比较值是不够的，需要再加一个版本号 AtomicStampedReference123456789101112131415161718192021222324252627static AtomicStampedReference&lt;String&gt; ref = new AtomicStampedReference&lt;&gt;(&quot;A&quot;, 0);public static void main(String[] args) throws InterruptedException &#123; log.debug(&quot;main start...&quot;); // 获取值 A String prev = ref.getReference(); // 获取版本号 int stamp = ref.getStamp(); log.debug(&quot;版本 &#123;&#125;&quot;, stamp); // 如果中间有其它线程干扰，发生了 ABA 现象 other(); sleep(1); // 尝试改为 C log.debug(&quot;change A-&gt;C &#123;&#125;&quot;, ref.compareAndSet(prev, &quot;C&quot;, stamp, stamp + 1));&#125;private static void other() &#123; new Thread(() -&gt; &#123; log.debug(&quot;change A-&gt;B &#123;&#125;&quot;, ref.compareAndSet(ref.getReference(), &quot;B&quot;, ref.getStamp(), ref.getStamp() + 1)); log.debug(&quot;更新版本为 &#123;&#125;&quot;, ref.getStamp()); &#125;, &quot;t1&quot;).start(); sleep(0.5); new Thread(() -&gt; &#123; log.debug(&quot;change B-&gt;A &#123;&#125;&quot;, ref.compareAndSet(ref.getReference(), &quot;A&quot;, ref.getStamp(), ref.getStamp() + 1)); log.debug(&quot;更新版本为 &#123;&#125;&quot;, ref.getStamp()); &#125;, &quot;t2&quot;).start();&#125; 输出为 123456715:41:34.891 c.Test36 [main] - main start...15:41:34.894 c.Test36 [main] - 版本 015:41:34.956 c.Test36 [t1] - change A-&gt;B true15:41:34.956 c.Test36 [t1] - 更新版本为 115:41:35.457 c.Test36 [t2] - change B-&gt;A true15:41:35.457 c.Test36 [t2] - 更新版本为 215:41:36.457 c.Test36 [main] - change A-&gt;C false AtomicStampedReference 可以给原子引用加上版本号，追踪原子引用整个的变化过程，如： A -&gt; B -&gt; A -&gt;C ，通过AtomicStamped-Reference，我们可以知道，引用变量中途被更改了几次。但是有时候，并不关心引用变量更改了几次，只是单纯的关心是否更改过，所以就有了AtomicMarkableReference AtomicMarkableReference1234567class GarbageBag &#123;String desc;public GarbageBag(String desc) &#123;this.desc = desc;&#125;public void setDesc(String desc) &#123;this.desc = desc; 123456789101112131415161718192021222324@Slf4jpublic class TestABAAtomicMarkableReference &#123; public static void main(String[] args) throws InterruptedException &#123; GarbageBag bag = new GarbageBag(&quot;装满了垃圾&quot;); // 参数2 mark 可以看作一个标记，表示垃圾袋满了 AtomicMarkableReference&lt;GarbageBag&gt; ref = new AtomicMarkableReference&lt;&gt;(bag, true); log.debug(&quot;主线程 start...&quot;); GarbageBag prev = ref.getReference(); log.debug(prev.toString()); new Thread(() -&gt; &#123; log.debug(&quot;打扫卫生的线程 start...&quot;); bag.setDesc(&quot;空垃圾袋&quot;); while (!ref.compareAndSet(bag, bag, true, false)) &#123;&#125; log.debug(bag.toString()); &#125;).start(); Thread.sleep(1000); log.debug(&quot;主线程想换一只新垃圾袋？&quot;); boolean success = ref.compareAndSet(prev, new GarbageBag(&quot;空垃圾袋&quot;), true, false); log.debug(&quot;换了么？&quot; + success); log.debug(ref.getReference().toString()); &#125;&#125; 输出 12345672019-10-13 15:30:09.264 [main] 主线程 start...2019-10-13 15:30:09.270 [main] cn.itcast.GarbageBag@5f0fd5a0 装满了垃圾2019-10-13 15:30:09.293 [Thread-1] 打扫卫生的线程 start...2019-10-13 15:30:09.294 [Thread-1] cn.itcast.GarbageBag@5f0fd5a0 空垃圾袋2019-10-13 15:30:10.294 [main] 主线程想换一只新垃圾袋？2019-10-13 15:30:10.294 [main] 换了么？false2019-10-13 15:30:10.294 [main] cn.itcast.GarbageBag@5f0fd5a0 空垃圾袋 可以注释掉打扫卫生线程代码，再观察输出 6. 原子数组 AtomicIntegerArray AtomicLongArray AtomicReferenceArray 有如下方法 1234567891011121314151617181920212223242526272829303132333435/**参数1，提供数组、可以是线程不安全数组或线程安全数组参数2，获取数组长度的方法参数3，自增方法，回传 array, index参数4，打印数组的方法*/// supplier 提供者 无中生有 ()-&gt;结果// function 函数 一个参数一个结果 (参数)-&gt;结果 , BiFunction (参数1,参数2)-&gt;结果// consumer 消费者 一个参数没结果 (参数)-&gt;void, BiConsumer (参数1,参数2)-&gt;private static &lt;T&gt; void demo( Supplier&lt;T&gt; arraySupplier, Function&lt;T, Integer&gt; lengthFun, BiConsumer&lt;T, Integer&gt; putConsumer, Consumer&lt;T&gt; printConsumer ) &#123; List&lt;Thread&gt; ts = new ArrayList&lt;&gt;(); T array = arraySupplier.get(); int length = lengthFun.apply(array); for (int i = 0; i &lt; length; i++) &#123; // 每个线程对数组作 10000 次操作 ts.add(new Thread(() -&gt; &#123; for (int j = 0; j &lt; 10000; j++) &#123; putConsumer.accept(array, j%length); &#125; &#125;)); &#125; ts.forEach(t -&gt; t.start()); // 启动所有线程 ts.forEach(t -&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); // 等所有线程结束 printConsumer.accept(array);&#125; 6.1 不安全的数组123456demo( ()-&gt;new int[10], (array)-&gt;array.length, (array, index) -&gt; array[index]++, array-&gt; System.out.println(Arrays.toString(array))); 结果 1[9870, 9862, 9774, 9697, 9683, 9678, 9679, 9668, 9680, 9698] 6.2 安全的数组123456demo( ()-&gt; new AtomicIntegerArray(10), (array) -&gt; array.length(), (array, index) -&gt; array.getAndIncrement(index), array -&gt; System.out.println(array)); 结果 1[10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000] 7. 字段更新器 AtomicReferenceFieldUpdater // 域 字段 AtomicIntegerFieldUpdater AtomicLongFieldUpdater 利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合 volatile 修饰的字段使用，否则会出现异常 1Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Must be volatile type 1234567891011121314151617public class Test5 &#123; private volatile int field; public static void main(String[] args) &#123; AtomicIntegerFieldUpdater fieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Test5.class, &quot;field&quot;); Test5 test5 = new Test5(); fieldUpdater.compareAndSet(test5, 0, 10); // 修改成功 field = 10 System.out.println(test5.field); // 修改成功 field = 20 fieldUpdater.compareAndSet(test5, 10, 20); System.out.println(test5.field); // 修改失败 field = 20 fieldUpdater.compareAndSet(test5, 10, 30); System.out.println(test5.field); &#125;&#125; 输出 123102020 8. 原子累加器8.1 累加器性能比较1234567891011121314151617181920212223242526private static &lt;T&gt; void demo(Supplier&lt;T&gt; adderSupplier, Consumer&lt;T&gt; action) &#123; T adder = adderSupplier.get(); long start = System.nanoTime(); List&lt;Thread&gt; ts = new ArrayList&lt;&gt;(); // 4 个线程，每人累加 50 万 for (int i = 0; i &lt; 40; i++) &#123; ts.add(new Thread(() -&gt; &#123; for (int j = 0; j &lt; 500000; j++) &#123; action.accept(adder); &#125; &#125;)); &#125; ts.forEach(t -&gt; t.start()); ts.forEach(t -&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); long end = System.nanoTime(); System.out.println(adder + &quot; cost:&quot; + (end - start)/1000_000);&#125; 比较 AtomicLong 与 LongAdder 1234567for (int i = 0; i &lt; 5; i++) &#123; demo(() -&gt; new LongAdder(), adder -&gt; adder.increment());&#125;for (int i = 0; i &lt; 5; i++) &#123; demo(() -&gt; new AtomicLong(), adder -&gt; adder.getAndIncrement());&#125; 输出 123456789101000000 cost:431000000 cost:91000000 cost:71000000 cost:71000000 cost:71000000 cost:311000000 cost:271000000 cost:281000000 cost:241000000 cost:22 性能提升的原因很简单，就是在有竞争时，设置多个累加单元，Therad-0 累加 Cell[0]，而 Thread-1 累加Cell[1]… 最后将结果汇总。这样它们在累加时操作的不同的 Cell 变量，因此减少了 CAS 重试失败，从而提高性能。 8.2 源码之LongAdderLongAdder 是并发大师 @author Doug Lea （大哥李）的作品，设计的非常精巧 LongAdder 类有几个关键域 123456// 累加单元数组, 懒惰初始化transient volatile Cell[] cells;// 基础值, 如果没有竞争, 则用 cas 累加这个域transient volatile long base;// 在 cells 创建或扩容时, 置为 1, 表示加锁transient volatile int cellsBusy; 8.3 cas 锁123456789101112131415// 不要用于实践！！！public class LockCas &#123; private AtomicInteger state = new AtomicInteger(0); public void lock() &#123; while (true) &#123; if (state.compareAndSet(0, 1)) &#123; break; &#125; &#125; &#125; public void unlock() &#123; log.debug(&quot;unlock...&quot;); state.set(0); &#125;&#125; 测试 1234567891011121314151617181920LockCas lock = new LockCas();new Thread(() -&gt; &#123; log.debug(&quot;begin...&quot;); lock.lock(); try &#123; log.debug(&quot;lock...&quot;); sleep(1); &#125; finally &#123; lock.unlock(); &#125;&#125;).start();new Thread(() -&gt; &#123; log.debug(&quot;begin...&quot;); lock.lock(); try &#123; log.debug(&quot;lock...&quot;); &#125; finally &#123; lock.unlock(); &#125;&#125;).start(); 输出 12345618:27:07.198 c.Test42 [Thread-0] - begin...18:27:07.202 c.Test42 [Thread-0] - lock...18:27:07.198 c.Test42 [Thread-1] - begin...18:27:08.204 c.Test42 [Thread-0] - unlock...18:27:08.204 c.Test42 [Thread-1] - lock...18:27:08.204 c.Test42 [Thread-1] - unlock... 8.4 原理之伪共享其中 Cell 即为累加单元 1234567891011// 防止缓存行伪共享@sun.misc.Contended static final class Cell &#123; volatile long value; Cell(long x) &#123; value = x; &#125; // 最重要的方法, 用来 cas 方式进行累加, prev 表示旧值, next 表示新值 final boolean cas(long prev, long next) &#123; return UNSAFE.compareAndSwapLong(this, valueOffset, prev, next); &#125; // 省略不重要代码 &#125; 得从缓存说起 缓存与内存的速度比较 从 cpu 到 大约需要的时钟周期 寄存器 1 cycle (4GHz 的 CPU 约为0.25ns) L1 3~4 cycle L2 10~20 cycle L3 40~45 cycle 内存 120~240 cycle 因为 CPU 与 内存的速度差异很大，需要靠预读数据至缓存来提升效率。 而缓存以缓存行为单位，每个缓存行对应着一块内存，一般是 64 byte（8 个 long）（译注：有可能处理器的缓存行是128字节，那么使用64字节填充还是会存在伪共享问题） 缓存的加入会造成数据副本的产生，即同一份数据会缓存在不同核心的缓存行中 CPU 要保证数据的一致性，如果某个 CPU 核心更改了数据，其它 CPU 核心对应的整个缓存行必须失效 因为 Cell 是数组形式，在内存中是连续存储的，一个 Cell 为 24 字节（16 字节的对象头和 8 字节的 value），因此缓存行可以存下 2 个的 Cell 对象。这样问题来了： Core-0 要修改 Cell[0] Core-1 要修改 Cell[1] 无论谁修改成功，都会导致对方 Core 的缓存行失效，比如 Core-0 中 Cell[0]=6000, Cell[1]=8000 要累加Cell[0]=6001, Cell[1]=8000 ，这时会让 Core-1 的缓存行失效 @sun.misc.Contended 用来解决这个问题，它的原理是在使用此注解的对象或字段的前后各增加 128 字节大小的padding，从而让 CPU 将对象预读至缓存时占用不同的缓存行，这样，不会造成对方缓存行的失效 累加主要调用下面的方法 123456789101112131415161718192021222324public void add(long x) &#123; // as 为累加单元数组 // b 为基础值 // x 为累加值 Cell[] as; long b, v; int m; Cell a; // 进入 if 的两个条件 // 1. as 有值, 表示已经发生过竞争, 进入 if // 2. cas 给 base 累加时失败了, 表示 base 发生了竞争, 进入 if if ((as = cells) != null || !casBase(b = base, b + x)) &#123; // uncontended 表示 cell 没有竞争 boolean uncontended = true; if ( // as 还没有创建 as == null || (m = as.length - 1) &lt; 0 || // 当前线程对应的 cell 还没有 (a = as[getProbe() &amp; m]) == null || // cas 给当前线程的 cell 累加失败 uncontended=false ( a 为当前线程的 cell ) !(uncontended = a.cas(v = a.value, v + x)) ) &#123; // 进入 cell 数组创建、cell 创建的流程 longAccumulate(x, null, uncontended); &#125; &#125;&#125; add 流程图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152final void longAccumulate(long x, LongBinaryOperator fn, boolean wasUncontended) &#123; int h; // 当前线程还没有对应的 cell, 需要随机生成一个 h 值用来将当前线程绑定到 cell if ((h = getProbe()) == 0) &#123; // 初始化 probe ThreadLocalRandom.current(); // h 对应新的 probe 值, 用来对应 cell h = getProbe(); wasUncontended = true; &#125; // collide 为 true 表示需要扩容 boolean collide = false; for (;;) &#123; Cell[] as; Cell a; int n; long v; // 已经有了 cells if ((as = cells) != null &amp;&amp; (n = as.length) &gt; 0) &#123; // 还没有 cell if ((a = as[(n - 1) &amp; h]) == null) &#123; // 为 cellsBusy 加锁, 创建 cell, cell 的初始累加值为 x // 成功则 break, 否则继续 continue 循环 &#125; // 有竞争, 改变线程对应的 cell 来重试 cas else if (!wasUncontended) wasUncontended = true; // cas 尝试累加, fn 配合 LongAccumulator 不为 null, 配合 LongAdder 为 null else if (a.cas(v = a.value, ((fn == null) ? v + x : fn.applyAsLong(v, x)))) break; // 如果 cells 长度已经超过了最大长度, 或者已经扩容, 改变线程对应的 cell 来重试 cas else if (n &gt;= NCPU || cells != as) collide = false; // 确保 collide 为 false 进入此分支, 就不会进入下面的 else if 进行扩容了 else if (!collide) collide = true; // 加锁 else if (cellsBusy == 0 &amp;&amp; casCellsBusy()) &#123; // 加锁成功, 扩容 continue; &#125; // 改变线程对应的 cell h = advanceProbe(h); &#125; // 还没有 cells, 尝试给 cellsBusy 加锁 else if (cellsBusy == 0 &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123; // 加锁成功, 初始化 cells, 最开始长度为 2, 并填充一个 cell // 成功则 break; &#125; // 上两种情况失败, 尝试给 base 累加 else if (casBase(v = base, ((fn == null) ? v + x : fn.applyAsLong(v, x)))) break; &#125;&#125; longAccumulate 流程图 每个线程刚进入 longAccumulate 时，会尝试对应一个 cell 对象（找到一个坑位） 获取最终结果通过 sum 方法 1234567891011public long sum() &#123; Cell[] as = cells; Cell a; long sum = base; if (as != null) &#123; for (int i = 0; i &lt; as.length; ++i) &#123; if ((a = as[i]) != null) sum += a.value; &#125; &#125; return sum;&#125; 9. Unsafe9.1 概述Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得 123456789101112131415public class UnsafeAccessor &#123; static Unsafe unsafe; static &#123; try &#123; Field theUnsafe = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;); theUnsafe.setAccessible(true); unsafe = (Unsafe) theUnsafe.get(null); &#125; catch (NoSuchFieldException | IllegalAccessException e) &#123; throw new Error(e); &#125; &#125; static Unsafe getUnsafe() &#123; return unsafe; &#125;&#125; 9.2 Unsafe CAS 操作12345@Dataclass Student &#123; volatile int id; volatile String name;&#125; 1234567891011Unsafe unsafe = UnsafeAccessor.getUnsafe();Field id = Student.class.getDeclaredField(&quot;id&quot;);Field name = Student.class.getDeclaredField(&quot;name&quot;);// 获得成员变量的偏移量long idOffset = UnsafeAccessor.unsafe.objectFieldOffset(id);long nameOffset = UnsafeAccessor.unsafe.objectFieldOffset(name);Student student = new Student();// 使用 cas 方法替换成员变量的值UnsafeAccessor.unsafe.compareAndSwapInt(student, idOffset, 0, 20); // 返回 trueUnsafeAccessor.unsafe.compareAndSwapObject(student, nameOffset, null, &quot;张三&quot;); // 返回 trueSystem.out.println(student); 输出 1Student(id=20, name=张三) 使用自定义的 AtomicData 实现之前线程安全的原子整数 Account 实现 12345678910111213141516171819202122232425262728293031class AtomicData &#123; private volatile int data; static final Unsafe unsafe; static final long DATA_OFFSET; static &#123; unsafe = UnsafeAccessor.getUnsafe(); try &#123; // data 属性在 DataContainer 对象中的偏移量，用于 Unsafe 直接访问该属性 DATA_OFFSET = unsafe.objectFieldOffset(AtomicData.class.getDeclaredField(&quot;data&quot;)); &#125; catch (NoSuchFieldException e) &#123; throw new Error(e); &#125; &#125; public AtomicData(int data) &#123; this.data = data; &#125; public void decrease(int amount) &#123; int oldValue; while(true) &#123; // 获取共享变量旧值，可以在这一行加入断点，修改 data 调试来加深理解 oldValue = data; // cas 尝试修改 data 为 旧值 + amount，如果期间旧值被别的线程改了，返回 false if (unsafe.compareAndSwapInt(this, DATA_OFFSET, oldValue, oldValue - amount)) &#123; return; &#125; &#125; &#125; public int getData() &#123; return data; &#125;&#125; Account 实现 1234567891011Account.demo(new Account() &#123; AtomicData atomicData = new AtomicData(10000); @Override public Integer getBalance() &#123; return atomicData.getData(); &#125; @Override public void withdraw(Integer amount) &#123; atomicData.decrease(amount); &#125;&#125;); 10. 本章小 结 CAS 与 volatile API 原子整数 原子引用 原子数组 字段更新器 原子累加器 Unsafe 原理方面 LongAdder 源码 伪共享 五、共享模型之不可变1. 本章内容 不可变类的使用 不可变类设计 无状态类设计 2. 日期转换的问题2.1 问题提出下面的代码在运行时，由于 SimpleDateFormat 不是线程安全的 12345678910SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);for (int i = 0; i &lt; 10; i++) &#123; new Thread(() -&gt; &#123; try &#123; log.debug(&quot;&#123;&#125;&quot;, sdf.parse(&quot;1951-04-21&quot;)); &#125; catch (Exception e) &#123; log.error(&quot;&#123;&#125;&quot;, e); &#125; &#125;).start();&#125; 有很大几率出现 java.lang.NumberFormatException 或者出现不正确的日期解析结果，例如： 123456789101112131415161718192021222324252627282930313219:10:40.859 [Thread-2] c.TestDateParse - &#123;&#125;java.lang.NumberFormatException: For input string: &quot;&quot; at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Long.parseLong(Long.java:601) at java.lang.Long.parseLong(Long.java:631) at java.text.DigitList.getLong(DigitList.java:195) at java.text.DecimalFormat.parse(DecimalFormat.java:2084) at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:2162) at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514) at java.text.DateFormat.parse(DateFormat.java:364) at cn.itcast.n7.TestDateParse.lambda$test1$0(TestDateParse.java:18) at java.lang.Thread.run(Thread.java:748)19:10:40.859 [Thread-1] c.TestDateParse - &#123;&#125;java.lang.NumberFormatException: empty String at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1842) at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110) at java.lang.Double.parseDouble(Double.java:538) at java.text.DigitList.getDouble(DigitList.java:169) at java.text.DecimalFormat.parse(DecimalFormat.java:2089) at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:2162) at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514) at java.text.DateFormat.parse(DateFormat.java:364) at cn.itcast.n7.TestDateParse.lambda$test1$0(TestDateParse.java:18) at java.lang.Thread.run(Thread.java:748)19:10:40.857 [Thread-8] c.TestDateParse - Sat Apr 21 00:00:00 CST 195119:10:40.857 [Thread-9] c.TestDateParse - Sat Apr 21 00:00:00 CST 195119:10:40.857 [Thread-6] c.TestDateParse - Sat Apr 21 00:00:00 CST 195119:10:40.857 [Thread-4] c.TestDateParse - Sat Apr 21 00:00:00 CST 195119:10:40.857 [Thread-5] c.TestDateParse - Mon Apr 21 00:00:00 CST 17896064519:10:40.857 [Thread-0] c.TestDateParse - Sat Apr 21 00:00:00 CST 195119:10:40.857 [Thread-7] c.TestDateParse - Sat Apr 21 00:00:00 CST 195119:10:40.857 [Thread-3] c.TestDateParse - Sat Apr 21 00:00:00 CST 1951 2.2 思路 - 同步锁这样虽能解决问题，但带来的是性能上的损失，并不算很好： 123456789101112SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);for (int i = 0; i &lt; 50; i++) &#123; new Thread(() -&gt; &#123; synchronized (sdf) &#123; try &#123; log.debug(&quot;&#123;&#125;&quot;, sdf.parse(&quot;1951-04-21&quot;)); &#125; catch (Exception e) &#123; log.error(&quot;&#123;&#125;&quot;, e); &#125; &#125; &#125;).start();&#125; 2.3 思路 - 不可变如果一个对象在不能够修改其内部状态（属性），那么它就是线程安全的，因为不存在并发修改啊！这样的对象在Java 中有很多，例如在 Java 8 后，提供了一个新的日期格式化类 1234567DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;);for (int i = 0; i &lt; 10; i++) &#123; new Thread(() -&gt; &#123; LocalDate date = dtf.parse(&quot;2018-10-01&quot;, LocalDate::from); log.debug(&quot;&#123;&#125;&quot;, date); &#125;).start();&#125; 可以看 DateTimeFormatter 的文档： 12@implSpecThis class is immutable and thread-safe. 不可变对象，实际是另一种避免竞争的方式。 3. 不可变设计另一个大家更为熟悉的 String 类也是不可变的，以它为例，说明一下不可变设计的要素 12345678public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123; /** The value is used for character storage. */ private final char value[]; /** Cache the hash code for the string */ private int hash; // Default to 0 // ...&#125; 3.1 final 的使用发现该类、类中所有属性都是 final 的 属性用 final 修饰保证了该属性是只读的，不能修改 类用 final 修饰保证了该类中的方法不能被覆盖，防止子类无意间破坏不可变性 3.2 保护性拷贝但有同学会说，使用字符串时，也有一些跟修改相关的方法啊，比如 substring 等，那么下面就看一看这些方法是如何实现的，就以 substring 为例： 12345678910public String substring(int beginIndex) &#123; if (beginIndex &lt; 0) &#123; throw new StringIndexOutOfBoundsException(beginIndex); &#125; int subLen = value.length - beginIndex; if (subLen &lt; 0) &#123; throw new StringIndexOutOfBoundsException(subLen); &#125; return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);&#125; 发现其内部是调用 String 的构造方法创建了一个新字符串，再进入这个构造看看，是否对 final char[] value 做了修改： 123456789101112131415161718public String(char value[], int offset, int count) &#123; if (offset &lt; 0) &#123; throw new StringIndexOutOfBoundsException(offset); &#125; if (count &lt;= 0) &#123; if (count &lt; 0) &#123; throw new StringIndexOutOfBoundsException(count); &#125; if (offset &lt;= value.length) &#123; this.value = &quot;&quot;.value; return; &#125; &#125; if (offset &gt; value.length - count) &#123; throw new StringIndexOutOfBoundsException(offset + count); &#125; this.value = Arrays.copyOfRange(value, offset, offset+count);&#125; 结果发现也没有，构造新字符串对象时，会生成新的 char[] value，对内容进行复制 。这种通过创建副本对象来避免共享的手段称之为【保护性拷贝（defensive copy）】 3.3 模式之享元简介定义 英文名称：Flyweight pattern. 当需要重用数量有限的同一类对象时 wikipedia： A flyweight is an object that minimizes memory usage by sharing as much data as possible with other similar objects 出自 “Gang of Four” design patterns归类 Structual patterns 体现包装类在JDK中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了 valueOf 方法，例如 Long 的 valueOf 会缓存 -128~127 之间的 Long 对象，在这个范围之间会重用对象，大于这个范围，才会新建 Long 对象： 1234567public static Long valueOf(long l) &#123; final int offset = 128; if (l &gt;= -128 &amp;&amp; l &lt;= 127) &#123; // will cache return LongCache.cache[(int)l + offset]; &#125; return new Long(l);&#125; 注意： Byte, Short, Long 缓存的范围都是 -128~127 Character 缓存的范围是 0~127 Integer的默认范围是 -128~127 最小值不能变 但最大值可以通过调整虚拟机参数 -Djava.lang.Integer.IntegerCache.high 来改变 Boolean 缓存了 TRUE 和 FALSE String 池BigDecimal BigIntegerDIY例如：一个线上商城应用，QPS 达到数千，如果每次都重新创建和关闭数据库连接，性能会受到极大影响。 这时预先创建好一批连接，放入连接池。一次请求到达后，从连接池获取连接，使用完毕后再还回连接池，这样既节约了连接的创建和关闭时间，也实现了连接的重用，不至于让庞大的连接数压垮数据库 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556class Pool &#123; // 1. 连接池大小 private final int poolSize; // 2. 连接对象数组 private Connection[] connections; // 3. 连接状态数组 0 表示空闲， 1 表示繁忙 private AtomicIntegerArray states; // 4. 构造方法初始化 public Pool(int poolSize) &#123; this.poolSize = poolSize; this.connections = new Connection[poolSize]; this.states = new AtomicIntegerArray(new int[poolSize]); for (int i = 0; i &lt; poolSize; i++) &#123; connections[i] = new MockConnection(&quot;连接&quot; + (i+1)); &#125; &#125; // 5. 借连接 public Connection borrow() &#123; while(true) &#123; for (int i = 0; i &lt; poolSize; i++) &#123; // 获取空闲连接 if(states.get(i) == 0) &#123; if (states.compareAndSet(i, 0, 1)) &#123; log.debug(&quot;borrow &#123;&#125;&quot;, connections[i]); return connections[i]; &#125; &#125; &#125; // 如果没有空闲连接，当前线程进入等待 synchronized (this) &#123; try &#123; log.debug(&quot;wait...&quot;); this.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; // 6. 归还连接 public void free(Connection conn) &#123; for (int i = 0; i &lt; poolSize; i++) &#123; if (connections[i] == conn) &#123; states.set(i, 0); synchronized (this) &#123; log.debug(&quot;free &#123;&#125;&quot;, conn); this.notifyAll(); &#125; break; &#125; &#125; &#125;&#125;class MockConnection implements Connection &#123; // 实现略&#125; 使用连接池： 123456789101112Pool pool = new Pool(2);for (int i = 0; i &lt; 5; i++) &#123; new Thread(() -&gt; &#123; Connection conn = pool.borrow(); try &#123; Thread.sleep(new Random().nextInt(1000)); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; pool.free(conn); &#125;).start();&#125; 以上实现没有考虑： 连接的动态增长与收缩 连接保活（可用性检测） 等待超时处理 分布式 hash 对于关系型数据库，有比较成熟的连接池实现，例如c3p0, druid等 对于更通用的对象池，可以考虑使用apachecommons pool，例如redis连接池可以参考jedis中关于连接池的实现 3.4 原理之 final设置 final 变量的原理理解了 volatile 原理，再对比 final 的实现就比较简单了 123public class TestFinal &#123; final int a = 20;&#125; 字节码 123456780: aload_01: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V4: aload_05: bipush 207: putfield #2 // Field a:I&lt;-- 写屏障10: return 发现 final 变量的赋值也会通过 putfield 指令来完成，同样在这条指令之后也会加入写屏障，保证在其它线程读到它的值时不会出现为 0 的情况 获取final 变量的原理123456789101112131415161718192021222324252627282930313233public class TestFinal &#123; static int A = 10; static int B = Short.MAX_VALUE+1; final int a = 20; final int b = Integer.MAX_VALUE; final void test1() &#123; final int c = 30; new Thread(()-&gt;&#123; System.out.println(c); &#125;).start(); final int d = 30; class Task implements Runnable &#123; @Override public void run() &#123; System.out.println(d); &#125; &#125; new Thread(new Task()).start(); &#125;&#125;class UseFinal1 &#123; public void test() &#123; System.out.println(TestFinal.A); System.out.println(TestFinal.B); System.out.println(new TestFinal().a); System.out.println(new TestFinal().b); new TestFinal().test1(); &#125;&#125; 对UseFinal1类反编译后 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162class cn/itcast/n5/UseFinal1 &#123; // compiled from: TestFinal.java // access flags 0x0 &lt;init&gt;()V L0 LINENUMBER 29 L0 ALOAD 0 INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V RETURN L1 LOCALVARIABLE this Lcn/itcast/n5/UseFinal1; L0 L1 0 MAXSTACK = 1 MAXLOCALS = 1 // access flags 0x1 public test()V L0 LINENUMBER 31 L0 GETSTATIC java/lang/System.out : Ljava/io/PrintStream; GETSTATIC cn/itcast/n5/TestFinal.A : I // 1 处 这里，直接拿 静态变量 INVOKEVIRTUAL java/io/PrintStream.println (I)V L1 LINENUMBER 32 L1 GETSTATIC java/lang/System.out : Ljava/io/PrintStream; GETSTATIC cn/itcast/n5/TestFinal.B : I // 2 处 这里 INVOKEVIRTUAL java/io/PrintStream.println (I)V L2 LINENUMBER 33 L2 GETSTATIC java/lang/System.out : Ljava/io/PrintStream; NEW cn/itcast/n5/TestFinal DUP INVOKESPECIAL cn/itcast/n5/TestFinal.&lt;init&gt; ()V INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class; POP BIPUSH 20 // 1 处 这里，加了 final,bipush 是 把20 放到 这个方法 test() 的栈中，相当于复制一份 INVOKEVIRTUAL java/io/PrintStream.println (I)V L3 LINENUMBER 34 L3 GETSTATIC java/lang/System.out : Ljava/io/PrintStream; NEW cn/itcast/n5/TestFinal DUP INVOKESPECIAL cn/itcast/n5/TestFinal.&lt;init&gt; ()V INVOKEVIRTUAL java/lang/Object.getClass ()Ljava/lang/Class; POP LDC 2147483647 // 2 处 这里，是将 Integer.MAX_VALUE 放到运行常量池 里 INVOKEVIRTUAL java/io/PrintStream.println (I)V L4 LINENUMBER 35 L4 NEW cn/itcast/n5/TestFinal DUP INVOKESPECIAL cn/itcast/n5/TestFinal.&lt;init&gt; ()V INVOKEVIRTUAL cn/itcast/n5/TestFinal.test1 ()V L5 LINENUMBER 36 L5 RETURN L6 LOCALVARIABLE this Lcn/itcast/n5/UseFinal1; L0 L6 0 MAXSTACK = 3 MAXLOCALS = 1&#125; 总结： jdk1.8后，不加final修饰的类成员变量或非静态成员变量，类变量是通过getstatic 到该类 栈获取，普通变量是通过 getfield到栈获取 加 final 后，类变量或者普通变量 -128~127 数值使用 bipush 操作，修饰的变量压入到方法栈中，相当于复制了一份作为共享变量 供 方法 test() 使用 -2147483648~2147483647 数值 使用 ldc 操作，修饰的变量存放到了常量池中，共享变量从常量池获取 4. 无状态在 web 阶段学习时，设计 Servlet 时为了保证其线程安全，都会有这样的建议，不要为 Servlet 设置成员变量，这种没有任何成员变量的类是线程安全的 因为成员变量保存的数据也可以称为状态信息，因此没有成员变量就称之为【无状态】 5. 本章小结 不可变类使用 不可变类设计 * 原理方面 final 模式方面 享元 六、共享模型之工具1. 线程池1.1 自定义线程池 步骤1：自定义拒绝策略接口 1234@FunctionalInterface // 拒绝策略interface RejectPolicy&lt;T&gt; &#123; void reject(BlockingQueue&lt;T&gt; queue, T task);&#125; 步骤2：自定义任务队列 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123class BlockingQueue&lt;T&gt; &#123; // 1. 任务队列 private Deque&lt;T&gt; queue = new ArrayDeque&lt;&gt;(); // 2. 锁 private ReentrantLock lock = new ReentrantLock(); // 3. 生产者条件变量 private Condition fullWaitSet = lock.newCondition(); // 4. 消费者条件变量 private Condition emptyWaitSet = lock.newCondition(); // 5. 容量 private int capcity; public BlockingQueue(int capcity) &#123; this.capcity = capcity; &#125; // 带超时阻塞获取 public T poll(long timeout, TimeUnit unit) &#123; lock.lock(); try &#123; // 将 timeout 统一转换为 纳秒 long nanos = unit.toNanos(timeout); while (queue.isEmpty()) &#123; try &#123; // 返回值是剩余时间 if (nanos &lt;= 0) &#123; return null; &#125; nanos = emptyWaitSet.awaitNanos(nanos); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; T t = queue.removeFirst(); fullWaitSet.signal(); return t; &#125; finally &#123; lock.unlock(); &#125; &#125; // 阻塞获取 public T take() &#123; lock.lock(); try &#123; while (queue.isEmpty()) &#123; try &#123; emptyWaitSet.await(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; T t = queue.removeFirst(); fullWaitSet.signal(); return t; &#125; finally &#123; lock.unlock(); &#125; &#125; // 阻塞添加 public void put(T task) &#123; lock.lock(); try &#123; while (queue.size() == capcity) &#123; try &#123; log.debug(&quot;等待加入任务队列 &#123;&#125; ...&quot;, task); fullWaitSet.await(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;加入任务队列 &#123;&#125;&quot;, task); queue.addLast(task); emptyWaitSet.signal(); &#125; finally &#123; lock.unlock(); &#125; &#125; // 带超时时间阻塞添加 public boolean offer(T task, long timeout, TimeUnit timeUnit) &#123; lock.lock(); try &#123; long nanos = timeUnit.toNanos(timeout); while (queue.size() == capcity) &#123; try &#123; if(nanos &lt;= 0) &#123; return false; &#125; log.debug(&quot;等待加入任务队列 &#123;&#125; ...&quot;, task); nanos = fullWaitSet.awaitNanos(nanos); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; log.debug(&quot;加入任务队列 &#123;&#125;&quot;, task); queue.addLast(task); emptyWaitSet.signal(); return true; &#125; finally &#123; lock.unlock(); &#125; &#125; public int size() &#123; lock.lock(); try &#123; return queue.size(); &#125; finally &#123; lock.unlock(); &#125; &#125; public void tryPut(RejectPolicy&lt;T&gt; rejectPolicy, T task) &#123; lock.lock(); try &#123; // 判断队列是否满 if(queue.size() == capcity) &#123; rejectPolicy.reject(this, task); &#125; else &#123; // 有空闲 log.debug(&quot;加入任务队列 &#123;&#125;&quot;, task); queue.addLast(task); emptyWaitSet.signal(); &#125; &#125; finally &#123; lock.unlock(); &#125; &#125;&#125; 步骤3：自定义线程池 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869class ThreadPool &#123; // 任务队列 private BlockingQueue&lt;Runnable&gt; taskQueue; // 线程集合 private HashSet&lt;Worker&gt; workers = new HashSet&lt;&gt;(); // 核心线程数 private int coreSize; // 获取任务时的超时时间 private long timeout; private TimeUnit timeUnit; private RejectPolicy&lt;Runnable&gt; rejectPolicy; // 执行任务 public void execute(Runnable task) &#123; // 当任务数没有超过 coreSize 时，直接交给 worker 对象执行 // 如果任务数超过 coreSize 时，加入任务队列暂存 synchronized (workers) &#123; if(workers.size() &lt; coreSize) &#123; Worker worker = new Worker(task); log.debug(&quot;新增 worker&#123;&#125;, &#123;&#125;&quot;, worker, task); workers.add(worker); worker.start(); &#125; else &#123; // taskQueue.put(task); // 1) 死等 // 2) 带超时等待 // 3) 让调用者放弃任务执行 // 4) 让调用者抛出异常 // 5) 让调用者自己执行任务 taskQueue.tryPut(rejectPolicy, task); &#125; &#125; &#125; public ThreadPool(int coreSize, long timeout, TimeUnit timeUnit, int queueCapcity, RejectPolicy&lt;Runnable&gt; rejectPolicy) &#123; this.coreSize = coreSize; this.timeout = timeout; this.timeUnit = timeUnit; this.taskQueue = new BlockingQueue&lt;&gt;(queueCapcity); this.rejectPolicy = rejectPolicy; &#125; class Worker extends Thread&#123; private Runnable task; public Worker(Runnable task) &#123; this.task = task; &#125; @Override public void run() &#123; // 执行任务 // 1) 当 task 不为空，执行任务 // 2) 当 task 执行完毕，再接着从任务队列获取任务并执行 // while(task != null || (task = taskQueue.take()) != null) &#123; while(task != null || (task = taskQueue.poll(timeout, timeUnit)) != null) &#123; try &#123; log.debug(&quot;正在执行...&#123;&#125;&quot;, task); // task的run 方法跟 work 的run 是不同的，task的run 在外部 重写了 task.run(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; task = null; &#125; &#125; synchronized (workers) &#123; log.debug(&quot;worker 被移除&#123;&#125;&quot;, this); workers.remove(this); &#125; &#125; &#125;&#125; 步骤4：测试 1234567891011121314151617181920212223242526public static void main(String[] args) &#123; ThreadPool threadPool = new ThreadPool(1, 1000, TimeUnit.MILLISECONDS, 1, (queue, task)-&gt;&#123; // 1. 死等 // queue.put(task); // 2) 带超时等待 // queue.offer(task, 1500, TimeUnit.MILLISECONDS); // 3) 让调用者放弃任务执行 // log.debug(&quot;放弃&#123;&#125;&quot;, task); // 4) 让调用者抛出异常 // throw new RuntimeException(&quot;任务执行失败 &quot; + task); // 5) 让调用者自己执行任务 task.run(); &#125;); for (int i = 0; i &lt; 4; i++) &#123; int j = i; threadPool.execute(() -&gt; &#123; try &#123; Thread.sleep(1000L); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; log.debug(&quot;&#123;&#125;&quot;, j); &#125;); &#125;&#125; 1.2 ThreadPoolExecutor (1) 线程池状态ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量 状态名 高 3 位 接收新任 务 处理阻塞队列任 务 说明 RUNNING 111 Y Y SHUTDOWN 000 N Y 不会接收新任务，但会处理阻塞队列剩余 任务 STOP 001 N N 会中断正在执行的任务，并抛弃阻塞队列 任务 TIDYING 010 - - 任务全执行完毕，活动线程为 0 即将进入 终结 TERMINATED 011 - - 终结状态 从数字上比较，TERMINATED &gt; TIDYING &gt; STOP &gt; SHUTDOWN &gt; RUNNING 这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值 1234// c 为旧值， ctlOf 返回结果为新值ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c))));// rs 为高 3 位代表线程池状态， wc 为低 29 位代表线程个数，ctl 是合并它们private static int ctlOf(int rs, int wc) &#123; return rs | wc; &#125; (2) 构造方法1234567public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) corePoolSize 核心线程数目 (最多保留的线程数) maximumPoolSize 最大线程数目 keepAliveTime 生存时间 - 针对救急线程 unit 时间单位 - 针对救急线程 workQueue 阻塞队列 threadFactory 线程工厂 - 可以为线程创建时起个好名字 handler 拒绝策略 工作方式： 123456789101112131415161718192021graph LRsubgraph 阻塞队列size=2t3(任务3)t4(任务4)endsubgraph 线程池c=2,m=3ct1(核心线程1)ct2(核心线程2)mt1(救急线程)ct1 --&gt; t1(任务1)ct2 --&gt; t2(任务2)endstyle ct1 fill:#ccf,stroke:#f66,stroke-width:2pxstyle ct2 fill:#ccf,stroke:#f66,stroke-width:2pxstyle mt1 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5.5 线程池中刚开始没有线程，当一个任务提交给线程池后，线程池会创建一个新线程来执行任务。 当线程数达到 corePoolSize 并没有线程空闲，这时再加入任务，新加的任务会被加入workQueue 队列排队，直到有空闲的线程。 如果队列选择了有界队列，那么任务超过了队列大小时，会创建 maximumPoolSize - corePoolSize 数目的线程来救急。 如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。拒绝策略 jdk 提供了 4 种实现，其它著名框架也提供了实现 AbortPolicy 让调用者抛出 RejectedExecutionException 异常，这是默认策略 CallerRunsPolicy 让调用者运行任务 DiscardPolicy 放弃本次任务 DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之 Dubbo 的实现，在抛出 RejectedExecutionException 异常之前会记录日志，并 dump 线程栈信息，方便定位问题 Netty 的实现，是创建一个新线程来执行任务 ActiveMQ 的实现，带超时等待（60s）尝试放入队列，类似我们之前自定义的拒绝策略 PinPoint 的实现，它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略 当高峰过去后，超过corePoolSize 的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间由 keepAliveTime 和 unit 来控制。 根据这个构造方法，JDK Executors 类中提供了众多工厂方法来创建各种用途的线程池 (3) newFixedThreadPool12345public static ExecutorService newFixedThreadPool(int nThreads) &#123; return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());&#125; 特点 核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间 阻塞队列是无界的，可以放任意数量的任务 评价 适用于任务量已知，相对耗时的任务 (4) newCachedThreadPool12345public static ExecutorService newCachedThreadPool() &#123; return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());&#125; 特点 核心线程数是 0， 最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，意味着 全部都是救急线程（60s 后可以回收） 救急线程可以无限创建 队列采用了 SynchronousQueue 实现特点是，它没有容量，没有线程来取是放不进去的（一手交钱、一手交货） 12345678910111213141516171819202122232425262728293031SynchronousQueue&lt;Integer&gt; integers = new SynchronousQueue&lt;&gt;();new Thread(() -&gt; &#123; try &#123; log.debug(&quot;putting &#123;&#125; &quot;, 1); integers.put(1); log.debug(&quot;&#123;&#125; putted...&quot;, 1); log.debug(&quot;putting...&#123;&#125; &quot;, 2); integers.put(2); log.debug(&quot;&#123;&#125; putted...&quot;, 2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125;,&quot;t1&quot;).start();sleep(1);new Thread(() -&gt; &#123; try &#123; log.debug(&quot;taking &#123;&#125;&quot;, 1); integers.take(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125;,&quot;t2&quot;).start();sleep(1);new Thread(() -&gt; &#123; try &#123; log.debug(&quot;taking &#123;&#125;&quot;, 2); integers.take(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125;,&quot;t3&quot;).start(); 输出 12345611:48:15.500 c.TestSynchronousQueue [t1] - putting 111:48:16.500 c.TestSynchronousQueue [t2] - taking 111:48:16.500 c.TestSynchronousQueue [t1] - 1 putted...11:48:16.500 c.TestSynchronousQueue [t1] - putting...211:48:17.502 c.TestSynchronousQueue [t3] - taking 211:48:17.503 c.TestSynchronousQueue [t1] - 2 putted... 评价 整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线程。 适合任务数比较密集，但每个任务执行时间较短的情况 (5) newSingleThreadExecutor123456public static ExecutorService newSingleThreadExecutor() &#123; return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()));&#125; 使用场景： 希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程也不会被释放。 区别： 自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会新建一个线程，保证池的正常工作 Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改 FinalizableDelegatedExecutorService 应用的是装饰器模式（FinalizableDelegatedExecutorService 是具体装饰角色，DelegatedExecutorService 是抽象装饰角色，ExecutorService 是抽象构件角色），只对外暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法 Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改 对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改 (6) 提交任务123456789101112131415161718// 执行任务void execute(Runnable command);// 提交任务 task，用返回值 Future 获得任务执行结果&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);// 提交 tasks 中所有任务&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException;// 提交 tasks 中所有任务，带超时时间&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit) throws InterruptedException;// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException, ExecutionException;// 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; execute和submit的区别 execute只能提交Runnable类型的任务，无返回值。submit既可以提交Runnable类型的任务，也可以提交Callable类型的任务，会有一个类型为Future的返回值，但当任务类型为Runnable时，返回值为null。 execute在执行任务时，如果遇到异常会直接抛出，而submit不会直接抛出，只有在使用Future的get方法获取返回值时，才会抛出异常。 submit 执行后会立即返回一个结果，其他线程可以将返回的对象调用其方法get() 获取将来的结果，会阻塞等待（任务未执行完成）。 (7) 关闭线程池shutdown 1234567/*线程池状态变为 SHUTDOWN- 不会接收新任务- 但已提交任务会执行完- 此方法不会阻塞调用线程的执行*/void shutdown(); 12345678910111213141516public void shutdown() &#123; final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try &#123; checkShutdownAccess(); // 修改线程池状态 advanceRunState(SHUTDOWN); // 仅会打断空闲线程 interruptIdleWorkers(); onShutdown(); // 扩展点 ScheduledThreadPoolExecutor &#125; finally &#123; mainLock.unlock(); &#125; // 尝试终结(没有运行的线程可以立刻终结，如果还有运行的线程也不会等) tryTerminate();&#125; shutdownNow 1234567/*线程池状态变为 STOP- 不会接收新任务- 会将队列中的任务返回- 并用 interrupt 的方式中断正在执行的任务*/List&lt;Runnable&gt; shutdownNow(); 12345678910111213141516171819public List&lt;Runnable&gt; shutdownNow() &#123; List&lt;Runnable&gt; tasks; final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try &#123; checkShutdownAccess(); // 修改线程池状态 advanceRunState(STOP); // 打断所有线程 interruptWorkers(); // 获取队列中剩余任务 tasks = drainQueue(); &#125; finally &#123; mainLock.unlock(); &#125; // 尝试终结 tryTerminate(); return tasks;&#125; 其它方法 1234567// 不在 RUNNING 状态的线程池，此方法就返回 trueboolean isShutdown();// 线程池状态是否是 TERMINATEDboolean isTerminated();// 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待 boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException; * 异步模式之工作线程定义让有限的工作线程（Worker Thread）来轮流异步处理无限多的任务。也可以将其归类为分工模式，它的典型实现就是线程池，也体现了经典设计模式中的享元模式。 例如，海底捞的服务员（线程），轮流处理每位客人的点餐（任务），如果为每位客人都配一名专属的服务员，那么成本就太高了（对比另一种多线程设计模式：Thread-Per-Message） 注意，不同任务类型应该使用不同的线程池，这样能够避免饥饿，并能提升效率 例如，如果一个餐馆的工人既要招呼客人（任务类型A），又要到后厨做菜（任务类型B）显然效率不咋地，分成服务员（线程池A）与厨师（线程池B）更为合理，当然你能想到更细致的分工 饥饿固定大小线程池会有饥饿现象 两个工人是同一个线程池中的两个线程 他们要做的事情是：为客人点餐和到后厨做菜，这是两个阶段的工作 客人点餐：必须先点完餐，等菜做好，上菜，在此期间处理点餐的工人必须等待 后厨做菜：没啥说的，做就是了 比如工人A 处理了点餐任务，接下来它要等着 工人B 把菜做好，然后上菜，他俩也配合的蛮好 但现在同时来了两个客人，这个时候工人A 和工人B 都去处理点餐了，这时没人做饭了，饥饿 123456789101112131415161718192021222324252627282930313233343536public class TestDeadLock &#123; static final List&lt;String&gt; MENU = Arrays.asList(&quot;地三鲜&quot;, &quot;宫保鸡丁&quot;, &quot;辣子鸡丁&quot;, &quot;烤鸡翅&quot;); static Random RANDOM = new Random(); static String cooking() &#123; return MENU.get(RANDOM.nextInt(MENU.size())); &#125; public static void main(String[] args) &#123; ExecutorService executorService = Executors.newFixedThreadPool(2); executorService.execute(() -&gt; &#123; log.debug(&quot;处理点餐...&quot;); Future&lt;String&gt; f = executorService.submit(() -&gt; &#123; log.debug(&quot;做菜&quot;); return cooking(); &#125;); try &#123; log.debug(&quot;上菜: &#123;&#125;&quot;, f.get()); &#125; catch (InterruptedException | ExecutionException e) &#123; e.printStackTrace(); &#125; &#125;); /* executorService.execute(() -&gt; &#123; log.debug(&quot;处理点餐...&quot;); Future&lt;String&gt; f = executorService.submit(() -&gt; &#123; log.debug(&quot;做菜&quot;); return cooking(); &#125;); try &#123; log.debug(&quot;上菜: &#123;&#125;&quot;, f.get()); &#125; catch (InterruptedException | ExecutionException e) &#123; e.printStackTrace(); &#125; &#125;); */ &#125;&#125; 输出 12317:21:27.883 c.TestDeadLock [pool-1-thread-1] - 处理点餐...17:21:27.891 c.TestDeadLock [pool-1-thread-2] - 做菜17:21:27.891 c.TestDeadLock [pool-1-thread-1] - 上菜: 烤鸡翅 当注释取消后，可能的输出 1217:08:41.339 c.TestDeadLock [pool-1-thread-2] - 处理点餐...17:08:41.339 c.TestDeadLock [pool-1-thread-1] - 处理点餐... 解决方法可以增加线程池的大小，不过不是根本解决方案，还是前面提到的，不同的任务类型，采用不同的线程池，例如： 1234567891011121314151617181920212223242526272829303132333435public class TestDeadLock &#123; static final List&lt;String&gt; MENU = Arrays.asList(&quot;地三鲜&quot;, &quot;宫保鸡丁&quot;, &quot;辣子鸡丁&quot;, &quot;烤鸡翅&quot;); static Random RANDOM = new Random(); static String cooking() &#123; return MENU.get(RANDOM.nextInt(MENU.size())); &#125; public static void main(String[] args) &#123; ExecutorService waiterPool = Executors.newFixedThreadPool(1); ExecutorService cookPool = Executors.newFixedThreadPool(1); waiterPool.execute(() -&gt; &#123; log.debug(&quot;处理点餐...&quot;); Future&lt;String&gt; f = cookPool.submit(() -&gt; &#123; log.debug(&quot;做菜&quot;); return cooking(); &#125;); try &#123; log.debug(&quot;上菜: &#123;&#125;&quot;, f.get()); &#125; catch (InterruptedException | ExecutionException e) &#123; e.printStackTrace(); &#125; &#125;); waiterPool.execute(() -&gt; &#123; log.debug(&quot;处理点餐...&quot;); Future&lt;String&gt; f = cookPool.submit(() -&gt; &#123; log.debug(&quot;做菜&quot;); return cooking(); &#125;); try &#123; log.debug(&quot;上菜: &#123;&#125;&quot;, f.get()); &#125; catch (InterruptedException | ExecutionException e) &#123; e.printStackTrace(); &#125; &#125;); &#125;&#125; 输出 12345617:25:14.626 c.TestDeadLock [pool-1-thread-1] - 处理点餐...17:25:14.630 c.TestDeadLock [pool-2-thread-1] - 做菜17:25:14.631 c.TestDeadLock [pool-1-thread-1] - 上菜: 地三鲜17:25:14.632 c.TestDeadLock [pool-1-thread-1] - 处理点餐...17:25:14.632 c.TestDeadLock [pool-2-thread-1] - 做菜17:25:14.632 c.TestDeadLock [pool-1-thread-1] - 上菜: 辣子鸡丁 创建多少线程池合适 过小会导致程序不能充分地利用系统资源、容易导致饥饿 过大会导致更多的线程上下文切换，占用更多内存 CPU 密集型运算通常采用 cpu 核数 + 1 能够实现最优的 CPU 利用率，+1 是保证当线程由于页缺失故障（操作系统）或其它原因导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费 I/O 密集型运算CPU 不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用 CPU 资源，但当你执行 I/O 操作时、远程RPC 调用时，包括进行数据库操作时，这时候 CPU 就闲下来了，你可以利用多线程提高它的利用率。 经验公式如下 线程数 = 核数 * 期望 CPU 利用率 * 总时间(CPU计算时间+等待时间) / CPU 计算时间 例如 4 核 CPU 计算时间是 50% ，其它等待时间是 50%，期望 cpu 被 100% 利用，套用公式 4 * 100% * 100% / 50% = 8 例如 4 核 CPU 计算时间是 10% ，其它等待时间是 90%，期望 cpu 被 100% 利用，套用公式 4 * 100% * 100% / 10% = 40 自定义线程池(8) 任务调度线程池在『任务调度线程池』功能加入之前，可以使用 java.util.Timer 来实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务。 1234567891011121314151617181920public static void main(String[] args) &#123; Timer timer = new Timer(); TimerTask task1 = new TimerTask() &#123; @Override public void run() &#123; log.debug(&quot;task 1&quot;); sleep(2); &#125; &#125;; TimerTask task2 = new TimerTask() &#123; @Override public void run() &#123; log.debug(&quot;task 2&quot;); &#125; &#125;; // 使用 timer 添加两个任务，希望它们都在 1s 后执行 // 但由于 timer 内只有一个线程来顺序执行队列中的任务，因此『任务1』的延时，影响了『任务2』的执行 timer.schedule(task1, 1000); timer.schedule(task2, 1000);&#125; 输出 1230:46:09.444 c.TestTimer [main] - start...20:46:10.447 c.TestTimer [Timer-0] - task 120:46:12.448 c.TestTimer [Timer-0] - task 2 使用 ScheduledExecutorService 改写： 123456789ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);// 添加两个任务，希望它们都在 1s 后执行executor.schedule(() -&gt; &#123; System.out.println(&quot;任务1，执行时间：&quot; + new Date()); try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; &#125;&#125;, 1000, TimeUnit.MILLISECONDS);executor.schedule(() -&gt; &#123; System.out.println(&quot;任务2，执行时间：&quot; + new Date());&#125;, 1000, TimeUnit.MILLISECONDS); 输出 12任务1，执行时间：Thu Jan 03 12:45:17 CST 2019任务2，执行时间：Thu Jan 03 12:45:17 CST 2019 scheduleAtFixedRate 例子： 12345ScheduledExecutorService pool = Executors.newScheduledThreadPool(1);log.debug(&quot;start...&quot;);pool.scheduleAtFixedRate(() -&gt; &#123; log.debug(&quot;running...&quot;);&#125;, 1, 1, TimeUnit.SECONDS); 输出 1234521:45:43.167 c.TestTimer [main] - start...21:45:44.215 c.TestTimer [pool-1-thread-1] - running...21:45:45.215 c.TestTimer [pool-1-thread-1] - running...21:45:46.215 c.TestTimer [pool-1-thread-1] - running...21:45:47.215 c.TestTimer [pool-1-thread-1] - running... scheduleAtFixedRate 例子（任务执行时间超过了间隔时间）： 123456ScheduledExecutorService pool = Executors.newScheduledThreadPool(1);log.debug(&quot;start...&quot;);pool.scheduleAtFixedRate(() -&gt; &#123; log.debug(&quot;running...&quot;); sleep(2);&#125;, 1, 1, TimeUnit.SECONDS); 输出分析：一开始，延时 1s，接下来，由于任务执行时间 &gt; 间隔时间，间隔被『撑』到了 2s 1234521:44:30.311 c.TestTimer [main] - start...21:44:31.360 c.TestTimer [pool-1-thread-1] - running...21:44:33.361 c.TestTimer [pool-1-thread-1] - running...21:44:35.362 c.TestTimer [pool-1-thread-1] - running...21:44:37.362 c.TestTimer [pool-1-thread-1] - running... scheduleWithFixedDelay 例子： 123456ScheduledExecutorService pool = Executors.newScheduledThreadPool(1);log.debug(&quot;start...&quot;);pool.scheduleWithFixedDelay(()-&gt; &#123; log.debug(&quot;running...&quot;); sleep(2);&#125;, 1, 1, TimeUnit.SECONDS); 输出分析：一开始，延时 1s，scheduleWithFixedDelay 的间隔是 上一个任务结束 &lt;-&gt; 延时 &lt;-&gt; 下一个任务开始 所以间隔都是 3s 1234521:40:55.078 c.TestTimer [main] - start...21:40:56.140 c.TestTimer [pool-1-thread-1] - running...21:40:59.143 c.TestTimer [pool-1-thread-1] - running...21:41:02.145 c.TestTimer [pool-1-thread-1] - running...21:41:05.147 c.TestTimer [pool-1-thread-1] - running... 评价 整个线程池表现为：线程数固定，任务数多于线程数时，会放入无界队列排队。任务执行完毕，这些线程也不会被释放。用来执行延迟或反复执行的任务 (9) 正确处理执行任务异常方法1：主动捉异常 123456789ExecutorService pool = Executors.newFixedThreadPool(1);pool.submit(() -&gt; &#123; try &#123; log.debug(&quot;task1&quot;); int i = 1 / 0; &#125; catch (Exception e) &#123; log.error(&quot;error:&quot;, e); &#125;&#125;); 输出 12345678921:59:04.558 c.TestTimer [pool-1-thread-1] - task121:59:04.562 c.TestTimer [pool-1-thread-1] - error:java.lang.ArithmeticException: / by zero at cn.itcast.n8.TestTimer.lambda$main$0(TestTimer.java:28) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) 方法2：使用 Future 1234567ExecutorService pool = Executors.newFixedThreadPool(1);Future&lt;Boolean&gt; f = pool.submit(() -&gt; &#123; log.debug(&quot;task1&quot;); int i = 1 / 0; return true;&#125;);log.debug(&quot;result:&#123;&#125;&quot;, f.get()); 输出 12345678910111221:54:58.208 c.TestTimer [pool-1-thread-1] - task1Exception in thread &quot;main&quot; java.util.concurrent.ExecutionException:java.lang.ArithmeticException: / by zero at java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.util.concurrent.FutureTask.get(FutureTask.java:192) at cn.itcast.n8.TestTimer.main(TestTimer.java:31)Caused by: java.lang.ArithmeticException: / by zero at cn.itcast.n8.TestTimer.lambda$main$0(TestTimer.java:28) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) * 应用之定时任务定期执行如何让每周四 18:00:00 定时执行任务？ 123456789101112131415161718// 获得当前时间LocalDateTime now = LocalDateTime.now();// 获取本周四 18:00:00.000LocalDateTime thursday = now.with(DayOfWeek.THURSDAY).withHour(18).withMinute(0).withSecond(0).withNano(0);// 如果当前时间已经超过 本周四 18:00:00.000， 那么找下周四 18:00:00.000if(now.compareTo(thursday) &gt;= 0) &#123; thursday = thursday.plusWeeks(1);&#125;// 计算时间差，即延时执行时间long initialDelay = Duration.between(now, thursday).toMillis();// 计算间隔时间，即 1 周的毫秒值long oneWeek = 7 * 24 * 3600 * 1000;ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);System.out.println(&quot;开始时间：&quot; + new Date());executor.scheduleAtFixedRate(() -&gt; &#123; System.out.println(&quot;执行时间：&quot; + new Date());&#125;, initialDelay, oneWeek, TimeUnit.MILLISECONDS); (10) tomcat 线程池Tomcat 在哪里用到了线程池呢 LimitLatch 用来限流，可以控制最大连接个数，类似 J.U.C 中的 Semaphore 后面再讲 Acceptor 只负责【接收新的 socket 连接】 Poller 只负责监听 socket channel 是否有【可读的 I/O 事件】 一旦可读，封装一个任务对象（socketProcessor），提交给 Executor 线程池处理 Executor 线程池中的工作线程最终负责【处理请求】 Tomcat 线程池扩展了 ThreadPoolExecutor，行为稍有不同 如果总线程数达到 maximumPoolSize 这时不会立刻抛 RejectedExecutionException 异常 而是再次尝试将任务放入队列，如果还失败，才抛出 RejectedExecutionException 异常 源码 tomcat-7.0.42 1234567891011121314151617181920212223public void execute(Runnable command, long timeout, TimeUnit unit) &#123; submittedCount.incrementAndGet(); try &#123; super.execute(command); &#125; catch (RejectedExecutionException rx) &#123; if (super.getQueue() instanceof TaskQueue) &#123; final TaskQueue queue = (TaskQueue)super.getQueue(); try &#123; if (!queue.force(command, timeout, unit)) &#123; submittedCount.decrementAndGet(); throw new RejectedExecutionException(&quot;Queue capacity is full.&quot;); &#125; &#125; catch (InterruptedException x) &#123; submittedCount.decrementAndGet(); Thread.interrupted(); throw new RejectedExecutionException(x); &#125; &#125; else &#123; submittedCount.decrementAndGet(); throw rx; &#125; &#125;&#125; TaskQueue.java 1234567public boolean force(Runnable o, long timeout, TimeUnit unit) throws InterruptedException &#123; if ( parent.isShutdown() ) throw new RejectedExecutionException( &quot;Executor not running, can&#x27;t force a command into the queue&quot; ); return super.offer(o,timeout,unit); //forces the item onto the queue, to be used if the task is rejected&#125; Connector 配置 配置项 默认值 说明 acceptorThreadCount 1 acceptor 线程数量 pollerThreadCount 1 poller 线程数量 minSpareThreads 10 核心线程数，即 corePoolSize maxThreads 200 最大线程数，即 maximumPoolSize executor - Executor 名称，用来引用下面的 Executor Executor 线程配置 配置项 默认值 说明 threadPriority 5 线程优先级 daemon true 是否守护线程 minSpareThreads 25 核心线程数，即 corePoolSize maxThreads 200 最大线程数，即 maximumPoolSize maxIdleTime 60000 线程生存时间，单位是毫秒，默认值即 1 分钟 maxQueueSize Integer.MAX_VALUE 队列长度 prestartminSpareThreads false 核心线程是否在服务器启动时启动 123456graph LRa(添加新任务) --&gt; b(提交任务 &lt; 核心线程)b --&gt;|是| c(加入队列)b --&gt; |否| d(提交任务 &lt; 最大线程)d --&gt; |是| e(创建急救线程)d --&gt; |否| c 1.3 Fork/Join(1) 概念Fork/Join 是 JDK 1.7 加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的 cpu 密集型运算 所谓的任务拆分，是将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列、都可以用分治思想进行求解 Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升了运算效率 Fork/Join 默认会创建与 cpu 核心数大小相同的线程池 (2) 使用提交给 Fork/Join 线程池的任务需要继承 RecursiveTask（有返回值）或 RecursiveAction（没有返回值），例如下面定义了一个对 1~n 之间的整数求和的任务 123456789101112131415161718192021222324252627@Slf4j(topic = &quot;c.AddTask&quot;)class AddTask1 extends RecursiveTask&lt;Integer&gt; &#123; int n; public AddTask1(int n) &#123; this.n = n; &#125; @Override public String toString() &#123; return &quot;&#123;&quot; + n + &#x27;&#125;&#x27;; &#125; @Override protected Integer compute() &#123; // 如果 n 已经为 1，可以求得结果了 if (n == 1) &#123; log.debug(&quot;join() &#123;&#125;&quot;, n); return n; &#125; // 将任务进行拆分(fork) AddTask1 t1 = new AddTask1(n - 1); t1.fork(); log.debug(&quot;fork() &#123;&#125; + &#123;&#125;&quot;, n, t1); // 合并(join)结果 int result = n + t1.join(); log.debug(&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;, n, t1, result); return result; &#125;&#125; 然后提交给 ForkJoinPool 来执行 1234public static void main(String[] args) &#123; ForkJoinPool pool = new ForkJoinPool(4); System.out.println(pool.invoke(new AddTask1(5)));&#125; 结果 12345678910[ForkJoinPool-1-worker-0] - fork() 2 + &#123;1&#125;[ForkJoinPool-1-worker-1] - fork() 5 + &#123;4&#125;[ForkJoinPool-1-worker-0] - join() 1[ForkJoinPool-1-worker-0] - join() 2 + &#123;1&#125; = 3[ForkJoinPool-1-worker-2] - fork() 4 + &#123;3&#125;[ForkJoinPool-1-worker-3] - fork() 3 + &#123;2&#125;[ForkJoinPool-1-worker-3] - join() 3 + &#123;2&#125; = 6[ForkJoinPool-1-worker-2] - join() 4 + &#123;3&#125; = 10[ForkJoinPool-1-worker-1] - join() 5 + &#123;4&#125; = 1515 用图来表示 123456789101112131415graph LRt1(&quot;t1 5 + &#123;4&#125;&quot;)t2(&quot;t2 4 + &#123;3&#125;&quot;)t3(&quot;t3 3 + &#123;2&#125;&quot;)t00(&quot;t0 2 + &#123;1&#125;&quot;)t0(&quot;t0&quot;)t00 -- &quot;&#123;1&#125;&quot; --&gt; t0t0 -. &quot;1&quot; .-&gt; t00t3 -. &quot;&#123;2&#125;&quot; .-&gt; t00t00 -. &quot;3&quot; .-&gt; t3t2 -- &quot;&#123;3&#125;&quot; --&gt; t3t3 -. &quot;6&quot; .-&gt; t2t1 -- &quot;&#123;4&#125;&quot; --&gt; t2t2 -. &quot;10&quot; .-&gt; t1 改进 1234567891011121314151617181920212223242526272829303132333435class AddTask3 extends RecursiveTask&lt;Integer&gt; &#123; int begin; int end; public AddTask3(int begin, int end) &#123; this.begin = begin; this.end = end; &#125; @Override public String toString() &#123; return &quot;&#123;&quot; + begin + &quot;,&quot; + end + &#x27;&#125;&#x27;; &#125; @Override protected Integer compute() &#123; // 5, 5 if (begin == end) &#123; log.debug(&quot;join() &#123;&#125;&quot;, begin); return begin; &#125; // 4, 5 if (end - begin == 1) &#123; log.debug(&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;, begin, end, end + begin); return end + begin; &#125; // 1 5 int mid = (end + begin) / 2; // 3 AddTask3 t1 = new AddTask3(begin, mid); // 1,3 t1.fork(); AddTask3 t2 = new AddTask3(mid + 1, end); // 4,5 t2.fork(); log.debug(&quot;fork() &#123;&#125; + &#123;&#125; = ?&quot;, t1, t2); int result = t1.join() + t2.join(); log.debug(&quot;join() &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;, t1, t2, result); return result; &#125;&#125; 然后提交给 ForkJoinPool 来执行 1234public static void main(String[] args) &#123; ForkJoinPool pool = new ForkJoinPool(4); System.out.println(pool.invoke(new AddTask3(1, 10)));&#125; 结果 12345678[ForkJoinPool-1-worker-0] - join() 1 + 2 = 3[ForkJoinPool-1-worker-3] - join() 4 + 5 = 9[ForkJoinPool-1-worker-0] - join() 3[ForkJoinPool-1-worker-1] - fork() &#123;1,3&#125; + &#123;4,5&#125; = ?[ForkJoinPool-1-worker-2] - fork() &#123;1,2&#125; + &#123;3,3&#125; = ?[ForkJoinPool-1-worker-2] - join() &#123;1,2&#125; + &#123;3,3&#125; = 6[ForkJoinPool-1-worker-1] - join() &#123;1,3&#125; + &#123;4,5&#125; = 1515 用图来表示 12345678910111213141516graph LRt1(&quot;t1 &#123;1,3&#125; + &#123;4,5&#125;&quot;)t2(&quot;t2 &#123;1,2&#125;,&#123;3,3&#125;&quot;)t3(&quot;t3&quot;)t0(&quot;t0&quot;)t1 -- &quot;&#123;1,3&#125;&quot; --&gt; t2t1 -- &quot;&#123;4,5&#125;&quot; --&gt; t3t2 -- &quot;&#123;1,2&#125;&quot; --&gt; t0t2 -- &quot;&#123;3,3&#125;&quot; --&gt; t0t0 -. &quot;3&quot;.-&gt; t2t0 -. &quot;3&quot; .-&gt; t2t2 -. &quot;6&quot; .- t1t3 -. &quot;9&quot; .-&gt; t1t1 -. 15 .-&gt; 结果 2. J.U.C2.1 AQS 原理概述全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架 特点： 用 state 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁 getState - 获取 state 状态 setState - 设置 state 状态 compareAndSetState - cas 机制设置 state 状态 独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源 提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList 条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet 子类主要实现这样一些方法（默认抛出 UnsupportedOperationException） tryAcquire tryRelease tryAcquireShared tryReleaseShared isHeldExclusively 获取锁的姿势 1234// 如果获取锁失败if (!tryAcquire(arg)) &#123; // 入队, 可以选择阻塞当前线程 park unpark&#125; 释放锁的姿势 1234// 如果释放锁成功if (tryRelease(arg)) &#123; // 让阻塞线程恢复运行&#125; 实现不可重入锁自定义同步器12345678910111213141516171819202122232425262728293031final class MySync extends AbstractQueuedSynchronizer &#123; @Override protected boolean tryAcquire(int acquires) &#123; if (acquires == 1)&#123; if (compareAndSetState(0, 1)) &#123; setExclusiveOwnerThread(Thread.currentThread()); return true; &#125; &#125; return false; &#125; @Override protected boolean tryRelease(int acquires) &#123; if(acquires == 1) &#123; if(getState() == 0) &#123; throw new IllegalMonitorStateException(); &#125; setExclusiveOwnerThread(null); setState(0); return true; &#125; return false; &#125; protected Condition newCondition() &#123; return new ConditionObject(); &#125; @Override protected boolean isHeldExclusively() &#123; return getState() == 1; &#125;&#125; 自定义锁有了自定义同步器，很容易复用 AQS ，实现一个功能完备的自定义锁 123456789101112131415161718192021222324252627282930313233class MyLock implements Lock &#123; static MySync sync = new MySync(); @Override // 尝试，不成功，进入等待队列 public void lock() &#123; sync.acquire(1); &#125; @Override // 尝试，不成功，进入等待队列，可打断 public void lockInterruptibly() throws InterruptedException &#123; sync.acquireInterruptibly(1); &#125; @Override // 尝试一次，不成功返回，不进入队列 public boolean tryLock() &#123; return sync.tryAcquire(1); &#125; @Override // 尝试，不成功，进入等待队列，有时限 public boolean tryLock(long time, TimeUnit unit) throws InterruptedException &#123; return sync.tryAcquireNanos(1, unit.toNanos(time)); &#125; @Override // 释放锁 public void unlock() &#123; sync.release(1); &#125; @Override // 生成条件变量 public Condition newCondition() &#123; return sync.newCondition(); &#125;&#125; 测试一下 1234567891011121314151617181920MyLock lock = new MyLock();new Thread(() -&gt; &#123; lock.lock(); try &#123; log.debug(&quot;locking...&quot;); sleep(1); &#125; finally &#123; log.debug(&quot;unlocking...&quot;); lock.unlock(); &#125;&#125;,&quot;t1&quot;).start();new Thread(() -&gt; &#123; lock.lock(); try &#123; log.debug(&quot;locking...&quot;); &#125; finally &#123; log.debug(&quot;unlocking...&quot;); lock.unlock(); &#125;&#125;,&quot;t2&quot;).start(); 输出 123422:29:28.727 c.TestAqs [t1] - locking...22:29:29.732 c.TestAqs [t1] - unlocking...22:29:29.732 c.TestAqs [t2] - locking...22:29:29.732 c.TestAqs [t2] - unlocking... 不可重入测试 如果改为下面代码，会发现自己也会被挡住（只会打印一次 locking） 1234lock.lock();log.debug(&quot;locking...&quot;);lock.lock();log.debug(&quot;locking...&quot;) 心得起源早期程序员会自己通过一种同步器去实现另一种相近的同步器，例如用可重入锁去实现信号量，或反之。这显然不够优雅，于是在 JSR166（java 规范提案）中创建了 AQS，提供了这种通用的同步器机制。 目标AQS 要实现的功能目标 阻塞版本获取锁 acquire 和非阻塞的版本尝试获取锁 tryAcquire 获取锁超时机制 通过打断取消机制 独占机制及共享机制 条件不满足时的等待机制 要实现的性能目标 Instead, the primary performance goal here is scalability: to predictably maintain efficiency even, or especially, when synchronizers are contended. 设计AQS 的基本思想其实很简单 获取锁的逻辑 123456while(state 状态不允许获取) &#123; if(队列中还没有此进程) &#123; 入队并阻塞 &#125;&#125;当前线程出队 释放锁的逻辑 123if(state 状态允许了) &#123; 恢复阻塞的线程(s)&#125; 要点 原子维护 state 状态 阻塞及恢复线程 维护队列 1) state设计 tate 使用 volatile 配合 cas 保证其修改时的原子性 state 使用了 32bit int 来维护同步状态，因为当时使用 long 在很多平台下测试的结果并不理想 2) 阻塞恢复设计 早期的控制线程暂停和恢复的 api 有 suspend 和 resume，但它们是不可用的，因为如果先调用的 resume那么 suspend 将感知不到 解决方法是使用 park &amp; unpark 来实现线程的暂停和恢复，具体原理在之前讲过了，先 unpark再park 也没问题 park &amp; unpark 是针对线程的，而不是针对同步器的，因此控制粒度更为精细 park 线程还可以通过 interrupt 打断 3) 队列设计 用了 FIFO 先入先出队列，并不支持优先级队列 设计时借鉴了 CLH 队列，它是一种单向无锁队列 1234567891011121314graph LRsubgraph 初始head1(head) --&gt; Dumy1(Dumy)tail1(tail) --&gt; Dumy1endsubgraph 新节点head2(head) --&gt; Dumy2(Dumy)tail2(tail) --&gt; NodeNode -- &quot;prev&quot; --&gt; Dumy2endstyle Dumy1 fill:#f9f,stroke:#333,stroke-width:2pxstyle Dumy2 fill:#f9f,stroke:#333,stroke-width:2px 队列中有 head 和 tail 两个指针节点，都用 volatile 修饰配合 cas 使用，每个节点有 state 维护节点状态入队伪代码，只需要考虑 tail 赋值的原子性 12345do &#123; // 原来的 tail Node prev = tail; // 用 cas 在原来 tail 的基础上改为 node&#125; while(tail.compareAndSet(prev,node)) 出队伪代码 123456// prev 是上一个节点while (Node prev=node.prev).state != 唤醒状态) &#123; &#125;// 设置头结点head = node; CLH好处： 无锁，使用自旋 快速，无阻塞 AQS 在一些方面改进了CLH 1234567891011121314151617181920private Node enq(final Node node) &#123; for (;;) &#123; Node t = tail; // 队列中还没有元素 tail 为 null if (t == null) &#123; // 将 head 从 null -&gt; dummy if (compareAndSetHead(new Node())) tail = head; &#125; else &#123; // 将 node 的 prev 设置为原来的 tail node.prev = t; // 将 tail 从原来的 tail 设置为 node if (compareAndSetTail(t, node)) &#123; // 原来 tail 的 next 设置为 node t.next = node; return t; &#125; &#125; &#125;&#125; 主要用到ASQ 的并发工具类 2.2 RenntrantLock 原理 非公平锁实现原理加锁解锁流程先从构造器开始看，默认为非公平锁实现 123public ReentrantLock() &#123; sync = new NonFairSync();&#125; NonfairSync继承自ASQ 没有竞争时 第出现时一个竞争 Thread-1 执行了 (1) CAS 尝试将 state 由 0 改为 1，结果失败 (2)进入 tryAcquire 逻辑，这时 state 已经是1，结果仍然失败 (3) 接下来进入 addWaiter 逻辑，构造 Node 队列 图中黄色三角表示该 Node 的 waitStatus 状态，其中 0 为默认正常状态 Node 的创建是懒惰的 其中第一个 Node 称为 Dummy（哑元）或哨兵，用来占位，并不关联线程 当前线程进入 acquireQueued 逻辑 (1) acquireQueued 会在一个死循环中不断尝试获得锁，失败后进入 park 阻塞(2) 如果自己是紧邻着 head（排第二位），那么再次 tryAcquire 尝试获取锁，当然这时 state 仍为1，失败(3) 进入 shouldParkAfterFailedAcquire 逻辑，将前驱 node，即 head 的 waitStatus 改为 -1，这次返回 false (4) shouldParkAfterFailedAcquire 执行完毕回到 acquireQueued ，再次 tryAcquire 尝试获取锁，当然这时state 仍为 1，失败(5) 当再次进入 shouldParkAfterFailedAcquire 时，这时因为其前驱 node 的 waitStatus 已经是 -1，这次返回true(6) 进入 parkAndCheckInterrupt， Thread-1 park（灰色表示） 再次有多个线程经历上述过程竞争失败，变成这个样子 Thread-0 释放锁，进入 tryRelease 流程，如果成功 设置 exclusiveOwnerThread 为 null state = 0 当前队列不为 null，并且 head 的 waitStatus = -1，进入 unparkSuccessor 流程 找到队列中离 head 最近的一个 Node（没取消的），unpark 恢复其运行，本例中即为 Thread-1回到 Thread-1 的 acquireQueued 流程 如果加锁成功（没有竞争），会设置 exclusiveOwnerThread 为 Thread-1，state = 1 head 指向刚刚 Thread-1 所在的 Node，该 Node 清空 Thread 原本的 head 因为从链表断开，而可被垃圾回收 如果这时候有其它线程来竞争（非公平的体现），例如这时有 Thread-4 来了 如果不巧又被 Thread-4 占了先 Thread-4 被设置为 exclusiveOwnerThread，state = 1 Thread-1 再次进入 acquireQueued 流程，获取锁失败，重新进入 park 阻塞 加锁源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147// Sync 继承自 AQSstatic final class NonfairSync extends Sync &#123; private static final long serialVersionUID = 7316153563782823691L; // 加锁实现 final void lock() &#123; // 首先用 cas 尝试（仅尝试一次）将 state 从 0 改为 1, 如果成功表示获得了独占锁 if (compareAndSetState(0, 1)) setExclusiveOwnerThread(Thread.currentThread()); else // 如果尝试失败，进入 ㈠ acquire(1); &#125; // ㈠ AQS 继承过来的方法, 方便阅读, 放在此处 public final void acquire(int arg) &#123; // ㈡ tryAcquire if ( !tryAcquire(arg) &amp;&amp; // 当 tryAcquire 返回为 false 时, 先调用 addWaiter ㈣, 接着 acquireQueued ㈤ acquireQueued(addWaiter(Node.EXCLUSIVE), arg) ) &#123; selfInterrupt(); &#125; &#125; // ㈡ 进入 ㈢ protected final boolean tryAcquire(int acquires) &#123; return nonfairTryAcquire(acquires); &#125; // ㈢ Sync 继承过来的方法, 方便阅读, 放在此处 final boolean nonfairTryAcquire(int acquires) &#123; final Thread current = Thread.currentThread(); int c = getState(); // 如果还没有获得锁 if (c == 0) &#123; // 尝试用 cas 获得, 这里体现了非公平性: 不去检查 AQS 队列 if (compareAndSetState(0, acquires)) &#123; setExclusiveOwnerThread(current); return true; &#125; &#125; // 如果已经获得了锁, 线程还是当前线程, 表示发生了锁重入 else if (current == getExclusiveOwnerThread()) &#123; // state++ int nextc = c + acquires; if (nextc &lt; 0) // overflow throw new Error(&quot;Maximum lock count exceeded&quot;); setState(nextc); return true; &#125; // 获取失败, 回到调用处 return false; &#125; // ㈣ AQS 继承过来的方法, 方便阅读, 放在此处 private Node addWaiter(Node mode) &#123; // 将当前线程关联到一个 Node 对象上, 模式为独占模式 Node node = new Node(Thread.currentThread(), mode); // 如果 tail 不为 null, cas 尝试将 Node 对象加入 AQS 队列尾部 Node pred = tail; if (pred != null) &#123; node.prev = pred; if (compareAndSetTail(pred, node)) &#123; // 双向链表 pred.next = node; return node; &#125; &#125; // 尝试将 Node 加入 AQS, 进入 ㈥ enq(node); return node; &#125; // ㈥ AQS 继承过来的方法, 方便阅读, 放在此处 private Node enq(final Node node) &#123; for (;;) &#123; Node t = tail; if (t == null) &#123; // 还没有, 设置 head 为哨兵节点（不对应线程，状态为 0） if (compareAndSetHead(new Node())) &#123; tail = head; &#125; &#125; else &#123; // cas 尝试将 Node 对象加入 AQS 队列尾部 node.prev = t; if (compareAndSetTail(t, node)) &#123; t.next = node; return t; &#125; &#125; &#125; &#125; // ㈤ AQS 继承过来的方法, 方便阅读, 放在此处 final boolean acquireQueued(final Node node, int arg) &#123; boolean failed = true; try &#123; boolean interrupted = false; for (;;) &#123; final Node p = node.predecessor(); // 上一个节点是 head, 表示轮到自己（当前线程对应的 node）了, 尝试获取 if (p == head &amp;&amp; tryAcquire(arg)) &#123; // 获取成功, 设置自己（当前线程对应的 node）为 head setHead(node); // 上一个节点 help GC p.next = null; failed = false; // 返回中断标记 false return interrupted; &#125; if ( // 判断是否应当 park, 进入 ㈦ shouldParkAfterFailedAcquire(p, node) &amp;&amp; // park 等待, 此时 Node 的状态被置为 Node.SIGNAL ㈧ parkAndCheckInterrupt() ) &#123; interrupted = true; &#125; &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125; &#125; // ㈦ AQS 继承过来的方法, 方便阅读, 放在此处 private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123; // 获取上一个节点的状态 int ws = pred.waitStatus; if (ws == Node.SIGNAL) &#123; // 上一个节点都在阻塞, 那么自己也阻塞好了 return true; &#125; // &gt; 0 表示取消状态 if (ws &gt; 0) &#123; // 上一个节点取消, 那么重构删除前面所有取消的节点, 返回到外层循环重试 do &#123; node.prev = pred = pred.prev; &#125; while (pred.waitStatus &gt; 0); pred.next = node; &#125; else &#123; // 这次还没有阻塞 // 但下次如果重试不成功, 则需要阻塞，这时需要设置上一个节点状态为 Node.SIGNAL compareAndSetWaitStatus(pred, ws, Node.SIGNAL); &#125; return false; &#125; // ㈧ 阻塞当前线程 private final boolean parkAndCheckInterrupt() &#123; LockSupport.park(this); return Thread.interrupted(); &#125;&#125; 注意 是否需要 unpark 是由当前节点的前驱节点的 waitStatus == Node.SIGNAL 来决定，而不是本节点的 waitStatus 决定 解锁源码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Sync 继承自 AQSstatic final class NonfairSync extends Sync &#123; // 解锁实现 public void unlock() &#123; sync.release(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final boolean release(int arg) &#123; // 尝试释放锁, 进入 ㈠ if (tryRelease(arg)) &#123; // 队列头节点 unpark Node h = head; if ( // 队列不为 null h != null &amp;&amp; // waitStatus == Node.SIGNAL 才需要 unpark h.waitStatus != 0 ) &#123; // unpark AQS 中等待的线程, 进入 ㈡ unparkSuccessor(h); &#125; return true; &#125; return false; &#125; // ㈠ Sync 继承过来的方法, 方便阅读, 放在此处 protected final boolean tryRelease(int releases) &#123; // state-- int c = getState() - releases; if (Thread.currentThread() != getExclusiveOwnerThread()) throw new IllegalMonitorStateException(); boolean free = false; // 支持锁重入, 只有 state 减为 0, 才释放成功 if (c == 0) &#123; free = true; setExclusiveOwnerThread(null); &#125; setState(c); return free; &#125; // ㈡ AQS 继承过来的方法, 方便阅读, 放在此处 private void unparkSuccessor(Node node) &#123; // 如果状态为 Node.SIGNAL 尝试重置状态为 0 // 不成功也可以 int ws = node.waitStatus; if (ws &lt; 0) &#123; compareAndSetWaitStatus(node, ws, 0); &#125; // 找到需要 unpark 的节点, 但本节点从 AQS 队列中脱离, 是由唤醒节点完成的 Node s = node.next; // 不考虑已取消的节点, 从 AQS 队列从后至前找到队列最前面需要 unpark 的节点 if (s == null || s.waitStatus &gt; 0) &#123; s = null; for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev) if (t.waitStatus &lt;= 0) s = t; &#125; if (s != null) LockSupport.unpark(s.thread); &#125;&#125; 可重入原理123456789101112131415161718192021222324252627282930313233343536373839static final class NonfairSync extends Sync &#123; // ... // Sync 继承过来的方法, 方便阅读, 放在此处 final boolean nonfairTryAcquire(int acquires) &#123; final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) &#123; if (compareAndSetState(0, acquires)) &#123; setExclusiveOwnerThread(current); return true; &#125; &#125; // 如果已经获得了锁, 线程还是当前线程, 表示发生了锁重入 else if (current == getExclusiveOwnerThread()) &#123; // state++ int nextc = c + acquires; if (nextc &lt; 0) // overflow throw new Error(&quot;Maximum lock count exceeded&quot;); setState(nextc); return true; &#125; return false; &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 protected final boolean tryRelease(int releases) &#123; // state-- int c = getState() - releases; if (Thread.currentThread() != getExclusiveOwnerThread()) throw new IllegalMonitorStateException(); boolean free = false; // 支持锁重入, 只有 state 减为 0, 才释放成功 if (c == 0) &#123; free = true; setExclusiveOwnerThread(null); &#125; setState(c); return free; &#125;&#125; 可打断原理不可打断模式在此模式下，即使它被打断，仍会驻留在 AQS 队列中，一直要等到获得锁后方能得知自己被打断了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// Sync 继承自 AQSstatic final class NonfairSync extends Sync &#123; // ... private final boolean parkAndCheckInterrupt() &#123; // 如果打断标记已经是 true, 则 park 会失效 LockSupport.park(this); // interrupted 会清除打断标记 return Thread.interrupted(); &#125; final boolean acquireQueued(final Node node, int arg) &#123; boolean failed = true; try &#123; boolean interrupted = false; for (;;) &#123; final Node p = node.predecessor(); if (p == head &amp;&amp; tryAcquire(arg)) &#123; setHead(node); p.next = null; failed = false; // 还是需要获得锁后, 才能返回打断状态 return interrupted; &#125; if ( shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt() ) &#123; // 如果是因为 interrupt 被唤醒, 返回打断状态为 true interrupted = true; &#125; &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125; &#125; public final void acquire(int arg) &#123; if ( !tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg) ) &#123; // 如果打断状态为 true selfInterrupt(); &#125; &#125; static void selfInterrupt() &#123; // 重新产生一次中断 Thread.currentThread().interrupt(); &#125;&#125; 打断模式12345678910111213141516171819202122232425262728293031323334static final class NonfairSync extends Sync &#123; public final void acquireInterruptibly(int arg) throws InterruptedException &#123; if (Thread.interrupted()) throw new InterruptedException(); // 如果没有获得到锁, 进入 ㈠ if (!tryAcquire(arg)) doAcquireInterruptibly(arg); &#125; // ㈠ 可打断的获取锁流程 private void doAcquireInterruptibly(int arg) throws InterruptedException &#123; final Node node = addWaiter(Node.EXCLUSIVE); boolean failed = true; try &#123; for (;;) &#123; final Node p = node.predecessor(); if (p == head &amp;&amp; tryAcquire(arg)) &#123; setHead(node); p.next = null; // help GC failed = false; return; &#125; if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt()) &#123; // 在 park 过程中如果被 interrupt 会进入此 // 这时候抛出异常, 而不会再次进入 for (;;) throw new InterruptedException(); &#125; &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125; &#125;&#125; 公平锁实现原理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950static final class FairSync extends Sync &#123; private static final long serialVersionUID = -3000897897090466540L; final void lock() &#123; acquire(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final void acquire(int arg) &#123; if ( !tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg) ) &#123; selfInterrupt(); &#125; &#125; // 与非公平锁主要区别在于 tryAcquire 方法的实现 protected final boolean tryAcquire(int acquires) &#123; final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) &#123; // 先检查 AQS 队列中是否有前驱节点, 没有才去竞争 if (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(0, acquires)) &#123; setExclusiveOwnerThread(current); return true; &#125; &#125; else if (current == getExclusiveOwnerThread()) &#123; int nextc = c + acquires; if (nextc &lt; 0) throw new Error(&quot;Maximum lock count exceeded&quot;); setState(nextc); return true; &#125; return false; &#125; // ㈠ AQS 继承过来的方法, 方便阅读, 放在此处 public final boolean hasQueuedPredecessors() &#123; Node t = tail; Node h = head; Node s; // h != t 时表示队列中有 Node return h != t &amp;&amp; ( // (s = h.next) == null 表示队列中还有没有老二 (s = h.next) == null || // 或者队列中老二线程不是此线程 s.thread != Thread.currentThread() ); &#125;&#125; 条件变量实现原理每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject await 流程开始 Thread-0 持有锁，调用 await，进入 ConditionObject 的 addConditionWaiter 流程创建新的 Node 状态为 -2（Node.CONDITION），关联 Thread-0，加入等待队列尾部 接下来进入 AQS 的 fullyRelease 流程，释放同步器上的锁 unpark AQS 队列中的下一个节点，竞争锁，假设没有其他竞争线程，那么 Thread-1 竞争成功 signal 流程假设 Thread-1 要来唤醒 Thread-0 进入 ConditionObject 的 doSignal 流程，取得等待队列中第一个 Node，即 Thread-0 所在 Node firstWaiter就是第一个节点，而不是firstWaiter的nextWaiter，此时第一个节点脱离该链表结构，firstWaiter指向下一个 lastWaiter总是最后一个节点，直到没有节点firstWaiter和lastWaiter都指向null 执行 transferForSignal 流程，将该 Node 加入 AQS 队列尾部，将 Thread-0 的 waitStatus 改为 0，Thread-3 的 waitStatus 改为 -1 如果 Node 节点这时被 取消，这Node 节点不会再 signal ，会重新去执行 在 ConditionObject中 的 firstWaiter的doSignal 流程 Thread-1 释放锁 如果 新加入的Node 的前一个节点 由于 被取消或者超时，会优先将 Node 节点 恢复为(调用unpark) 运行 其他情况按照 AQS 节点优先顺序 去 执行 源码public class ConditionObject implements Condition, java.io.Serializable &#123; private static final long serialVersionUID = 1173984872572414699L; // 第一个等待节点 private transient Node firstWaiter; // 最后一个等待节点 private transient Node lastWaiter; public ConditionObject() &#123; &#125; // ㈠ 添加一个 Node 至等待队列 private Node addConditionWaiter() &#123; Node t = lastWaiter; // 所有已取消的 Node 从队列链表删除, 见 ㈡ if (t != null &amp;&amp; t.waitStatus != Node.CONDITION) &#123; unlinkCancelledWaiters(); t = lastWaiter; &#125; // 创建一个关联当前线程的新 Node, 添加至队列尾部 Node node = new Node(Thread.currentThread(), Node.CONDITION); if (t == null) firstWaiter = node; else t.nextWaiter = node; lastWaiter = node; return node; &#125; // 唤醒 - 将没取消的第一个节点转移至 AQS 队列 private void doSignal(Node first) &#123; do &#123; // 已经是尾节点了 if ( (firstWaiter = first.nextWaiter) == null) &#123; lastWaiter = null; &#125; first.nextWaiter = null; &#125; while ( // 将等待队列中的 Node 转移至 AQS 队列, 不成功且还有节点则继续循环 ㈢ !transferForSignal(first) &amp;&amp; // 队列还有节点 (first = firstWaiter) != null ); &#125; // 外部类方法, 方便阅读, 放在此处 // ㈢ 如果节点状态是取消, 返回 false 表示转移失败, 否则转移成功 final boolean transferForSignal(Node node) &#123; // 如果状态已经不是 Node.CONDITION, 说明被取消了 if (!compareAndSetWaitStatus(node, Node.CONDITION, 0)) return false; // 加入 AQS 队列尾部 Node p = enq(node); int ws = p.waitStatus; if ( // 上一个节点被取消 ws &gt; 0 || // 上一个节点不能设置状态为 Node.SIGNAL !compareAndSetWaitStatus(p, ws, Node.SIGNAL) ) &#123; // unpark 取消阻塞, 让线程重新同步状态 LockSupport.unpark(node.thread); &#125; return true; &#125; // 全部唤醒 - 等待队列的所有节点转移至 AQS 队列 private void doSignalAll(Node first) &#123; lastWaiter = firstWaiter = null; do &#123; Node next = first.nextWaiter; first.nextWaiter = null; transferForSignal(first); first = next; &#125; while (first != null); &#125; // ㈡ private void unlinkCancelledWaiters() &#123; // ... &#125; // 唤醒 - 必须持有锁才能唤醒, 因此 doSignal 内无需考虑加锁 public final void signal() &#123; if (!isHeldExclusively()) throw new IllegalMonitorStateException(); Node first = firstWaiter; if (first != null) doSignal(first); &#125; // 全部唤醒 - 必须持有锁才能唤醒, 因此 doSignalAll 内无需考虑加锁 public final void signalAll() &#123; if (!isHeldExclusively()) throw new IllegalMonitorStateException(); Node first = firstWaiter; if (first != null) doSignalAll(first); &#125; // 不可打断等待 - 直到被唤醒 public final void awaitUninterruptibly() &#123; // 添加一个 Node 至等待队列, 见 ㈠ Node node = addConditionWaiter(); // 释放节点持有的锁, 见 ㈣ int savedState = fullyRelease(node); boolean interrupted = false; // 如果该节点还没有转移至 AQS 队列, 阻塞 while (!isOnSyncQueue(node)) &#123; // park 阻塞 LockSupport.park(this); // 如果被打断, 仅设置打断状态 if (Thread.interrupted()) interrupted = true; &#125; // 唤醒后, 尝试竞争锁, 如果失败进入 AQS 队列 if (acquireQueued(node, savedState) || interrupted) selfInterrupt(); &#125; // 外部类方法, 方便阅读, 放在此处 // ㈣ 因为某线程可能重入，需要将 state 全部释放 final int fullyRelease(Node node) &#123; boolean failed = true; try &#123; int savedState = getState(); if (release(savedState)) &#123; failed = false; return savedState; &#125; else &#123; throw new IllegalMonitorStateException(); &#125; &#125; finally &#123; if (failed) node.waitStatus = Node.CANCELLED; &#125; &#125; // 打断模式 - 在退出等待时重新设置打断状态 private static final int REINTERRUPT = 1; // 打断模式 - 在退出等待时抛出异常 private static final int THROW_IE = -1; // 判断打断模式 private int checkInterruptWhileWaiting(Node node) &#123; return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0; &#125; // ㈤ 应用打断模式 private void reportInterruptAfterWait(int interruptMode) throws InterruptedException &#123; if (interruptMode == THROW_IE) throw new InterruptedException(); else if (interruptMode == REINTERRUPT) selfInterrupt(); &#125; // 等待 - 直到被唤醒或打断 public final void await() throws InterruptedException &#123; if (Thread.interrupted()) &#123; throw new InterruptedException(); &#125; // 添加一个 Node 至等待队列, 见 ㈠ Node node = addConditionWaiter(); // 释放节点持有的锁 int savedState = fullyRelease(node); int interruptMode = 0; // 如果该节点还没有转移至 AQS 队列, 阻塞 while (!isOnSyncQueue(node)) &#123; // park 阻塞 LockSupport.park(this); // 如果被打断, 退出等待队列 if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; &#125; // 退出等待队列后, 还需要获得 AQS 队列的锁 if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE) interruptMode = REINTERRUPT; // 所有已取消的 Node 从队列链表删除, 见 ㈡ if (node.nextWaiter != null) unlinkCancelledWaiters(); // 应用打断模式, 见 ㈤ if (interruptMode != 0) reportInterruptAfterWait(interruptMode); &#125; // 等待 - 直到被唤醒或打断或超时 public final long awaitNanos(long nanosTimeout) throws InterruptedException &#123; if (Thread.interrupted()) &#123; throw new InterruptedException(); &#125; // 添加一个 Node 至等待队列, 见 ㈠ Node node = addConditionWaiter(); // 释放节点持有的锁 int savedState = fullyRelease(node); // 获得最后期限 final long deadline = System.nanoTime() + nanosTimeout; int interruptMode = 0; // 如果该节点还没有转移至 AQS 队列, 阻塞 while (!isOnSyncQueue(node)) &#123; // 已超时, 退出等待队列 if (nanosTimeout &lt;= 0L) &#123; transferAfterCancelledWait(node); break; &#125; // park 阻塞一定时间, spinForTimeoutThreshold 为 1000 ns if (nanosTimeout &gt;= spinForTimeoutThreshold) LockSupport.parkNanos(this, nanosTimeout); // 如果被打断, 退出等待队列 if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; nanosTimeout = deadline - System.nanoTime(); &#125; // 退出等待队列后, 还需要获得 AQS 队列的锁 if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE) interruptMode = REINTERRUPT; // 所有已取消的 Node 从队列链表删除, 见 ㈡ if (node.nextWaiter != null) unlinkCancelledWaiters(); // 应用打断模式, 见 ㈤ if (interruptMode != 0) reportInterruptAfterWait(interruptMode); return deadline - System.nanoTime(); &#125; // 等待 - 直到被唤醒或打断或超时, 逻辑类似于 awaitNanos public final boolean awaitUntil(Date deadline) throws InterruptedException &#123; // ... &#125; // 等待 - 直到被唤醒或打断或超时, 逻辑类似于 awaitNanos public final boolean await(long time, TimeUnit unit) throws InterruptedException &#123; // ... &#125; // 工具方法 省略 ...&#125; 2.3 读写锁ReentrantReadWriteLock当读操作远远高于写操作时，这时候使用 读写锁 让 读-读 可以并发，提高性能。 类似于数据库中的 select ... from ... lock in share mode 提供一个 数据容器类 内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法 1234567891011121314151617181920212223242526272829class DataContainer &#123; private Object data; private ReentrantReadWriteLock rw = new ReentrantReadWriteLock(); private ReentrantReadWriteLock.ReadLock r = rw.readLock(); private ReentrantReadWriteLock.WriteLock w = rw.writeLock(); public Object read() &#123; log.debug(&quot;获取读锁...&quot;); r.lock(); try &#123; log.debug(&quot;读取&quot;); sleep(1); return data; &#125; finally &#123; log.debug(&quot;释放读锁...&quot;); r.unlock(); &#125; &#125; public void write() &#123; log.debug(&quot;获取写锁...&quot;); w.lock(); try &#123; log.debug(&quot;写入&quot;); sleep(1); &#125; finally &#123; log.debug(&quot;释放写锁...&quot;); w.unlock(); &#125; &#125;&#125; 测试 读锁-读锁 可以并发 1234567DataContainer dataContainer = new DataContainer();new Thread(() -&gt; &#123; dataContainer.read();&#125;, &quot;t1&quot;).start();new Thread(() -&gt; &#123; dataContainer.read();&#125;, &quot;t2&quot;).start() 输出结果，从这里可以看到 Thread-0 锁定期间，Thread-1 的读操作不受影响 12345614:05:14.341 c.DataContainer [t2] - 获取读锁...14:05:14.341 c.DataContainer [t1] - 获取读锁...14:05:14.345 c.DataContainer [t1] - 读取14:05:14.345 c.DataContainer [t2] - 读取14:05:15.365 c.DataContainer [t2] - 释放读锁...14:05:15.386 c.DataContainer [t1] - 释放读锁... 测试 读锁-写锁 相互阻塞 12345678DataContainer dataContainer = new DataContainer();new Thread(() -&gt; &#123; dataContainer.read();&#125;, &quot;t1&quot;).start();Thread.sleep(100);new Thread(() -&gt; &#123; dataContainer.write();&#125;, &quot;t2&quot;).start(); 输出结果 12345614:04:21.838 c.DataContainer [t1] - 获取读锁...14:04:21.838 c.DataContainer [t2] - 获取写锁...14:04:21.841 c.DataContainer [t2] - 写入14:04:22.843 c.DataContainer [t2] - 释放写锁...14:04:22.843 c.DataContainer [t1] - 读取14:04:23.843 c.DataContainer [t1] - 释放读锁... 写锁-写锁 也是相互阻塞的，这里就不测试了 注意事项 读锁不支持条件变量 重入时升级不支持：即持有读锁的情况下去获取写锁，会导致获取写锁永久等待 123456789101112r.lock();try &#123;// ...w.lock();try &#123;// ...&#125; finally&#123;w.unlock();&#125;&#125; finally&#123;r.unlock();&#125; 重入时降级支持：即持有写锁的情况下去获取读锁 12345678910111213141516171819202122232425262728293031class CachedData &#123; Object data; // 是否有效，如果失效，需要重新计算 data volatile boolean cacheValid; final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock(); void processCachedData() &#123; rwl.readLock().lock(); if (!cacheValid) &#123; // 获取写锁前必须释放读锁 rwl.readLock().unlock(); rwl.writeLock().lock(); try &#123; // 判断是否有其它线程已经获取了写锁、更新了缓存, 避免重复更新 if (!cacheValid) &#123; data = ... cacheValid = true; &#125; // 降级为读锁, 释放写锁, 这样能够让其它线程读取缓存 rwl.readLock().lock(); &#125; finally &#123; rwl.writeLock().unlock(); &#125; &#125; // 自己用完数据, 释放读锁 try &#123; use(data); &#125; finally &#123; rwl.readLock().unlock(); &#125; &#125;&#125; 应用之缓存缓存更新策略更新时，是先清缓存还是先更新数据库 先清缓存 先更新数据库 补充一种情况，假设查询线程 A 查询数据时恰好缓存数据由于时间到期失效，或是第一次查询 这种情况的出现几率非常小，见 facebook 论文 读写锁一致性缓存使用读写锁实现一个简单的按需加载缓存 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273class GenericCachedDao&lt;T&gt; &#123; // HashMap 作为缓存非线程安全, 需要保护 HashMap&lt;SqlPair, T&gt; map = new HashMap&lt;&gt;(); ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); GenericDao genericDao = new GenericDao(); public int update(String sql, Object... params) &#123; SqlPair key = new SqlPair(sql, params); // 加写锁, 防止其它线程对缓存读取和更改 lock.writeLock().lock(); try &#123; int rows = genericDao.update(sql, params); map.clear(); return rows; &#125; finally &#123; lock.writeLock().unlock(); &#125; &#125; public T queryOne(Class&lt;T&gt; beanClass, String sql, Object... params) &#123; SqlPair key = new SqlPair(sql, params); // 加读锁, 防止其它线程对缓存更改 lock.readLock().lock(); try &#123; T value = map.get(key); if (value != null) &#123; return value; &#125; &#125; finally &#123; lock.readLock().unlock(); &#125; // 加写锁, 防止其它线程对缓存读取和更改 lock.writeLock().lock(); try &#123; // get 方法上面部分是可能多个线程进来的, 可能已经向缓存填充了数据 // 为防止重复查询数据库, 再次验证 T value = map.get(key); if (value == null) &#123; // 如果没有, 查询数据库 value = genericDao.queryOne(beanClass, sql, params); map.put(key, value); &#125; return value; &#125; finally &#123; lock.writeLock().unlock(); &#125; &#125; // 作为 key 保证其是不可变的 class SqlPair &#123; private String sql; private Object[] params; public SqlPair(String sql, Object[] params) &#123; this.sql = sql; this.params = params; &#125; @Override public boolean equals(Object o) &#123; if (this == o) &#123; return true; &#125; if (o == null || getClass() != o.getClass()) &#123; return false; &#125; SqlPair sqlPair = (SqlPair) o; return sql.equals(sqlPair.sql) &amp;&amp; Arrays.equals(params, sqlPair.params); &#125; @Override public int hashCode() &#123; int result = Objects.hash(sql); result = 31 * result + Arrays.hashCode(params); return result; &#125; &#125;&#125; 注意 以上实现体现的是读写锁的应用，保证缓存和数据库的一致性，但有下面的问题没有考虑 适合读多写少，如果写操作比较频繁，以上实现性能低 没有考虑缓存容量 没有考虑缓存过期 只适合单机 并发性还是低，目前只会用一把锁 更新方法太过简单粗暴，清空了所有 key（考虑按类型分区或重新设计 key） 乐观锁实现：用 CAS 去更新 读写锁原理(1) 图解流程读写锁用的是同一个 Sycn 同步器，因此等待队列、state 等也是同一个 t1 w.lock，t2 r.lock(1) t1 成功上锁，流程与 ReentrantLock 加锁相比没有特殊之处，不同是写锁状态占了 state 的低 16 位，而读锁使用的是 state 的高 16 位 (2) t2 执行 r.lock，这时进入读锁的 sync.acquireShared(1) 流程，首先会进入 tryAcquireShared 流程。如果有写锁占据，那么 tryAcquireShared 返回 -1 表示失败 tryAcquireShared 返回值表示 -1 表示失败 0 表示成功，但后继节点不会继续唤醒 正数表示成功，而且数值是还有几个后继节点需要唤醒，读写锁返回 1 (3) 这时会进入 sync.doAcquireShared(1) 流程，首先也是调用 addWaiter 添加节点，不同之处在于节点被设置为 Node.SHARED 模式而非 Node.EXCLUSIVE 模式，注意此时 t2 仍处于活跃状态 (4) t2 会看看自己的节点是不是老二，如果是，还会再次调用 tryAcquireShared(1) 来尝试获取锁 (5) 如果没有成功，在 doAcquireShared 内 for (;;) 循环一次，把前驱节点的 waitStatus 改为 -1，再 for (;;) 循环一次尝试 tryAcquireShared(1) 如果还不成功，(总共尝试了三次tryAcquireShared) 那么在 parkAndCheckInterrupt() 处 park t3 r.lock，t4 w.lock这种状态下，假设又有 t3 加读锁和 t4 加写锁，这期间 t1 仍然持有锁，就变成了下面的样子 1 w.unlock这时会走到写锁的 sync.release(1) 流程，调用 sync.tryRelease(1) 成功，变成下面的样子 接下来执行唤醒流程 sync.unparkSuccessor，即让老二恢复运行，这时 t2 在 doAcquireShared 内 parkAndCheckInterrupt() 处恢复运行 这回再来一次 for (;;) 执行 tryAcquireShared 成功则让读锁计数加一 这时 t2 已经恢复运行，接下来 t2 调用 setHeadAndPropagate(node, 1)，它原本所在节点被置为头节点 事情还没完，在 setHeadAndPropagate 方法内还会检查下一个节点是否是 shared，如果是则调用 doReleaseShared() 将 head 的状态从 -1 改为 0 并唤醒老二，这时 t3 在 doAcquireShared 内 parkAndCheckInterrupt() 处恢复运行 这回再来一次 for (;;) 执行 tryAcquireShared 成功则让读锁计数加一 这时 t3 已经恢复运行，接下来 t3 调用 setHeadAndPropagate(node, 1)，它原本所在节点被置为头节点 下一个节点不是 shared 了，因此不会继续唤醒 t4 所在节点 t2 r.unlock，t3 r.unlockt2 进入 sync.releaseShared(1) 中，调用 tryReleaseShared(1) 让计数减一，但由于计数还不为零 t3 进入 sync.releaseShared(1) 中，调用 tryReleaseShared(1) 让计数减一，这回计数为零了，进入 doReleaseShared() 将头节点从 -1 改为 0 并唤醒老二，即 之后 t4 在 acquireQueued 中 parkAndCheckInterrupt 处恢复运行，再次 for (;;) 这次自己是老二，并且没有其他竞争，tryAcquire(1) 成功，修改头结点，流程结束 (2) 源码分析写锁上锁流程1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859static final class NonfairSync extends Sync &#123; // ... 省略无关代码 // 外部类 WriteLock 方法, 方便阅读, 放在此处 public void lock() &#123; sync.acquire(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final void acquire(int arg) &#123; if ( // 尝试获得写锁失败 !tryAcquire(arg) &amp;&amp; // 将当前线程关联到一个 Node 对象上, 模式为独占模式 // 进入 AQS 队列阻塞 acquireQueued(addWaiter(Node.EXCLUSIVE), arg) ) &#123; selfInterrupt(); &#125; &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 protected final boolean tryAcquire(int acquires) &#123; // 获得低 16 位, 代表写锁的 state 计数 Thread current = Thread.currentThread(); int c = getState(); int w = exclusiveCount(c); if (c != 0) &#123; if ( // c != 0 and w == 0 表示有读锁, 或者 w == 0 || // 如果 exclusiveOwnerThread 不是自己 current != getExclusiveOwnerThread() ) &#123; // 获得锁失败 return false; &#125; // 写锁计数超过低 16 位, 报异常 if (w + exclusiveCount(acquires) &gt; MAX_COUNT) throw new Error(&quot;Maximum lock count exceeded&quot;); // 写锁重入, 获得锁成功 setState(c + acquires); return true; &#125; if ( // 判断写锁是否该阻塞, 或者 writerShouldBlock() || // 尝试更改计数失败 !compareAndSetState(c, c + acquires) ) &#123; // 获得锁失败 return false; &#125; // 获得锁成功 setExclusiveOwnerThread(current); return true; &#125; // 非公平锁 writerShouldBlock 总是返回 false, 无需阻塞 final boolean writerShouldBlock() &#123; return false; &#125;&#125; 写锁释放流程1234567891011121314151617181920212223242526272829303132static final class NonfairSync extends Sync &#123; // ... 省略无关代码 // WriteLock 方法, 方便阅读, 放在此处 public void unlock() &#123; sync.release(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final boolean release(int arg) &#123; // 尝试释放写锁成功 if (tryRelease(arg)) &#123; // unpark AQS 中等待的线程 Node h = head; if (h != null &amp;&amp; h.waitStatus != 0) unparkSuccessor(h); return true; &#125; return false; &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 protected final boolean tryRelease(int releases) &#123; if (!isHeldExclusively()) throw new IllegalMonitorStateException(); int nextc = getState() - releases; // 因为可重入的原因, 写锁计数为 0, 才算释放成功 boolean free = exclusiveCount(nextc) == 0; if (free) &#123; setExclusiveOwnerThread(null); &#125; setState(nextc); return free; &#125;&#125; 读锁上锁流程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144static final class NonfairSync extends Sync &#123; // ReadLock 方法, 方便阅读, 放在此处 public void lock() &#123; sync.acquireShared(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final void acquireShared(int arg) &#123; // tryAcquireShared 返回负数, 表示获取读锁失败 if (tryAcquireShared(arg) &lt; 0) &#123; doAcquireShared(arg); &#125; &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 protected final int tryAcquireShared(int unused) &#123; Thread current = Thread.currentThread(); int c = getState(); // 如果是其它线程持有写锁, 获取读锁失败 if ( exclusiveCount(c) != 0 &amp;&amp; getExclusiveOwnerThread() != current ) &#123; return -1; &#125; int r = sharedCount(c); if ( // 读锁不该阻塞(如果老二是写锁，读锁该阻塞), 并且 !readerShouldBlock() &amp;&amp; // 小于读锁计数, 并且 r &lt; MAX_COUNT &amp;&amp; // 尝试增加计数成功 compareAndSetState(c, c + SHARED_UNIT) ) &#123; // ... 省略不重要的代码 return 1; &#125; return fullTryAcquireShared(current); &#125; // 非公平锁 readerShouldBlock 看 AQS 队列中第一个节点是否是写锁 // true 则该阻塞, false 则不阻塞 final boolean readerShouldBlock() &#123; return apparentlyFirstQueuedIsExclusive(); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 // 与 tryAcquireShared 功能类似, 但会不断尝试 for (;;) 获取读锁, 执行过程中无阻塞 final int fullTryAcquireShared(Thread current) &#123; HoldCounter rh = null; for (;;) &#123; int c = getState(); if (exclusiveCount(c) != 0) &#123; if (getExclusiveOwnerThread() != current) return -1; &#125; else if (readerShouldBlock()) &#123; // ... 省略不重要的代码 &#125; if (sharedCount(c) == MAX_COUNT) throw new Error(&quot;Maximum lock count exceeded&quot;); if (compareAndSetState(c, c + SHARED_UNIT)) &#123; // ... 省略不重要的代码 return 1; &#125; &#125; &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 private void doAcquireShared(int arg) &#123; // 将当前线程关联到一个 Node 对象上, 模式为共享模式 final Node node = addWaiter(Node.SHARED); boolean failed = true; try &#123; boolean interrupted = false; for (;;) &#123; final Node p = node.predecessor(); if (p == head) &#123; // 再一次尝试获取读锁 int r = tryAcquireShared(arg); // 成功 if (r &gt;= 0) &#123; // ㈠ // r 表示可用资源数, 在这里总是 1 允许传播 //（唤醒 AQS 中下一个 Share 节点） setHeadAndPropagate(node, r); p.next = null; // help GC if (interrupted) selfInterrupt(); failed = false; return; &#125; &#125; if ( // 是否在获取读锁失败时阻塞（前一个阶段 waitStatus == Node.SIGNAL） shouldParkAfterFailedAcquire(p, node) &amp;&amp; // park 当前线程 parkAndCheckInterrupt() ) &#123; interrupted = true; &#125; &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125; &#125; // ㈠ AQS 继承过来的方法, 方便阅读, 放在此处 private void setHeadAndPropagate(Node node, int propagate) &#123; Node h = head; // Record old head for check below // 设置自己为 head setHead(node); // propagate 表示有共享资源（例如共享读锁或信号量） // 原 head waitStatus == Node.SIGNAL 或 Node.PROPAGATE // 现在 head waitStatus == Node.SIGNAL 或 Node.PROPAGATE if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 || (h = head) == null || h.waitStatus &lt; 0) &#123; Node s = node.next; // 如果是最后一个节点或者是等待共享读锁的节点 if (s == null || s.isShared()) &#123; // 进入 ㈡ doReleaseShared(); &#125; &#125; &#125; // ㈡ AQS 继承过来的方法, 方便阅读, 放在此处 private void doReleaseShared() &#123; // 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark // 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE, 为了解决 bug, 见后面分析 for (;;) &#123; Node h = head; // 队列还有节点 if (h != null &amp;&amp; h != tail) &#123; int ws = h.waitStatus; if (ws == Node.SIGNAL) &#123; if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) continue; // loop to recheck cases // 下一个节点 unpark 如果成功获取读锁 // 并且下下个节点还是 shared, 继续 doReleaseShared unparkSuccessor(h); &#125; else if (ws == 0 &amp;&amp; !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) continue; // loop on failed CAS &#125; if (h == head) // loop if head changed break; &#125; &#125;&#125; 读锁释放流程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051static final class NonfairSync extends Sync &#123; // ReadLock 方法, 方便阅读, 放在此处 public void unlock() &#123; sync.releaseShared(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final boolean releaseShared(int arg) &#123; if (tryReleaseShared(arg)) &#123; doReleaseShared(); return true; &#125; return false; &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 protected final boolean tryReleaseShared(int unused) &#123; // ... 省略不重要的代码 for (;;) &#123; int c = getState(); int nextc = c - SHARED_UNIT; if (compareAndSetState(c, nextc)) &#123; // 读锁的计数不会影响其它获取读锁线程, 但会影响其它获取写锁线程 // 计数为 0 才是真正释放 return nextc == 0; &#125; &#125; &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 private void doReleaseShared() &#123; // 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark // 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE for (;;) &#123; Node h = head; if (h != null &amp;&amp; h != tail) &#123; int ws = h.waitStatus; // 如果有其它线程也在释放读锁，那么需要将 waitStatus 先改为 0 // 防止 unparkSuccessor 被多次执行 if (ws == Node.SIGNAL) &#123; if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) continue; // loop to recheck cases unparkSuccessor(h); &#125; // 如果已经是 0 了，改为 -3，用来解决传播性，见后文信号量 bug 分析 else if (ws == 0 &amp;&amp; !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) continue; // loop on failed CAS &#125; if (h == head) // loop if head changed break; &#125; &#125;&#125; StampedLock该类自 JDK 8 加入，是为了进一步优化读性能，它的特点是在使用读锁、写锁时都必须配合【戳】使用加解读锁 12long stamp = lock.readLock();lock.unlockRead(stamp); 加解写锁 12long stamp = lock.writeLock();lock.unlockWrite(stamp); 乐观读，StampedLock 支持 tryOptimisticRead() 方法（乐观读），读取完毕后需要做一次 戳校验 如果校验通过，表示这期间确实没有写操作，数据可以安全使用，如果校验没通过，需要重新获取读锁，保证数据安全。 12345long stamp = lock.tryOptimisticRead();// 验戳if(!lock.validate(stamp))&#123; // 锁升级&#125; 提供一个 数据容器类 内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法 123456789101112131415161718192021222324252627282930313233343536373839class DataContainerStamped &#123; private int data; private final StampedLock lock = new StampedLock(); public DataContainerStamped(int data) &#123; this.data = data; &#125; public int read(int readTime) &#123; long stamp = lock.tryOptimisticRead(); log.debug(&quot;optimistic read locking...&#123;&#125;&quot;, stamp); sleep(readTime); if (lock.validate(stamp)) &#123; log.debug(&quot;read finish...&#123;&#125;, data:&#123;&#125;&quot;, stamp, data); return data; &#125; // 锁升级 - 读锁 log.debug(&quot;updating to read lock... &#123;&#125;&quot;, stamp); try &#123; stamp = lock.readLock(); log.debug(&quot;read lock &#123;&#125;&quot;, stamp); sleep(readTime); log.debug(&quot;read finish...&#123;&#125;, data:&#123;&#125;&quot;, stamp, data); return data; &#125; finally &#123; log.debug(&quot;read unlock &#123;&#125;&quot;, stamp); lock.unlockRead(stamp); &#125; &#125; public void write(int newData) &#123; long stamp = lock.writeLock(); log.debug(&quot;write lock &#123;&#125;&quot;, stamp); try &#123; sleep(2); this.data = newData; &#125; finally &#123; log.debug(&quot;write unlock &#123;&#125;&quot;, stamp); lock.unlockWrite(stamp); &#125; &#125;&#125; 测试 读-读 可以优化 12345678910public static void main(String[] args) &#123; DataContainerStamped dataContainer = new DataContainerStamped(1); new Thread(() -&gt; &#123; dataContainer.read(1); &#125;, &quot;t1&quot;).start(); sleep(0.5); new Thread(() -&gt; &#123; dataContainer.read(0); &#125;, &quot;t2&quot;).start();&#125; 输出结果，可以看到实际没有加读锁 123415:58:50.217 c.DataContainerStamped [t1] - optimistic read locking...25615:58:50.717 c.DataContainerStamped [t2] - optimistic read locking...25615:58:50.717 c.DataContainerStamped [t2] - read finish...256, data:115:58:51.220 c.DataContainerStamped [t1] - read finish...256, data:1 测试 读-写 时优化读补加读锁 12345678910public static void main(String[] args) &#123; DataContainerStamped dataContainer = new DataContainerStamped(1); new Thread(() -&gt; &#123; dataContainer.read(1); &#125;, &quot;t1&quot;).start(); sleep(0.5); new Thread(() -&gt; &#123; dataContainer.write(100); &#125;, &quot;t2&quot;).start();&#125; 输出结果 123456715:57:00.219 c.DataContainerStamped [t1] - optimistic read locking...25615:57:00.717 c.DataContainerStamped [t2] - write lock 38415:57:01.225 c.DataContainerStamped [t1] - updating to read lock... 25615:57:02.719 c.DataContainerStamped [t2] - write unlock 38415:57:02.719 c.DataContainerStamped [t1] - read lock 51315:57:03.719 c.DataContainerStamped [t1] - read finish...513, data:100015:57:03.719 c.DataContainerStamped [t1] - read unlock 513 注意 StampedLock 不支持条件变量 StampedLock 不支持可重入 2.4 Semaphore基本使用[ˈsɛməˌfɔr] 信号量，用来限制能同时访问共享资源的线程上限 1234567891011121314151617181920212223public static void main(String[] args) &#123; // 1. 创建 semaphore 对象 Semaphore semaphore = new Semaphore(3); // 2. 10个线程同时运行 for (int i = 0; i &lt; 10; i++) &#123; new Thread(() -&gt; &#123; // 3. 获取许可 try &#123; semaphore.acquire(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; try &#123; log.debug(&quot;running...&quot;); sleep(1); log.debug(&quot;end...&quot;); &#125; finally &#123; // 4. 释放许可 semaphore.release(); &#125; &#125;).start(); &#125;&#125; 输出 123456789101112131415161718192007:35:15.485 c.TestSemaphore [Thread-2] - running...07:35:15.485 c.TestSemaphore [Thread-1] - running...07:35:15.485 c.TestSemaphore [Thread-0] - running...07:35:16.490 c.TestSemaphore [Thread-2] - end...07:35:16.490 c.TestSemaphore [Thread-0] - end...07:35:16.490 c.TestSemaphore [Thread-1] - end...07:35:16.490 c.TestSemaphore [Thread-3] - running...07:35:16.490 c.TestSemaphore [Thread-5] - running...07:35:16.490 c.TestSemaphore [Thread-4] - running...07:35:17.490 c.TestSemaphore [Thread-5] - end...07:35:17.490 c.TestSemaphore [Thread-4] - end...07:35:17.490 c.TestSemaphore [Thread-3] - end...07:35:17.490 c.TestSemaphore [Thread-6] - running...07:35:17.490 c.TestSemaphore [Thread-7] - running...07:35:17.490 c.TestSemaphore [Thread-9] - running...07:35:18.491 c.TestSemaphore [Thread-6] - end...07:35:18.491 c.TestSemaphore [Thread-7] - end...07:35:18.491 c.TestSemaphore [Thread-9] - end...07:35:18.491 c.TestSemaphore [Thread-8] - running...07:35:19.492 c.TestSemaphore [Thread-8] - end... 应用限制对共享资源的使用semaphore 实现 使用 Semaphore 限流，在访问高峰期时，让请求线程阻塞，高峰期过去再释放许可，当然它只适合限制单机线程数量，并且仅是限制线程数，而不是限制资源数（例如连接数，请对比 Tomcat LimitLatch 的实现） 用 Semaphore 实现简单连接池，对比『享元模式』下的实现（用wait notify），性能和可读性显然更好，注意下面的实现中线程数和数据库连接数是相等的 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Slf4j(topic = &quot;c.Pool&quot;)class Pool &#123; // 1. 连接池大小 private final int poolSize; // 2. 连接对象数组 private Connection[] connections; // 3. 连接状态数组 0 表示空闲， 1 表示繁忙 private AtomicIntegerArray states; private Semaphore semaphore; // 4. 构造方法初始化 public Pool(int poolSize) &#123; this.poolSize = poolSize; // 让许可数与资源数一致 this.semaphore = new Semaphore(poolSize); this.connections = new Connection[poolSize]; this.states = new AtomicIntegerArray(new int[poolSize]); for (int i = 0; i &lt; poolSize; i++) &#123; connections[i] = new MockConnection(&quot;连接&quot; + (i+1)); &#125; &#125; // 5. 借连接 public Connection borrow() &#123;// t1, t2, t3 // 获取许可 try &#123; semaphore.acquire(); // 没有许可的线程，在此等待 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; for (int i = 0; i &lt; poolSize; i++) &#123; // 获取空闲连接 if(states.get(i) == 0) &#123; if (states.compareAndSet(i, 0, 1)) &#123; log.debug(&quot;borrow &#123;&#125;&quot;, connections[i]); return connections[i]; &#125; &#125; &#125; // 不会执行到这里 return null; &#125; // 6. 归还连接 public void free(Connection conn) &#123; for (int i = 0; i &lt; poolSize; i++) &#123; if (connections[i] == conn) &#123; states.set(i, 0); log.debug(&quot;free &#123;&#125;&quot;, conn); semaphore.release(); break; &#125; &#125; &#125;&#125; 原理加锁解锁流程Semaphore 有点像一个停车场，permits 就好像停车位数量，当线程获得了 permits 就像是获得了停车位，然后停车场显示空余车位减 刚开始，permits（state）为 3，这时 5 个线程来获取资源 假设其中 Thread-1，Thread-2，Thread-4 cas 竞争成功，而 Thread-0 和 Thread-3 竞争失败，进入 AQS 队列 park 阻塞 这时 Thread-4 释放了 permits，状态如下 接下来 Thread-0 竞争成功，permits 再次设置为 0，设置自己为 head 节点，断开原来的 head 节点，unpark 接下来的 Thread-3 节点，但由于 permits 是 0，因此 Thread-3 在尝试不成功后再次进入 park 状态 被唤醒的节点会去唤醒它接下来的节点 队列中有些节点因为被用户中断而节点状态被设置为了1，中断后的节点自己会除去该节点（可中断模式） 被唤醒的节点，不会存在被用户中断的可能（取消还没完成，节点还没去除），因为唤醒 (release) 是找到离head最近的一个 状态为-1，被中断为1 的不会去唤醒(unpark) 源码分析1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192static final class NonfairSync extends Sync &#123; private static final long serialVersionUID = -2694183684443567898L; NonfairSync(int permits) &#123; // permits 即 state super(permits); &#125; // Semaphore 方法, 方便阅读, 放在此处 public void acquire() throws InterruptedException &#123; sync.acquireSharedInterruptibly(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final void acquireSharedInterruptibly(int arg) throws InterruptedException &#123; if (Thread.interrupted()) throw new InterruptedException(); if (tryAcquireShared(arg) &lt; 0) doAcquireSharedInterruptibly(arg); &#125; // 尝试获得共享锁 protected int tryAcquireShared(int acquires) &#123; return nonfairTryAcquireShared(acquires); &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 final int nonfairTryAcquireShared(int acquires) &#123; for (;;) &#123; int available = getState(); int remaining = available - acquires; if ( // 如果许可已经用完, 返回负数, 表示获取失败, 进入 doAcquireSharedInterruptibly remaining &lt; 0 || // 如果 cas 重试成功, 返回正数, 表示获取成功 compareAndSetState(available, remaining) ) &#123; return remaining; &#125; &#125; &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 private void doAcquireSharedInterruptibly(int arg) throws InterruptedException &#123; final Node node = addWaiter(Node.SHARED); boolean failed = true; try &#123; for (;;) &#123; final Node p = node.predecessor(); if (p == head) &#123; // 再次尝试获取许可 int r = tryAcquireShared(arg); if (r &gt;= 0) &#123; // 成功后本线程出队（AQS）, 所在 Node设置为 head // 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark // 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE // r 表示可用资源数, 为 0 则不会继续传播 setHeadAndPropagate(node, r); p.next = null; // help GC failed = false; return; &#125; &#125; // 不成功, 设置上一个节点 waitStatus = Node.SIGNAL, 下轮进入 park 阻塞 if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt()) throw new InterruptedException(); &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125; &#125; // Semaphore 方法, 方便阅读, 放在此处 public void release() &#123; sync.releaseShared(1); &#125; // AQS 继承过来的方法, 方便阅读, 放在此处 public final boolean releaseShared(int arg) &#123; if (tryReleaseShared(arg)) &#123; doReleaseShared(); return true; &#125; return false; &#125; // Sync 继承过来的方法, 方便阅读, 放在此处 protected final boolean tryReleaseShared(int releases) &#123; for (;;) &#123; int current = getState(); int next = current + releases; if (next &lt; current) // overflow throw new Error(&quot;Maximum permit count exceeded&quot;); if (compareAndSetState(current, next)) return true; &#125; &#125;&#125; 为什么要有 PROPAGATE早期有 bug releaseShared 方法 123456789public final boolean releaseShared(int arg) &#123; if (tryReleaseShared(arg)) &#123; Node h = head; if (h != null &amp;&amp; h.waitStatus != 0) unparkSuccessor(h); return true; &#125; return false;&#125; doAcquireShared 方法 12345678910111213141516171819202122232425262728private void doAcquireShared(int arg) &#123; final Node node = addWaiter(Node.SHARED); boolean failed = true; try &#123; boolean interrupted = false; for (;;) &#123; final Node p = node.predecessor(); if (p == head) &#123; int r = tryAcquireShared(arg); if (r &gt;= 0) &#123; // 这里会有空档 setHeadAndPropagate(node, r); p.next = null; // help GC if (interrupted) selfInterrupt(); failed = false; return; &#125; &#125; if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt()) interrupted = true; &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125;&#125; setHeadAndPropagate 方法 12345678910111213141516171819202122232425262728private void doAcquireShared(int arg) &#123; final Node node = addWaiter(Node.SHARED); boolean failed = true; try &#123; boolean interrupted = false; for (;;) &#123; final Node p = node.predecessor(); if (p == head) &#123; int r = tryAcquireShared(arg); if (r &gt;= 0) &#123; // 这里会有空档 setHeadAndPropagate(node, r); p.next = null; // help GC if (interrupted) selfInterrupt(); failed = false; return; &#125; &#125; if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt()) interrupted = true; &#125; &#125; finally &#123; if (failed) cancelAcquire(node); &#125;&#125; setHeadAndPropagate 方法 12345678910private void setHeadAndPropagate(Node node, int propagate) &#123; setHead(node); // 有空闲资源 if (propagate &gt; 0 &amp;&amp; node.waitStatus != 0) &#123; Node s = node.next; // 下一个 if (s == null || s.isShared()) unparkSuccessor(node); &#125;&#125; 假设存在某次循环中队列里排队的结点情况为 head(-1)-&gt;t1(-1)-&gt;t2(-1) 假设存在将要信号量释放的 T3 和 T4，释放顺序为先 T3 后 T4 (1) 正常流程 (2) 产生 bug 的情况 修复前版本执行流程(1) T3 调用 releaseShared(1)，直接调用了 unparkSuccessor(head)，head 的等待状态从 -1 变为 0 (2) T1 由于 T3 释放信号量被唤醒，调用 tryAcquireShared，假设返回值为 0（获取锁成功，但没有剩余资源量） (3) T4 调用 releaseShared(1)，此时 head.waitStatus 为 0（此时读到的 head 和 1 中为同一个head），不满足条件，因此不调用 unpark-Successor(head) (4) T1 获取信号量成功，调用 setHeadAndPropagate 时，因为不满足 propagate &gt; 0（2 的返回值也就是 propagate（剩余资源量）== 0），从而不会唤醒后继结点， T2 线程得不到唤醒 (3) bug 修复后123456789101112131415161718192021222324252627282930313233343536private void setHeadAndPropagate(Node node, int propagate) &#123; Node h = head; // Record old head for check below // 设置自己为 head setHead(node); // propagate 表示有共享资源（例如共享读锁或信号量） // 原 head waitStatus == Node.SIGNAL 或 Node.PROPAGATE // 现在 head waitStatus == Node.SIGNAL 或 Node.PROPAGATE if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0 || (h = head) == null || h.waitStatus &lt; 0) &#123; Node s = node.next; // 如果是最后一个节点或者是等待共享读锁的节点 if (s == null || s.isShared()) &#123; doReleaseShared(); &#125; &#125;&#125;private void doReleaseShared() &#123; // 如果 head.waitStatus == Node.SIGNAL ==&gt; 0 成功, 下一个节点 unpark // 如果 head.waitStatus == 0 ==&gt; Node.PROPAGATE for (;;) &#123; Node h = head; if (h != null &amp;&amp; h != tail) &#123; int ws = h.waitStatus; if (ws == Node.SIGNAL) &#123; if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0)) continue; // loop to recheck cases unparkSuccessor(h); &#125; else if (ws == 0 &amp;&amp; !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) continue; // loop on failed CAS &#125; if (h == head) // loop if head changed break; &#125;&#125; (1) T3 调用 releaseShared()，直接调用了 unparkSuccessor(head)，head 的等待状态从 -1 变为 0 (2) T1 由于 T3 释放信号量被唤醒，调用 tryAcquireShared，假设返回值为 0（获取锁成功，但没有剩余资源量） (3) T4 调用 releaseShared()，此时 head.waitStatus 为 0（此时读到的 head 和 1 中为同一个 head），调用 doReleaseShared() 将等待状态置为 *PROPAGATE***（-3） (4) T1 获取信号量成功，调用 setHeadAndPropagate 时，读到 h.waitStatus &lt; 0，从而调用 doReleaseShared() 唤醒 T2 2.5 CountdownLatch 用来进行线程同步协作，等待所有线程完成倒计时。 其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一 123456789101112131415161718192021222324public static void main(String[] args) throws InterruptedException &#123; CountDownLatch latch = new CountDownLatch(3); new Thread(() -&gt; &#123; log.debug(&quot;begin...&quot;); sleep(1); latch.countDown(); log.debug(&quot;end...&#123;&#125;&quot;, latch.getCount()); &#125;).start(); new Thread(() -&gt; &#123; log.debug(&quot;begin...&quot;); sleep(2); latch.countDown(); log.debug(&quot;end...&#123;&#125;&quot;, latch.getCount()); &#125;).start(); new Thread(() -&gt; &#123; log.debug(&quot;begin...&quot;); sleep(1.5); latch.countDown(); log.debug(&quot;end...&#123;&#125;&quot;, latch.getCount()); &#125;).start(); log.debug(&quot;waiting...&quot;); latch.await(); log.debug(&quot;wait end...&quot;);&#125; 输出 1234567818:44:00.778 c.TestCountDownLatch [main] - waiting...18:44:00.778 c.TestCountDownLatch [Thread-2] - begin...18:44:00.778 c.TestCountDownLatch [Thread-0] - begin...18:44:00.778 c.TestCountDownLatch [Thread-1] - begin...18:44:01.782 c.TestCountDownLatch [Thread-0] - end...218:44:02.283 c.TestCountDownLatch [Thread-2] - end...118:44:02.782 c.TestCountDownLatch [Thread-1] - end...018:44:02.782 c.TestCountDownLatch [main] - wait end... 可以配合线程池使用，改进如下 12345678910111213141516171819202122232425262728293031public static void main(String[] args) throws InterruptedException &#123; CountDownLatch latch = new CountDownLatch(3); ExecutorService service = Executors.newFixedThreadPool(4); service.submit(() -&gt; &#123; log.debug(&quot;begin...&quot;); sleep(1); latch.countDown(); log.debug(&quot;end...&#123;&#125;&quot;, latch.getCount()); &#125;); service.submit(() -&gt; &#123; log.debug(&quot;begin...&quot;); sleep(1.5); latch.countDown(); log.debug(&quot;end...&#123;&#125;&quot;, latch.getCount()); &#125;); service.submit(() -&gt; &#123; log.debug(&quot;begin...&quot;); sleep(2); latch.countDown(); log.debug(&quot;end...&#123;&#125;&quot;, latch.getCount()); &#125;); service.submit(()-&gt;&#123; try &#123; log.debug(&quot;waiting...&quot;); latch.await(); log.debug(&quot;wait end...&quot;); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;);&#125; 输出 1234567818:52:25.831 c.TestCountDownLatch [pool-1-thread-3] - begin...18:52:25.831 c.TestCountDownLatch [pool-1-thread-1] - begin...18:52:25.831 c.TestCountDownLatch [pool-1-thread-2] - begin...18:52:25.831 c.TestCountDownLatch [pool-1-thread-4] - waiting...18:52:26.835 c.TestCountDownLatch [pool-1-thread-1] - end...218:52:27.335 c.TestCountDownLatch [pool-1-thread-2] - end...118:52:27.835 c.TestCountDownLatch [pool-1-thread-3] - end...018:52:27.835 c.TestCountDownLatch [pool-1-thread-4] - wait end... 应用之同步等待多线程准备完毕123456789101112131415161718192021222324AtomicInteger num = new AtomicInteger(0);ExecutorService service = Executors.newFixedThreadPool(10, (r) -&gt; &#123; return new Thread(r, &quot;t&quot; + num.getAndIncrement());&#125;);CountDownLatch latch = new CountDownLatch(10);String[] all = new String[10];Random r = new Random();for (int j = 0; j &lt; 10; j++) &#123; int x = j; service.submit(() -&gt; &#123; for (int i = 0; i &lt;= 100; i++) &#123; try &#123; Thread.sleep(r.nextInt(100)); &#125; catch (InterruptedException e) &#123; &#125; all[x] = Thread.currentThread().getName() + &quot;(&quot; + (i + &quot;%&quot;) + &quot;)&quot;; System.out.print(&quot;\\r&quot; + Arrays.toString(all)); &#125; latch.countDown(); &#125;);&#125;latch.await();System.out.println(&quot;\\n游戏开始...&quot;);service.shutdown(); 中间输出 1[t0(52%), t1(47%), t2(51%), t3(40%), t4(49%), t5(44%), t6(49%), t7(52%), t8(46%), t9(46%)] 最后输出 123[t0(100%), t1(100%), t2(100%), t3(100%), t4(100%), t5(100%), t6(100%), t7(100%), t8(100%),t9(100%)]游戏开始... 应用之同步等待多个远程调用结束12345678910111213141516171819202122232425262728293031323334353637383940@RestControllerpublic class TestCountDownlatchController &#123; @GetMapping(&quot;/order/&#123;id&#125;&quot;) public Map&lt;String, Object&gt; order(@PathVariable int id) &#123; HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;id&quot;, id); map.put(&quot;total&quot;, &quot;2300.00&quot;); sleep(2000); return map; &#125; @GetMapping(&quot;/product/&#123;id&#125;&quot;) public Map&lt;String, Object&gt; product(@PathVariable int id) &#123; HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); if (id == 1) &#123; map.put(&quot;name&quot;, &quot;小爱音箱&quot;); map.put(&quot;price&quot;, 300); &#125; else if (id == 2) &#123; map.put(&quot;name&quot;, &quot;小米手机&quot;); map.put(&quot;price&quot;, 2000); &#125; map.put(&quot;id&quot;, id); sleep(1000); return map; &#125; @GetMapping(&quot;/logistics/&#123;id&#125;&quot;) public Map&lt;String, Object&gt; logistics(@PathVariable int id) &#123; HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;id&quot;, id); map.put(&quot;name&quot;, &quot;中通快递&quot;); sleep(2500); return map; &#125; private void sleep(int millis) &#123; try &#123; Thread.sleep(millis); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; rest 远程调用 123456789101112131415161718192021222324252627282930RestTemplate restTemplate = new RestTemplate();log.debug(&quot;begin&quot;);ExecutorService service = Executors.newCachedThreadPool();CountDownLatch latch = new CountDownLatch(4);Future&lt;Map&lt;String,Object&gt;&gt; f1 = service.submit(() -&gt; &#123; Map&lt;String, Object&gt; r = restTemplate.getForObject(&quot;http://localhost:8080/order/&#123;1&#125;&quot;, Map.class, 1); return r;&#125;);Future&lt;Map&lt;String, Object&gt;&gt; f2 = service.submit(() -&gt; &#123; Map&lt;String, Object&gt; r = restTemplate.getForObject(&quot;http://localhost:8080/product/&#123;1&#125;&quot;, Map.class, 1); return r;&#125;);Future&lt;Map&lt;String, Object&gt;&gt; f3 = service.submit(() -&gt; &#123; Map&lt;String, Object&gt; r = restTemplate.getForObject(&quot;http://localhost:8080/product/&#123;1&#125;&quot;, Map.class, 2); return r;&#125;);Future&lt;Map&lt;String, Object&gt;&gt; f4 = service.submit(() -&gt; &#123; Map&lt;String, Object&gt; r = restTemplate.getForObject(&quot;http://localhost:8080/logistics/&#123;1&#125;&quot;, Map.class, 1); return r;&#125;);System.out.println(f1.get());System.out.println(f2.get());System.out.println(f3.get());System.out.println(f4.get());log.debug(&quot;执行完毕&quot;);service.shutdown(); 执行结果 12345619:51:39.711 c.TestCountDownLatch [main] - begin&#123;total=2300.00, id=1&#125;&#123;price=300, name=小爱音箱, id=1&#125;&#123;price=2000, name=小米手机, id=2&#125;&#123;name=中通快递, id=1&#125;19:51:42.407 c.TestCountDownLatch [main] - 执行完毕 2.6 CydicBarrier[ˈsaɪklɪk ˈbæriɚ] 循环栅栏，用来进行线程协作，等待线程满足某个计数。构造时设置『计数个数』，每个线程执行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，继续执行 1234567891011121314151617181920CyclicBarrier cb = new CyclicBarrier(2); // 个数为2时才会继续执行new Thread(()-&gt;&#123; System.out.println(&quot;线程1开始..&quot;+new Date()); try &#123; cb.await(); // 当个数不足时，等待 &#125; catch (InterruptedException | BrokenBarrierException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程1继续向下运行...&quot;+new Date());&#125;).start();new Thread(()-&gt;&#123; System.out.println(&quot;线程2开始..&quot;+new Date()); try &#123; Thread.sleep(2000); &#125; catch (InterruptedException e) &#123; &#125; try &#123; cb.await(); // 2 秒后，线程个数够2，继续运行 &#125; catch (InterruptedException | BrokenBarrierException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程2继续向下运行...&quot;+new Date());&#125;).start(); 注意 CyclicBarrier 与 CountDownLatch 的主要区别在于 CyclicBarrier 是可以重用的 CyclicBarrier 可以被比喻为『人满发车』 2.7 线程安全集合类概述 线程安全集合类可以分为三大类： 遗留的线程安全集合如 Hashtable ， Vector 使用 Collections 装饰的线程安全集合，如： Collections.synchronizedCollection Collections.synchronizedList Collections.synchronizedMap Collections.synchronizedSet Collections.synchronizedNavigableMap Collections.synchronizedNavigableSet Collections.synchronizedSortedMap Collections.synchronizedSortedSet java.util.concurrent.*重点介绍 java.util.concurrent.* 下的线程安全集合类，可以发现它们有规律，里面包含三类关键词： Blocking、CopyOnWrite、Concurrent Blocking 大部分实现基于锁，并提供用来阻塞的方法 CopyOnWrite 之类容器修改开销相对较重 Concurrent 类型的容器 内部很多操作使用 cas 优化，一般可以提供较高吞吐量 弱一致性 遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历，这时内容是旧的 求大小弱一致性，size 操作未必是 100% 准确 读取弱一致性 遍历时如果发生了修改，对于非安全容器来讲，使用 fail-fast 机制也就是让遍历立刻失败，抛出ConcurrentModificationException，不再继续遍历 2.8 ConcurrentHashMap练习：单词计数生成测试数据 1234567891011121314151617181920212223static final String ALPHA = &quot;abcedfghijklmnopqrstuvwxyz&quot;;public static void main(String[] args) &#123; int length = ALPHA.length(); int count = 200; List&lt;String&gt; list = new ArrayList&lt;&gt;(length * count); for (int i = 0; i &lt; length; i++) &#123; char ch = ALPHA.charAt(i); for (int j = 0; j &lt; count; j++) &#123; list.add(String.valueOf(ch)); &#125; &#125; Collections.shuffle(list); for (int i = 0; i &lt; 26; i++) &#123; try (PrintWriter out = new PrintWriter( new OutputStreamWriter( new FileOutputStream(&quot;tmp/&quot; + (i+1) + &quot;.txt&quot;)))) &#123; String collect = list.subList(i * count, (i + 1) * count).stream() .collect(Collectors.joining(&quot;\\n&quot;)); out.print(collect); &#125; catch (IOException e) &#123; &#125; &#125;&#125; 模版代码，模版代码中封装了多线程读取文件的代码 1234567891011121314151617181920212223242526272829303132333435363738private static &lt;V&gt; void demo(Supplier&lt;Map&lt;String,V&gt;&gt; supplier, BiConsumer&lt;Map&lt;String,V&gt;,List&lt;String&gt;&gt; consumer) &#123; Map&lt;String, V&gt; counterMap = supplier.get(); List&lt;Thread&gt; ts = new ArrayList&lt;&gt;(); for (int i = 1; i &lt;= 26; i++) &#123; int idx = i; Thread thread = new Thread(() -&gt; &#123; List&lt;String&gt; words = readFromFile(idx); consumer.accept(counterMap, words); &#125;); ts.add(thread); &#125; ts.forEach(t-&gt;t.start()); ts.forEach(t-&gt; &#123; try &#123; t.join(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;); System.out.println(counterMap);&#125;public static List&lt;String&gt; readFromFile(int i) &#123; ArrayList&lt;String&gt; words = new ArrayList&lt;&gt;(); try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;tmp/&quot; + i +&quot;.txt&quot;)))) &#123; while(true) &#123; String word = in.readLine(); if(word == null) &#123; break; &#125; words.add(word); &#125; return words; &#125; catch (IOException e) &#123; throw new RuntimeException(e); &#125;&#125; 你要做的是实现两个参数 一是提供一个 map 集合，用来存放每个单词的计数结果，key 为单词，value 为计数 二是提供一组操作，保证计数的安全性，会传递 map 集合以及 单词 List 正确结果输出应该是每个单词出现 200 次 12&#123;a=200, b=200, c=200, d=200, e=200, f=200, g=200, h=200, i=200, j=200, k=200, l=200, m=200,n=200, o=200, p=200, q=200, r=200, s=200, t=200, u=200, v=200, w=200, x=200, y=200, z=200&#125; 下面的实现为： 12345678910111213demo( // 创建 map 集合 // 创建 ConcurrentHashMap 对不对？ () -&gt; new HashMap&lt;String, Integer&gt;(), // 进行计数 (map, words) -&gt; &#123; for (String word : words) &#123; Integer counter = map.get(word); int newValue = counter == null ? 1 : counter + 1; map.put(word, newValue); &#125; &#125;); 有没有问题？请改进 参考解答1 123456789demo( () -&gt; new ConcurrentHashMap&lt;String, LongAdder&gt;(), (map, words) -&gt; &#123; for (String word : words) &#123; // 注意不能使用 putIfAbsent，此方法返回的是上一次的 value，首次调用返回 null map.computeIfAbsent(word, (key) -&gt; new LongAdder()).increment(); &#125; &#125;); 参考解答2 123456789demo( () -&gt; new ConcurrentHashMap&lt;String, Integer&gt;(), (map, words) -&gt; &#123; for (String word : words) &#123; // 函数式编程，无需原子变量 map.merge(word, 1, Integer::sum); &#125; &#125;); ConcurrentHashMap 原理JDK 7 HashMap 并发死链(1) 测试代码注意 要在 JDK 7 下运行，否则扩容机制和 hash 的计算方法都变了 以下测试代码是精心准备的，不要随便改动 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public static void main(String[] args) &#123; // 测试 java 7 中哪些数字的 hash 结果相等 System.out.println(&quot;长度为16时，桶下标为1的key&quot;); for (int i = 0; i &lt; 64; i++) &#123; if (hash(i) % 16 == 1) &#123; System.out.println(i); &#125; &#125; System.out.println(&quot;长度为32时，桶下标为1的key&quot;); for (int i = 0; i &lt; 64; i++) &#123; if (hash(i) % 32 == 1) &#123; System.out.println(i); &#125; &#125; // 1, 35, 16, 50 当大小为16时，它们在一个桶内 final HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); // 放 12 个元素 map.put(2, null); map.put(3, null); map.put(4, null); map.put(5, null); map.put(6, null); map.put(7, null); map.put(8, null); map.put(9, null); map.put(10, null); map.put(16, null); map.put(35, null); map.put(1, null); System.out.println(&quot;扩容前大小[main]:&quot;+map.size()); new Thread() &#123; @Override public void run() &#123; // 放第 13 个元素, 发生扩容 map.put(50, null); System.out.println(&quot;扩容后大小[Thread-0]:&quot;+map.size()); &#125; &#125;.start(); new Thread() &#123; @Override public void run() &#123; // 放第 13 个元素, 发生扩容 map.put(50, null); System.out.println(&quot;扩容后大小[Thread-1]:&quot;+map.size()); &#125; &#125;.start();&#125;final static int hash(Object k) &#123; int h = 0; if (0 != h &amp;&amp; k instanceof String) &#123; return sun.misc.Hashing.stringHash32((String) k); &#125; h ^= k.hashCode(); h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12); return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);&#125; (2) 死锁复现调试工具使用 idea 在 HashMap 源码 590 行加断点 1int newCapacity = newTable.length; 断点的条件如下，目的是让 HashMap 在扩容为 32 时，并且线程为 Thread-0 或 Thread-1 时停下来 12345newTable.length==32 &amp;&amp; ( Thread.currentThread().getName().equals(&quot;Thread-0&quot;)|| Thread.currentThread().getName().equals(&quot;Thread-1&quot;)) 断点暂停方式选择 Thread，否则在调试 Thread-0 时，Thread-1 无法恢复运行 运行代码，程序在预料的断点位置停了下来，输出 123456789长度为16时，桶下标为1的key1163550长度为32时，桶下标为1的key135扩容前大小[main]:12 接下来进入扩容流程调试 在 HashMap 源码 594 行加断点 123Entry&lt;K,V&gt; next = e.next; // 593if (rehash) // 594 // ... 这是为了观察 e 节点和 next 节点的状态，Thread-0 单步执行到 594 行，再 594 处再添加一个断点（条件Thread.currentThread().getName().equals(“Thread-0”)） 这时可以在 Variables 面板观察到 e 和 next 变量，使用 view as -&gt; Object 查看节点状态 12e (1)-&gt;(35)-&gt;(16)-&gt;nullnext (35)-&gt;(16)-&gt;null 在 Threads 面板选中 Thread-1 恢复运行，可以看到控制台输出新的内容如下，Thread-1 扩容已完成 12newTable[1] (35)-&gt;(1)-&gt;null扩容后大小:13 这时 Thread-0 还停在 594 处， Variables 面板变量的状态已经变化为 12e (1)-&gt;nullnext (35)-&gt;(1)-&gt;null 为什么呢，因为 Thread-1 扩容时链表也是后加入的元素放入链表头，因此链表就倒过来了，但 Thread-1 虽然结果正确，但它结束后 Thread-0 还要继续运行 接下来就可以单步调试（F8）观察死链的产生了 下一轮循环到 594，将 e 搬迁到 newTable 链表头 123newTable[1] (1)-&gt;nulle (35)-&gt;(1)-&gt;nullnext (1)-&gt;null 下一轮循环到 594，将 e 搬迁到 newTable 链表头 123newTable[1] (35)-&gt;(1)-&gt;nulle (1)-&gt;nullnext null 再看看源码 1234567e.next = newTable[1];// 这时 e (1,35)// 而 newTable[1] (35,1)-&gt;(1,35) 因为是同一个对象newTable[1] = e;// 再尝试将 e 作为链表头, 死链已成e = next;// 虽然 next 是 null, 会进入下一个链表的复制, 但死链已经形成了 (3) 源码分析HashMap 的并发死链发生在扩容时 12345678910111213141516171819// 将 table 迁移至 newTablevoid transfer(Entry[] newTable, boolean rehash) &#123; int newCapacity = newTable.length; for (Entry&lt;K,V&gt; e : table) &#123; while(null != e) &#123; Entry&lt;K,V&gt; next = e.next; // 1 处 if (rehash) &#123; e.hash = null == e.key ? 0 : hash(e.key); &#125; int i = indexFor(e.hash, newCapacity); // 2 处 // 将新元素加入 newTable[i], 原 newTable[i] 作为新元素的 next e.next = newTable[i]; newTable[i] = e; e = next; &#125; &#125;&#125; 假设 map 中初始元素是 1234567891011121314151617181920原始链表，格式：[下标] (key,next)[1] (1,35)-&gt;(35,16)-&gt;(16,null)线程 a 执行到 1 处 ，此时局部变量 e 为 (1,35)，而局部变量 next 为 (35,16) 线程 a 挂起线程 b 开始执行第一次循环[1] (1,null)第二次循环[1] (35,1)-&gt;(1,null)第三次循环[1] (35,1)-&gt;(1,null)[17] (16,null)切换回线程 a，此时局部变量 e 和 next 被恢复，引用没变但内容变了：e 的内容被改为 (1,null)，而 next 的内容被改为 (35,1) 并链向 (1,null)第一次循环[1] (1,null)第二次循环，注意这时 e 是 (35,1) 并链向 (1,null) 所以 next 又是 (1,null)[1] (35,1)-&gt;(1,null)第三次循环，e 是 (1,null)，而 next 是 null，但 e 被放入链表头，这样 e.next 变成了 35 （2 处）[1] (1,35)-&gt;(35,1)-&gt;(1,35)已经是死链了 (4) 小结 究其原因，是因为在多线程环境下使用了非线程安全的 map 集合 JDK 8 虽然将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），但仍不意味着能够在多线程环境下能够安全扩容，还会出现其它问题（如扩容丢数据） JDK 8 ConcurrentHashMap(1) 重要属性和内部类12345678910111213141516171819// 默认为 0// 当初始化时, 为 -1// 当扩容时, 为 -(1 + 扩容线程数)// 当初始化或扩容完成后，为 下一次的扩容的阈值大小private transient volatile int sizeCtl;// 整个 ConcurrentHashMap 就是一个 Node[]static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;&#125;// hash 表transient volatile Node&lt;K,V&gt;[] table;// 扩容时的 新 hash 表private transient volatile Node&lt;K,V&gt;[] nextTable;// 扩容时如果某个 bin 迁移完毕, 用 ForwardingNode 作为旧 table bin 的头结点static final class ForwardingNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;&#125;// 用在 compute 以及 computeIfAbsent 时, 用来占位, 计算完成后替换为普通 Nodestatic final class ReservationNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;&#125;// 作为 treebin 的头节点, 存储 root 和 firststatic final class TreeBin&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;&#125;// 作为 treebin 的节点, 存储 parent, left, rightstatic final class TreeNode&lt;K,V&gt; extends Node&lt;K,V&gt; &#123;&#125; (2) 重要方法123456// 获取 Node[] 中第 i 个 Nodestatic final &lt;K,V&gt; Node&lt;K,V&gt; tabAt(Node&lt;K,V&gt;[] tab, int i)// cas 修改 Node[] 中第 i 个 Node 的值, c 为旧值, v 为新值static final &lt;K,V&gt; boolean casTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)// 直接修改 Node[] 中第 i 个 Node 的值, v 为新值static final &lt;K,V&gt; void setTabAt(Node&lt;K,V&gt;[] tab, int i, Node&lt;K,V&gt; v) (3) 构造器分析可以看到实现了懒惰初始化，在构造方法中仅仅计算了 table 的大小，以后在第一次使用时才会真正创建 1234567891011public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) &#123; if (!(loadFactor &gt; 0.0f) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0) throw new IllegalArgumentException(); if (initialCapacity &lt; concurrencyLevel) // Use at least as many bins initialCapacity = concurrencyLevel; // as estimated threads long size = (long)(1.0 + (long)initialCapacity / loadFactor); // tableSizeFor 仍然是保证计算的大小是 2^n, 即 16,32,64 ... int cap = (size &gt;= (long)MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : tableSizeFor((int)size); this.sizeCtl = cap;&#125; (4) get流程1234567891011121314151617181920212223public V get(Object key) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek; // spread 方法能确保返回结果是正数 int h = spread(key.hashCode()); if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123; // 如果头结点已经是要查找的 key if ((eh = e.hash) == h) &#123; if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))) return e.val; &#125; // hash 为负数表示该 bin 在扩容中或是 treebin, 这时调用 find 方法来查找 else if (eh &lt; 0) return (p = e.find(h, key)) != null ? p.val : null; // 正常遍历链表, 用 equals 比较 while ((e = e.next) != null) &#123; if (e.hash == h &amp;&amp; ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))) return e.val; &#125; &#125; return null;&#125; (5) put流程以下数组简称（table），链表简称（bin） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161public V put(K key, V value) &#123; return putVal(key, value, false);&#125;final V putVal(K key, V value, boolean onlyIfAbsent) &#123; if (key == null || value == null) throw new NullPointerException(); // 其中 spread 方法会综合高位低位, 具有更好的 hash 性 int hash = spread(key.hashCode()); int binCount = 0; for (Node&lt;K,V&gt;[] tab = table;;) &#123; // f 是链表头节点 // fh 是链表头结点的 hash // i 是链表在 table 中的下标 Node&lt;K,V&gt; f; int n, i, fh; // 要创建 table if (tab == null || (n = tab.length) == 0) // 初始化 table 使用了 cas, 无需 synchronized 创建成功, 进入下一轮循环 tab = initTable(); // 要创建链表头节点 else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123; // 添加链表头使用了 cas, 无需 synchronized if (casTabAt(tab, i, null, new Node&lt;K,V&gt;(hash, key, value, null))) break; &#125; // 帮忙扩容 else if ((fh = f.hash) == MOVED) // 帮忙之后, 进入下一轮循环 tab = helpTransfer(tab, f); else &#123; V oldVal = null; // 锁住链表头节点 synchronized (f) &#123; // 再次确认链表头节点没有被移动 if (tabAt(tab, i) == f) &#123; // 链表 if (fh &gt;= 0) &#123; binCount = 1; // 遍历链表 for (Node&lt;K,V&gt; e = f;; ++binCount) &#123; K ek; // 找到相同的 key if (e.hash == hash &amp;&amp; ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))) &#123; oldVal = e.val; // 更新 if (!onlyIfAbsent) e.val = value; break; &#125; Node&lt;K,V&gt; pred = e; // 已经是最后的节点了, 新增 Node, 追加至链表尾 if ((e = e.next) == null) &#123; pred.next = new Node&lt;K,V&gt;(hash, key, value, null); break; &#125; &#125; &#125; // 红黑树 else if (f instanceof TreeBin) &#123; Node&lt;K,V&gt; p; binCount = 2; // putTreeVal 会看 key 是否已经在树中, 是, 则返回对应的 TreeNode if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key, value)) != null) &#123; oldVal = p.val; if (!onlyIfAbsent) p.val = value; &#125; &#125; &#125; // 释放链表头节点的锁 &#125; if (binCount != 0) &#123; if (binCount &gt;= TREEIFY_THRESHOLD) // 如果链表长度 &gt;= 树化阈值(8), 进行链表转为红黑树 treeifyBin(tab, i); if (oldVal != null) return oldVal; break; &#125; &#125; &#125; // 增加 size 计数 addCount(1L, binCount); return null;&#125;private final Node&lt;K,V&gt;[] initTable() &#123; Node&lt;K,V&gt;[] tab; int sc; while ((tab = table) == null || tab.length == 0) &#123; if ((sc = sizeCtl) &lt; 0) Thread.yield(); // 尝试将 sizeCtl 设置为 -1（表示初始化 table） else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123; // 获得锁, 创建 table, 这时其它线程会在 while() 循环中 yield 直至 table 创建 try &#123; if ((tab = table) == null || tab.length == 0) &#123; int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY; Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n]; table = tab = nt; sc = n - (n &gt;&gt;&gt; 2); &#125; &#125; finally &#123; sizeCtl = sc; &#125; break; &#125; &#125; return tab;&#125;// check 是之前 binCount 的个数private final void addCount(long x, int check) &#123; CounterCell[] as; long b, s; if ( // 已经有了 counterCells, 向 cell 累加 (as = counterCells) != null || // 还没有, 向 baseCount 累加 !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x) ) &#123; CounterCell a; long v; int m; boolean uncontended = true; if ( // 还没有 counterCells as == null || (m = as.length - 1) &lt; 0 || // 还没有 cell (a = as[ThreadLocalRandom.getProbe() &amp; m]) == null || // cell cas 增加计数失败 !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x)) ) &#123; // 创建累加单元数组和cell, 累加重试 fullAddCount(x, uncontended); return; &#125; if (check &lt;= 1) return; // 获取元素个数 s = sumCount(); &#125; if (check &gt;= 0) &#123; Node&lt;K,V&gt;[] tab, nt; int n, sc; while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp; (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123; int rs = resizeStamp(n); if (sc &lt; 0) &#123; if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex &lt;= 0) break; // newtable 已经创建了，帮忙扩容 if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) transfer(tab, nt); &#125; // 需要扩容，这时 newtable 未创建 else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)) transfer(tab, null); s = sumCount(); &#125; &#125;&#125; (6) size 计算流程size 计算实际发生在 put，remove 改变集合元素的操作之中 没有竞争发生，向 baseCount 累加计数 有竞争发生，新建 counterCells，向其中的一个 cell 累加计数 counterCells 初始有两个 cell 如果计数竞争比较激烈，会创建新的 cell 来累加计数 123456789101112131415161718public int size() &#123; long n = sumCount(); return ((n &lt; 0L) ? 0 : (n &gt; (long)Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)n);&#125;final long sumCount() &#123; CounterCell[] as = counterCells; CounterCell a; // 将 baseCount 计数与所有 cell 计数累加 long sum = baseCount; if (as != null) &#123; for (int i = 0; i &lt; as.length; ++i) &#123; if ((a = as[i]) != null) sum += a.value; &#125; &#125; return sum;&#125; Java 8 数组（Node） +（ 链表 Node | 红黑树 TreeNode ） 以下数组简称（table），链表简称（bin） 初始化，使用 cas 来保证并发安全，懒惰初始化 table 树化，当 table.length &lt; 64 时，先尝试扩容，超过 64 时，并且 bin.length &gt; 8 时，会将链表树化，树化过程会用 synchronized 锁住链表头 put，如果该 bin 尚未创建，只需要使用 cas 创建 bin；如果已经有了，锁住链表头进行后续 put 操作，元素添加至 bin 的尾部 get，无锁操作仅需要保证可见性，扩容过程中 get 操作拿到的是 ForwardingNode 它会让 get 操作在新table 进行搜索 扩容，扩容时以 bin 为单位进行，需要对 bin 进行 synchronized，但这时妙的是其它竞争线程也不是无事可做，它们会帮助把其它 bin 进行扩容，扩容时平均只有 1/6 的节点会把复制到新 table 中 size，元素个数保存在 baseCount 中，并发时的个数变动保存在 CounterCell[] 当中。最后统计数量时累加即可 源码分析 http://www.importnew.com/28263.html 其它实现 Cliff Click’s high scale lib JDK 7 ConcurrentHashMap它维护了一个 segment 数组，每个 segment 对应一把锁 优点：如果多个线程访问不同的 segment，实际是没有冲突的，这与 jdk8 中是类似的 缺点：Segments 数组默认大小为16，这个容量初始化指定后就不能改变了，并且不是懒惰初始化 (1) 构造器分析1234567891011121314151617181920212223242526272829303132public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) &#123; if (!(loadFactor &gt; 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0) throw new IllegalArgumentException(); if (concurrencyLevel &gt; MAX_SEGMENTS) concurrencyLevel = MAX_SEGMENTS; // ssize 必须是 2^n, 即 2, 4, 8, 16 ... 表示了 segments 数组的大小 int sshift = 0; int ssize = 1; while (ssize &lt; concurrencyLevel) &#123; ++sshift; ssize &lt;&lt;= 1; &#125; // segmentShift 默认是 32 - 4 = 28 this.segmentShift = 32 - sshift; // segmentMask 默认是 15 即 0000 0000 0000 1111 this.segmentMask = ssize - 1; if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; int c = initialCapacity / ssize; if (c * ssize &lt; initialCapacity) ++c; int cap = MIN_SEGMENT_TABLE_CAPACITY; while (cap &lt; c) cap &lt;&lt;= 1; // 创建 segments and segments[0] Segment&lt;K,V&gt; s0 = new Segment&lt;K,V&gt;(loadFactor, (int)(cap * loadFactor), (HashEntry&lt;K,V&gt;[])new HashEntry[cap]); Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])new Segment[ssize]; UNSAFE.putOrderedObject(ss, SBASE, s0); // ordered write of segments[0] this.segments = ss;&#125; 构造完成，如下图所示 可以看到 ConcurrentHashMap 没有实现懒惰初始化，空间占用不友好 其中 this.segmentShift 和 this.segmentMask 的作用是决定将 key 的 hash 结果匹配到哪个 segment 例如，根据某一 hash 值求 segment 位置，先将高位向低位移动 this.segmentShift 位 (2) put流程1234567891011121314151617public V put(K key, V value) &#123; Segment&lt;K,V&gt; s; if (value == null) throw new NullPointerException(); int hash = hash(key); // 计算出 segment 下标 int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask; // 获得 segment 对象, 判断是否为 null, 是则创建该 segment if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) &#123; // 这时不能确定是否真的为 null, 因为其它线程也发现该 segment 为 null, // 因此在 ensureSegment 里用 cas 方式保证该 segment 安全性 s = ensureSegment(j); &#125; // 进入 segment 的put 流程 return s.put(key, hash, value, false);&#125; segment 继承了可重入锁（ReentrantLock），它的 put 方法为 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123; // 尝试加锁 HashEntry&lt;K,V&gt; node = tryLock() ? null : // 如果不成功, 进入 scanAndLockForPut 流程 // 如果是多核 cpu 最多 tryLock 64 次, 进入 lock 流程 // 在尝试期间, 还可以顺便看该节点在链表中有没有, 如果没有顺便创建出来 scanAndLockForPut(key, hash, value); // 执行到这里 segment 已经被成功加锁, 可以安全执行 V oldValue; try &#123; HashEntry&lt;K,V&gt;[] tab = table; int index = (tab.length - 1) &amp; hash; HashEntry&lt;K,V&gt; first = entryAt(tab, index); for (HashEntry&lt;K,V&gt; e = first;;) &#123; if (e != null) &#123; // 更新 K k; if ((k = e.key) == key || (e.hash == hash &amp;&amp; key.equals(k))) &#123; oldValue = e.value; if (!onlyIfAbsent) &#123; e.value = value; ++modCount; &#125; break; &#125; e = e.next; &#125; else &#123; // 新增 // 1) 之前等待锁时, node 已经被创建, next 指向链表头 if (node != null) node.setNext(first); else // 2) 创建新 node node = new HashEntry&lt;K,V&gt;(hash, key, value, first); int c = count + 1; // 3) 扩容 if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY) rehash(node); else // 将 node 作为链表头 setEntryAt(tab, index, node); ++modCount; count = c; oldValue = null; break; &#125; &#125; &#125; finally &#123; unlock(); &#125; return oldValue;&#125; (3) rehash流程发生在 put 中，因为此时已经获得了锁，因此 rehash 时不需要考虑线程安全 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647private void rehash(HashEntry&lt;K,V&gt; node) &#123; HashEntry&lt;K,V&gt;[] oldTable = table; int oldCapacity = oldTable.length; int newCapacity = oldCapacity &lt;&lt; 1; threshold = (int)(newCapacity * loadFactor); HashEntry&lt;K,V&gt;[] newTable = (HashEntry&lt;K,V&gt;[]) new HashEntry[newCapacity]; int sizeMask = newCapacity - 1; for (int i = 0; i &lt; oldCapacity ; i++) &#123; HashEntry&lt;K,V&gt; e = oldTable[i]; if (e != null) &#123; HashEntry&lt;K,V&gt; next = e.next; int idx = e.hash &amp; sizeMask; if (next == null) // Single node on list newTable[idx] = e; else &#123; // Reuse consecutive sequence at same slot HashEntry&lt;K,V&gt; lastRun = e; int lastIdx = idx; // 过一遍链表, 尽可能把 rehash 后 idx 不变的节点重用 for (HashEntry&lt;K,V&gt; last = next; last != null; last = last.next) &#123; int k = last.hash &amp; sizeMask; if (k != lastIdx) &#123; lastIdx = k; lastRun = last; &#125; &#125; newTable[lastIdx] = lastRun; // 剩余节点需要新建 for (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123; V v = p.value; int h = p.hash; int k = h &amp; sizeMask; HashEntry&lt;K,V&gt; n = newTable[k]; newTable[k] = new HashEntry&lt;K,V&gt;(h, p.key, v, n); &#125; &#125; &#125; &#125; // 扩容完成, 才加入新的节点 int nodeIndex = node.hash &amp; sizeMask; // add the new node node.setNext(newTable[nodeIndex]); newTable[nodeIndex] = node; // 替换为新的 HashEntry table table = newTable;&#125; 附，调试代码 12345678910111213141516171819202122232425262728293031323334353637public static void main(String[] args) &#123; ConcurrentHashMap&lt;Integer, String&gt; map = new ConcurrentHashMap&lt;&gt;(); for (int i = 0; i &lt; 1000; i++) &#123; int hash = hash(i); int segmentIndex = (hash &gt;&gt;&gt; 28) &amp; 15; if (segmentIndex == 4 &amp;&amp; hash % 8 == 2) &#123; System.out.println(i + &quot;\\t&quot; + segmentIndex + &quot;\\t&quot; + hash % 2 + &quot;\\t&quot; + hash % 4 + &quot;\\t&quot; + hash % 8); &#125; &#125; map.put(1, &quot;value&quot;); map.put(15, &quot;value&quot;); // 2 扩容为 4 15 的 hash%8 与其他不同 map.put(169, &quot;value&quot;); map.put(197, &quot;value&quot;); // 4 扩容为 8 map.put(341, &quot;value&quot;); map.put(484, &quot;value&quot;); map.put(545, &quot;value&quot;); // 8 扩容为 16 map.put(912, &quot;value&quot;); map.put(941, &quot;value&quot;); System.out.println(&quot;ok&quot;);&#125;private static int hash(Object k) &#123; int h = 0; if ((0 != h) &amp;&amp; (k instanceof String)) &#123; return sun.misc.Hashing.stringHash32((String) k); &#125; h ^= k.hashCode(); // Spread bits to regularize both segment and index locations, // using variant of single-word Wang/Jenkins hash. h += (h &lt;&lt; 15) ^ 0xffffcd7d; h ^= (h &gt;&gt;&gt; 10); h += (h &lt;&lt; 3); h ^= (h &gt;&gt;&gt; 6); h += (h &lt;&lt; 2) + (h &lt;&lt; 14); int v = h ^ (h &gt;&gt;&gt; 16); return v;&#125; (4) get流程get 时并未加锁，用了 UNSAFE 方法保证了可见性，扩容过程中，get 先发生就从旧表取内容，get 后发生就从新表取内容 12345678910111213141516171819public V get(Object key) &#123; Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead HashEntry&lt;K,V&gt;[] tab; int h = hash(key); // u 为 segment 对象在数组中的偏移量 long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE; // s 即为 segment if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp; (tab = s.table) != null) &#123; for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE); e != null; e = e.next) &#123; K k; if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k))) return e.value; &#125; &#125; return null;&#125; (5) size 计算流程 计算元素个数前，先不加锁计算两次，如果前后两次结果如一样，认为个数正确返回 如果不一样，进行重试，重试次数超过 3，将所有 segment 锁住，重新计算个数返回 12345678910111213141516171819202122232425262728293031323334353637383940public int size() &#123; // Try a few times to get accurate count. On failure due to // continuous async changes in table, resort to locking. final Segment&lt;K,V&gt;[] segments = this.segments; int size; boolean overflow; // true if size overflows 32 bits long sum; // sum of modCounts long last = 0L; // previous sum int retries = -1; // first iteration isn&#x27;t retry try &#123; for (;;) &#123; if (retries++ == RETRIES_BEFORE_LOCK) &#123; // 超过重试次数, 需要创建所有 segment 并加锁 for (int j = 0; j &lt; segments.length; ++j) ensureSegment(j).lock(); // force creation &#125; sum = 0L; size = 0; overflow = false; for (int j = 0; j &lt; segments.length; ++j) &#123; Segment&lt;K,V&gt; seg = segmentAt(segments, j); if (seg != null) &#123; sum += seg.modCount; int c = seg.count; if (c &lt; 0 || (size += c) &lt; 0) overflow = true; &#125; &#125; if (sum == last) break; last = sum; &#125; &#125; finally &#123; if (retries &gt; RETRIES_BEFORE_LOCK) &#123; for (int j = 0; j &lt; segments.length; ++j) segmentAt(segments, j).unlock(); &#125; &#125; return overflow ? Integer.MAX_VALUE : size;&#125; 2.9 BlockingQueue基本的入队出队1234567891011121314public class LinkedBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt; implements BlockingQueue&lt;E&gt;, java.io.Serializable &#123; static class Node&lt;E&gt; &#123; E item; /*** 下列三种情况之一* - 真正的后继节点* - 自己, 发生在出队时* - null, 表示是没有后继节点, 是最后了*/ Node&lt;E&gt; next; Node(E x) &#123; item = x; &#125; &#125;&#125; 初始化链表 last = head = new Node&lt;E&gt;(null); Dummy 节点用来占位，item 为 null 当一个节点入队 `last = last.next = node; 再来一个节点入队 last = last.next = node; 出队 123456Node&lt;E&gt; h = head;Node&lt;E&gt; first = h.next;h.next = h; // help GCE x = first.item;first.item = null;return x; h = head first = h.next h.next = h head = first 123E x = first.item;first.item = null;return x; 加锁分析==高明之处==在于用了两把锁和 dummy 节点 用一把锁，同一时刻，最多只允许有一个线程（生产者或消费者，二选一）执行 用两把锁，同一时刻，可以允许两个线程同时（一个生产者与一个消费者）执行 消费者与消费者线程仍然串行 生产者与生产者线程仍然串行 线程安全分析 当节点总数大于 2 时（包括 dummy 节点），putLock 保证的是 last 节点的线程安全，takeLock 保证的是 head 节点的线程安全。两把锁保证了入队和出队没有竞争 当节点总数等于 2 时（即一个 dummy 节点，一个正常节点）这时候，仍然是两把锁锁两个对象，不会竞争 当节点总数等于 1 时（就一个 dummy 节点）这时 take 线程会被 notEmpty 条件阻塞，有竞争，会阻塞 1234// 用于 put(阻塞) offer(非阻塞)private final ReentrantLock putLock = new ReentrantLock();// 用户 take(阻塞) poll(非阻塞)private final ReentrantLock takeLock = new ReentrantLock(); put 操作 12345678910111213141516171819202122232425262728public void put(E e) throws InterruptedException &#123; if (e == null) throw new NullPointerException(); int c = -1; Node&lt;E&gt; node = new Node&lt;E&gt;(e); final ReentrantLock putLock = this.putLock; // count 用来维护元素计数 final AtomicInteger count = this.count; putLock.lockInterruptibly(); try &#123; // 满了等待 while (count.get() == capacity) &#123; // 倒过来读就好: 等待 notFull notFull.await(); &#125; // 有空位, 入队且计数加一 enqueue(node); c = count.getAndIncrement(); // 除了自己 put 以外, 队列还有空位, 由自己叫醒其他 put 线程 if (c + 1 &lt; capacity) notFull.signal(); &#125; finally &#123; putLock.unlock(); &#125; // 如果队列中有一个元素, 叫醒 take 线程 if (c == 0) // 这里调用的是 notEmpty.signal() 而不是 notEmpty.signalAll() 是为了减少竞争 signalNotEmpty();&#125; take 操作 123456789101112131415161718192021222324public E take() throws InterruptedException &#123; E x; int c = -1; final AtomicInteger count = this.count; final ReentrantLock takeLock = this.takeLock; takeLock.lockInterruptibly(); try &#123; while (count.get() == 0) &#123; notEmpty.await(); &#125; x = dequeue(); c = count.getAndDecrement(); if (c &gt; 1) notEmpty.signal(); &#125; finally &#123; takeLock.unlock(); &#125; // 如果队列中只有一个空位时, 叫醒 put 线程 // 如果有多个线程进行出队, 第一个线程满足 c == capacity, 但后续线程 c &lt; capacity if (c == capacity) // 这里调用的是 notFull.signal() 而不是 notFull.signalAll() 是为了减少竞争 signalNotFull(); return x;&#125; 由 put 唤醒 put 是为了避免信号不足 性能比较主要列举 LinkedBlockingQueue 与 ArrayBlockingQueue 的性能比较 Linked 支持有界，Array 强制有界 Linked 实现是链表，Array 实现是数组 Linked 是懒惰的，而 Array 需要提前初始化 Node 数组 Linked 每次入队会生成新 Node，而 Array 的 Node 是提前创建好的 Linked 两把锁，Array 一把锁 2.10 ConcurrentLinkQueueConcurrentLinkedQueue 的设计与 LinkedBlockingQueue 非常像，也是 两把【锁】，同一时刻，可以允许两个线程同时（一个生产者与一个消费者）执行 dummy 节点的引入让两把【锁】将来锁住的是不同对象，避免竞争 只是这【锁】使用了 cas 来实现 事实上，ConcurrentLinkedQueue 应用还是非常广泛的 例如之前讲的 Tomcat 的 Connector 结构时，Acceptor 作为生产者向 Poller 消费者传递事件信息时，正是采用了 ConcurrentLinkedQueue 将 SocketChannel 给 Poller 使用 模仿 ConcurrentLinkedQueue初始代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122package cn.itcast.concurrent.thirdpart.test;import java.util.Collection;import java.util.Iterator;import java.util.Queue;import java.util.concurrent.atomic.AtomicReference;public class Test3 &#123; public static void main(String[] args) &#123; MyQueue&lt;String&gt; queue = new MyQueue&lt;&gt;(); queue.offer(&quot;1&quot;); queue.offer(&quot;2&quot;); queue.offer(&quot;3&quot;); System.out.println(queue); &#125;&#125;class MyQueue&lt;E&gt; implements Queue&lt;E&gt; &#123; @Override public String toString() &#123; StringBuilder sb = new StringBuilder(); for (Node&lt;E&gt; p = head; p != null; p = p.next.get()) &#123; E item = p.item; if (item != null) &#123; sb.append(item).append(&quot;-&gt;&quot;); &#125; &#125; sb.append(&quot;null&quot;); return sb.toString(); &#125; @Override public int size() &#123; return 0; &#125; @Override public boolean isEmpty() &#123; return false; &#125; @Override public boolean contains(Object o) &#123; return false; &#125; @Override public Iterator&lt;E&gt; iterator() &#123; return null; &#125; @Override public Object[] toArray() &#123; return new Object[0]; &#125; @Override public &lt;T&gt; T[] toArray(T[] a) &#123; return null; &#125; @Override public boolean add(E e) &#123; return false; &#125; @Override public boolean remove(Object o) &#123; return false; &#125; @Override public boolean containsAll(Collection&lt;?&gt; c) &#123; return false; &#125; @Override public boolean addAll(Collection&lt;? extends E&gt; c) &#123; return false; &#125; @Override public boolean removeAll(Collection&lt;?&gt; c) &#123; return false; &#125; @Override public boolean retainAll(Collection&lt;?&gt; c) &#123; return false; &#125; @Override public void clear() &#123; &#125; @Override public E remove() &#123; return null; &#125; @Override public E element() &#123; return null; &#125; @Override public E peek() &#123; return null; &#125; public MyQueue() &#123; head = last = new Node&lt;&gt;(null, null); &#125; private volatile Node&lt;E&gt; last; private volatile Node&lt;E&gt; head; private E dequeue() &#123; /*Node&lt;E&gt; h = head; Node&lt;E&gt; first = h.next; h.next = h; head = first; E x = first.item; first.item = null; return x;*/ return null; &#125; @Override public E poll() &#123; return null; &#125; @Override public boolean offer(E e) &#123; return true; &#125; static class Node&lt;E&gt; &#123; volatile E item; public Node(E item, Node&lt;E&gt; next) &#123; this.item = item; this.next = new AtomicReference&lt;&gt;(next); &#125; AtomicReference&lt;Node&lt;E&gt;&gt; next; &#125;&#125; offer 1234567891011121314public boolean offer(E e) &#123; Node&lt;E&gt; n = new Node&lt;&gt;(e, null); while(true) &#123; // 获取尾节点 AtomicReference&lt;Node&lt;E&gt;&gt; next = last.next; // S1: 真正尾节点的 next 是 null, cas 从 null 到新节点 if(next.compareAndSet(null, n)) &#123; // 这时的 last 已经是倒数第二, next 不为空了, 其它线程的 cas 肯定失败 // S2: 更新 last 为倒数第一的节点 last = n; return true; &#125; &#125;&#125; 2.11 CopyOnWriteArrayListCopyOnWriteArraySet 是它的马甲 底层实现采用了 写入时拷贝 的思想，增删改操作会将底层数组拷贝一份，更改操作在新数组上执行，这时不影响其它线程的并发读，读写分离。 以新增为例： 1234567891011121314public boolean add(E e) &#123; synchronized (lock) &#123; // 获取旧的数组 Object[] es = getArray(); int len = es.length; // 拷贝新的数组（这里是比较耗时的操作，但不影响其它读线程） es = Arrays.copyOf(es, len + 1); // 添加新元素 es[len] = e; // 替换旧的数组 setArray(es); return true; &#125;&#125; 这里的源码版本是 Java 11，在 Java 1.8 中使用的是可重入锁而不是 synchronized 其它读操作并未加锁，例如： get 弱一致性 时间点 操作 1 Thread-0 getArray() 2 Thread-1 getArray() 3 Thread-1 setArray(arrayCopy) 4 Thread-0 array[index] 不容易测试，但问题确实存在 迭代器弱一致性12345678910111213CopyOnWriteArrayList&lt;Integer&gt; list = new CopyOnWriteArrayList&lt;&gt;();list.add(1);list.add(2);list.add(3);Iterator&lt;Integer&gt; iter = list.iterator();new Thread(() -&gt; &#123; list.remove(0); System.out.println(list);&#125;).start();sleep1s();while (iter.hasNext()) &#123; System.out.println(iter.next());&#125; 不要觉得弱一致性就不好 数据库的 MVCC 都是弱一致性的表现 并发高和一致性是矛盾的，需要权衡","categories":[],"tags":[],"author":null},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2022-06-22T12:13:15.000Z","updated":"2022-06-22T12:13:15.605Z","comments":true,"path":"2022/06/22/我的第一篇博客/","link":"","permalink":"http://fyupeng.github.io/2022/06/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-06-22T11:44:09.697Z","updated":"1985-10-26T08:15:00.000Z","comments":true,"path":"2022/06/22/hello-world/","link":"","permalink":"http://fyupeng.github.io/2022/06/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}